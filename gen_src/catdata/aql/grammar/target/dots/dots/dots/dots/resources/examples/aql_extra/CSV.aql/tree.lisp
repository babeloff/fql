(file (program (kindDeclaration (schemaAssignment schema (schemaId (symbol S0)) = (schemaExp literal : (typesideKind (typesideExp sql)) { (schemaLiteralSection entities (schemaEntityId (symbol Employee)) (schemaEntityId (symbol Person)) foreign_keys (schemaForeignSig (schemaForeignId (symbol eAsP)) : (schemaEntityId (symbol Employee)) -> (schemaEntityId (symbol Person))) attributes (schemaAttributeSig (schemaAttributeId (symbol ssn)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol eId)) : (schemaEntityId (symbol Employee)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol eSsn)) : (schemaEntityId (symbol Employee)) -> (typesideTypeId (symbol Integer))) observation_equations (schemaObservationEquationSig (schemaPath (schemaArrowId (schemaEntityId (symbol eSsn)))) = (schemaPath (schemaPath (schemaArrowId (schemaEntityId (symbol eAsP)))) . (schemaArrowId (schemaEntityId (symbol ssn))))) allOptions) }))) (kindDeclaration (commandAssignment command (commandId (symbol createCsvData)) = (commandExp exec_js { (commandExecJsSection (quotedString "Java.type(\"catdata.Util\").writeFile(\"pId\\n0\\n1\\n2\", \"/Users/ryan/Desktop/Person.csv\")") (quotedString "Java.type(\"catdata.Util\").writeFile(\"eId,is\\n10,0\\n11,1\\n12,2\", \"/Users/ryan/Desktop/Employee.csv\")") allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol I0)) = (instanceExp import_csv (instanceFile "/Users/ryan/Desktop/") : (schemaRef (symbol S0)) { (instanceImportCsvSection (schemaEntityId (symbol Employee)) -> { (instanceCsvAssign (instanceCsvId (symbol Employee)) -> (instanceCsvId (symbol eId))) (instanceCsvAssign (instanceCsvId (symbol eAsP)) -> (instanceCsvId (symbol is))) (instanceCsvAssign (instanceCsvId (symbol eSsn)) -> (instanceCsvId (symbol is))) } (schemaEntityId (symbol Person)) -> { (instanceCsvAssign (instanceCsvId (symbol Person)) -> (instanceCsvId (symbol pId))) (instanceCsvAssign (instanceCsvId (symbol ssn)) -> (instanceCsvId (symbol pId))) } allOptions) }))) (kindDeclaration (commandAssignment command (commandId (symbol exportCsvData)) = (commandExp export_csv_instance (instanceRef (symbol I0)) (commandFile (quotedString "/Users/ryan/Desktop/exported"))))) (kindDeclaration (typesideAssignment typeside (typesideId (symbol Ty)) = (typesideExp literal { (typesideLiteralSection java_types (typesideJavaTypeSig (typesideTypeId (symbol String)) = (typesideJavaType "java.lang.String")) (typesideJavaTypeSig (typesideTypeId (symbol List)) = (typesideJavaType "java.util.List")) (typesideJavaTypeSig (typesideTypeId (symbol Option)) = (typesideJavaType "java.util.Optional")) (typesideJavaTypeSig (typesideTypeId (symbol Integer)) = (typesideJavaType "java.lang.Integer")) java_constants (typesideJavaConstantSig (typesideConstantId Integer) = (typesideJavaConstantValue "return java.lang.Integer.parseInt(input[0])")) (typesideJavaConstantSig (typesideConstantId String) = (typesideJavaConstantValue "return input[0]")) (typesideJavaConstantSig (typesideConstantId List) = (typesideJavaConstantValue "return java.util.Arrays.asList(input[0].split(\",\"))")) (typesideJavaConstantSig (typesideConstantId Option) = (typesideJavaConstantValue "throw new RuntimeException()")) java_functions (typesideJavaFunctionSig (typesideFnName (symbol at)) : (typesideFnLocal (symbol List)) , (typesideFnLocal (symbol Integer)) -> (typesideFnTarget (symbol Option)) = (typesideJavaStatement "return (input[1] < input[0].size() ? java.util.Optional.of(input[0].get(input[1])) : java.util.Optional.empty())")) (typesideJavaFunctionSig (typesideFnName (symbol of)) : (typesideFnLocal (symbol String)) -> (typesideFnTarget (symbol Option)) = (typesideJavaStatement "return java.util.Optional.of(input[0])")) (typesideJavaFunctionSig (typesideFnName (symbol get)) : (typesideFnLocal (symbol Option)) -> (typesideFnTarget (symbol String)) = (typesideJavaStatement "return input[0].get()")) allOptions) }))) (kindDeclaration (schemaAssignment schema (schemaId (symbol S)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty))) { (schemaLiteralSection entities (schemaEntityId (symbol Person)) attributes (schemaAttributeSig (schemaAttributeId (symbol name)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol String))) (schemaAttributeSig (schemaAttributeId (symbol likes)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol List))) allOptions) }))) (kindDeclaration (commandAssignment command (commandId (symbol createCsvData2)) = (commandExp exec_js { (commandExecJsSection (quotedString "Java.type(\"catdata.Util\").writeFile(\"ssn,nameOf,Likes\\n0,a,a\\n1,b,\\\"a,b,d\\\"\\n2,c,\\\"\\\"\\n\", \"/Users/ryan/Desktop/Person.csv\")") allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol I)) = (instanceExp import_csv (instanceFile "/Users/ryan/Desktop/") : (schemaRef (symbol S)) { (instanceImportCsvSection (schemaEntityId (symbol Person)) -> { (instanceCsvAssign (instanceCsvId (symbol Person)) -> (instanceCsvId (symbol ssn))) (instanceCsvAssign (instanceCsvId (symbol name)) -> (instanceCsvId (symbol nameOf))) (instanceCsvAssign (instanceCsvId (symbol likes)) -> (instanceCsvId (symbol Likes))) } allOptions) }))) (kindDeclaration (schemaAssignment schema (schemaId (symbol T)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty))) { (schemaLiteralSection imports (typesideImport (typesideRef (symbol S))) attributes (schemaAttributeSig (schemaAttributeId (symbol likes0)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol Option))) (schemaAttributeSig (schemaAttributeId (symbol likes1)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol Option))) (schemaAttributeSig (schemaAttributeId (symbol likes2)) : (schemaEntityId (symbol Person)) -> (typesideTypeId (symbol Option))) observation_equations (schemaObservationEquationSig forall (schemaEquationSig (schemaGen (symbol p)) . (evalSchemaFn (schemaFn (typesideFnName (symbol at))) ( (evalSchemaFn (schemaFn (typesideFnName (symbol likes))) ( (evalSchemaFn (schemaGen (symbol p))) )) , (evalSchemaFn (schemaLiteralValue 0)) )) = (evalSchemaFn (schemaFn (typesideFnName (symbol likes0))) ( (evalSchemaFn (schemaGen (symbol p))) )))) (schemaObservationEquationSig forall (schemaEquationSig (schemaGen (symbol p)) . (evalSchemaFn (schemaFn (typesideFnName (symbol at))) ( (evalSchemaFn (schemaFn (typesideFnName (symbol likes))) ( (evalSchemaFn (schemaGen (symbol p))) )) , (evalSchemaFn (schemaLiteralValue 1)) )) = (evalSchemaFn (schemaFn (typesideFnName (symbol likes1))) ( (evalSchemaFn (schemaGen (symbol p))) )))) (schemaObservationEquationSig forall (schemaEquationSig (schemaGen (symbol p)) . (evalSchemaFn (schemaFn (typesideFnName (symbol at))) ( (evalSchemaFn (schemaFn (typesideFnName (symbol likes))) ( (evalSchemaFn (schemaGen (symbol p))) )) , (evalSchemaFn (schemaLiteralValue 2)) )) = (evalSchemaFn (schemaFn (typesideFnName (symbol likes2))) ( (evalSchemaFn (schemaGen (symbol p))) )))) allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol J)) = (instanceExp literal : (schemaKind (schemaRef (symbol T))) { (instanceLiteralSection imports (instanceRef (symbol I)) allOptions) }))) (kindDeclaration (typesideAssignment typeside (typesideId (symbol Ty2)) = (typesideExp literal { (typesideLiteralSection types (typesideTypeSig (typesideTypeId (symbol String))) (typesideTypeSig (typesideTypeId (symbol Option))) constants (typesideConstantSig (typesideConstantId a) (typesideConstantId b) (typesideConstantId c) (typesideConstantId d) (typesideConstantId e) : (typesideConstantValue (symbol String))) (typesideConstantSig (typesideConstantId none) : (typesideConstantValue (symbol Option))) functions (typesideFunctionSig (typesideFnName (symbol some)) : (typesideFnLocal (symbol String)) -> (typesideFnTarget (symbol Option))) allOptions) }))) (kindDeclaration (schemaAssignment schema (schemaId (symbol S2)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty2))) { (schemaLiteralSection entities (schemaEntityId (symbol X)) attributes (schemaAttributeSig (schemaAttributeId (symbol _id)) : (schemaEntityId (symbol X)) -> (typesideTypeId (symbol String))) (schemaAttributeSig (schemaAttributeId (symbol att)) : (schemaEntityId (symbol X)) -> (typesideTypeId (symbol Option))) allOptions) }))) (kindDeclaration (schemaAssignment schema (schemaId (symbol T2)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty2))) { (schemaLiteralSection imports (typesideImport (typesideRef (symbol S2))) foreign_keys (schemaForeignSig (schemaForeignId (symbol f)) : (schemaEntityId (symbol X)) -> (schemaEntityId (symbol X))) path_equations (schemaPathEqnSig (schemaPath (schemaPath (schemaArrowId (schemaEntityId (symbol f)))) . (schemaArrowId (schemaEntityId (symbol f)))) = (schemaPath (schemaArrowId (schemaEntityId (symbol f))))) allOptions) }))) (kindDeclaration (constraintAssignment constraints (constraintId (symbol C)) = (constraintExp literal : (schemaRef (symbol T2)) { (constraintLiteralSection (constraintExpr forall (constraintUniversal (constraintGen (symbol x1)) (constraintGen (symbol x2)) : (schemaEntityId (symbol X))) where (constraintUniversalEquation (constraintPath (schemaArrowId (schemaEntityId (symbol att))) ( (constraintPath (schemaArrowId (schemaEntityId (symbol x1)))) )) = (constraintPath (schemaArrowId (schemaEntityId (symbol some))) ( (constraintPath (schemaArrowId (schemaEntityId (symbol _id))) ( (constraintPath (schemaArrowId (schemaEntityId (symbol x2)))) )) ))) -> where (constraintExistentialEquation (constraintPath (constraintPath (schemaArrowId (schemaEntityId (symbol x1)))) . (schemaArrowId (schemaEntityId (symbol f)))) = (constraintPath (schemaArrowId (schemaEntityId (symbol x2)))))) allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol I2)) = (instanceExp literal : (schemaKind (schemaRef (symbol T2))) { (instanceLiteralSection generators (instanceLiteralGen (instanceGenId (symbol x1)) (instanceGenId (symbol x2)) (instanceGenId (symbol x3)) (instanceGenId (symbol x4)) : (schemaEntityId (symbol X))) equations (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x1)))) . (instanceArrowId (schemaEntityId (symbol _id)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol a)))))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x1)))) . (instanceArrowId (schemaEntityId (symbol att)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol some))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x2)))) . (instanceArrowId (schemaEntityId (symbol _id)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol b)))))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x2)))) . (instanceArrowId (schemaEntityId (symbol att)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol none)))))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x3)))) . (instanceArrowId (schemaEntityId (symbol _id)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol c)))))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x3)))) . (instanceArrowId (schemaEntityId (symbol att)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol some))) ( (instancePath (instanceArrowId (schemaEntityId (symbol e)))) )))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x4)))) . (instanceArrowId (schemaEntityId (symbol _id)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol d)))))) (instanceEquation (instancePath (instancePath (instanceArrowId (schemaEntityId (symbol x4)))) . (instanceArrowId (schemaEntityId (symbol att)))) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol some))) ( (instancePath (instanceArrowId (schemaEntityId (symbol d)))) )))) allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol J2)) = (instanceExp chase (constraintKind (constraintRef (symbol C))) (instanceKind (instanceRef (symbol I2))))))) <EOF>)