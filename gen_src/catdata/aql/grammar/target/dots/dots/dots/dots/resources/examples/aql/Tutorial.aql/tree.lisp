(file (program (commentDeclarationSection (htmlCommentDeclaration html { (*  "\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n \n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t\t<title>AQL Tutorial</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"https://categoricaldata.net/css/simple.css\" />\n\t\t<script src=\"https://categoricaldata.net/js/simple.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1>AQL Tutorial</h1>\n\t\t\n\t\t\t<p> This online AQL tutorial is built-in to the IDE as the Tutorial example.\n\t\t\t    Readers are encouraged to use the IDE while reading the tutorial.\n\t\t\t</p>\n\t\t\t\n\t\t\t<p> Jump to section: <a href=\"#typesides\">Typesides</a>, \n\t\t\t\t<a href=\"#schemas\">Schemas</a>, <a href=\"#instances\">Instances</a>, \n\t\t\t\t<a href=\"#mappings\">Mappings</a>, \n\t\t\t\t<a href=\"#fdm\">Delta and Sigma</a>, \n\t\t\t\t<a href=\"#uberflowers\">Uber-flowers</a>,\n\t\t\t\t<a href=\"#conclusion\">Conclusion</a>.  \n\t\t\t</p>\t  \n\t\n\t\t<hr/> <div id=\"typesides\">\n\t\t<h2>Typesides</h2>\n\t\t\t<p>Every AQL file begins with a <b>typeside</b>.  \n\t\t\t\tThe typeside for this tutorial contains two <b>java_types</b>: <i>String</i>, \n\t\t\t\twhich is bound to <i>java.lang.String</i>;\n\t\t\t\tand <i>Integer</i>, which is bound to <i>java.lang.Integer</i>.  The\n\t\t\t\t<b>java_constants</b> section defines, for each java_type, javascript code that\n\t\t\t\tcreates a value of that type from a string.  For example, when the string\n\t\t\t\t100 is encountered in an AQL program and needs to be interpreted as an\n\t\t\t\t<i>Integer</i>, AQL will execute the <i>parseInt</i> function on the\n\t\t\t\tstring 100, yielding a <i>java.lang.Integer</i>.  Similarly, the \n\t\t\t\t<b>java_functions</b> section defines the <i>plus</i> function. \t\n\t\t\t</p></div>"  *) })) (kindDeclaration (typesideAssignment typeside (typesideId (symbol Ty)) = (typesideExp literal { (typesideLiteralSection java_types (typesideJavaTypeSig (typesideTypeId (symbol String)) = (typesideJavaType "java.lang.String")) (typesideJavaTypeSig (typesideTypeId (symbol Integer)) = (typesideJavaType "java.lang.Integer")) java_constants (typesideJavaConstantSig (typesideConstantId String) = (typesideJavaConstantValue "return input[0]")) (typesideJavaConstantSig (typesideConstantId Integer) = (typesideJavaConstantValue "return java.lang.Integer.parseInt(input[0])")) java_functions (typesideJavaFunctionSig (typesideFnName (symbol plus)) : (typesideFnLocal (symbol Integer)) , (typesideFnLocal (symbol Integer)) -> (typesideFnTarget (symbol Integer)) = (typesideJavaStatement "return (input[0] + input[1]).intValue()")) allOptions) }))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/>\n\t<div id=\"schemas\">\n\t<h2>Schemas</h2>\n\n\t\t<p>A <b>schema</b> on a typeside <i>Ty</i> contains a set of <b>entities</b>, a set\n\t\t\tof <b>attributes</b> taking entities to types, a set of <b>foreign_keys</b>\n\t\t\ttaking entities to entities, a set of <b>path_equations</b> between paths of foreign_keys,\n\t\t\tand a set of <b>observation_equations</b> between attributes and foreign_keys. \n\t\t</p>\n\t\t<p> In the following schema, the entities are <i>Employee</i>s and <i>Department</i>.\n\t\t\tThe <i>manager</i> foreign_key takes every <i>Employee</i> to their manager, and similarly\n\t\t\tfor <i>worksIn</i> and <i>secretary</i>.  The path_equations state that every \n\t\t\t<i>Employee</i> <i>e</i>'s <i>manager</i> \n\t\t\t<i>worksIn</i> the <i>Department</i> which <i>e</i> works in, and that every\n\t\t\t<i>Department</i> <i>d</i>'s <i>secretary</i>\n\t\t\t<i>worksIn</i> <i>d</i>.\n\t\t</p>   \t\n\t\t<p>The <i>name</i> attribute takes every <i>Department</i>\n\t\t\tto its name and similarly for <i>first, last, age, cummulative_age</i>.  \n\t\t\tThe observation_equations state that every <i>Employee</i> <i>e</i>'s \n\t\t\t<i>commulative_age</i> is the sum of <i>e</i>'s <i>age</i> and <i>e</i>'s\n\t\t\t<i>manager</i>'s <i>age</i>.\n\t\t</p>\t</div>"  *) })) (kindDeclaration (schemaAssignment schema (schemaId (symbol S)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty))) { (schemaLiteralSection entities (schemaEntityId (symbol Employee)) (schemaEntityId (symbol Department)) foreign_keys (schemaForeignSig (schemaForeignId (symbol manager)) : (schemaEntityId (symbol Employee)) -> (schemaEntityId (symbol Employee))) (schemaForeignSig (schemaForeignId (symbol worksIn)) : (schemaEntityId (symbol Employee)) -> (schemaEntityId (symbol Department))) (schemaForeignSig (schemaForeignId (symbol secretary)) : (schemaEntityId (symbol Department)) -> (schemaEntityId (symbol Employee))) path_equations (schemaPathEqnSig (schemaPath (schemaPath (schemaArrowId (schemaEntityId (symbol manager)))) . (schemaArrowId (schemaEntityId (symbol worksIn)))) = (schemaPath (schemaArrowId (schemaEntityId (symbol worksIn))))) (schemaPathEqnSig (schemaPath (schemaPath (schemaArrowId (schemaEntityId (symbol secretary)))) . (schemaArrowId (schemaEntityId (symbol worksIn)))) = (schemaPath (schemaArrowId (schemaEntityId (symbol Department))))) attributes (schemaAttributeSig (schemaAttributeId (symbol first)) (schemaAttributeId (symbol last)) : (schemaEntityId (symbol Employee)) -> (typesideTypeId (symbol String))) (schemaAttributeSig (schemaAttributeId (symbol age)) : (schemaEntityId (symbol Employee)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol cummulative_age)) : (schemaEntityId (symbol Employee)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol name)) : (schemaEntityId (symbol Department)) -> (typesideTypeId (symbol String))) observation_equations (schemaObservationEquationSig forall (schemaEquationSig (schemaGen (symbol e)) . (evalSchemaFn (schemaFn (typesideFnName (symbol cummulative_age))) ( (evalSchemaFn (schemaGen (symbol e))) )) = (evalSchemaFn (schemaFn (typesideFnName (symbol plus))) ( (evalSchemaFn (schemaFn (typesideFnName (symbol age))) ( (evalSchemaFn (schemaGen (symbol e))) )) , (evalSchemaFn (schemaFn (typesideFnName (symbol age))) ( (evalSchemaFn (schemaFn (typesideFnName (symbol manager))) ( (evalSchemaFn (schemaGen (symbol e))) )) )) )))) allOptions) }))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/> <div id=\"instances\">\n\t<h2>Instances</h2>\n\n\t\t<p>An <b>instance</b> on a schema <i>S</i> contains a set of <b>generators</b>\n\t\t\tand a set of variable-free <b>equations</b> between those generators. \n\t\t\tIn this example, there are three generating <i>Employee</i>s: <i>a,b,c</i>, \n\t\t\tand two generating <i>Department</i>s: <i>m,s</i>.  The <b>equations</b> specify,\n\t\t\tfor example, that the <i>name</i> of <i>m</i> is <i>Math</i>.  The IDE\n\t\t\tshows the tables generated by this instance.\n\t\t</p>\t\n\t\t<p>Note that the IDs in the\n\t\t\ttables do not directly correspond to the generators: AQL chooses \n\t\t\tIDs non-deterministically (e.g. <i>c</i> does not appear in the instance,\n\t\t\tbut <i>b.manager</i> does).  Note also that the tables contain nulls: \n\t\t\t<i>a.last</i>, for example.  Finally, note that\n\t\t\tthe <i>cummulative_age</i> attribute is automatically populated in the tables.\n\t\t</p>\t\n\t\t<p>Tables can be sorted by clicking on their column headers.</p>\n\t\t</div>  "  *) })) (kindDeclaration (instanceAssignment instance (instanceId (symbol I)) = (instanceExp literal : (schemaKind (schemaRef (symbol S))) { (instanceLiteralSection generators (instanceLiteralGen (instanceGen (symbol a)) (instanceGen (symbol b)) (instanceGen (symbol c)) : (schemaEntityId (symbol Employee))) (instanceLiteralGen (instanceGen (symbol m)) (instanceGen (symbol s)) : (schemaEntityId (symbol Department))) equations (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol first))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Al)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol first))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Bob)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol last))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Bo)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol first))) ( (instancePath (instanceArrowId (schemaEntityId (symbol c)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Carl)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol name))) ( (instancePath (instanceArrowId (schemaEntityId (symbol m)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Math)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol name))) ( (instancePath (instanceArrowId (schemaEntityId (symbol s)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol CS)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol age))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol age))) ( (instancePath (instanceArrowId (schemaEntityId (symbol c)))) )))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol manager))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol a)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol manager))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol c)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol manager))) ( (instancePath (instanceArrowId (schemaEntityId (symbol c)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol c)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol m)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol s)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol c)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol s)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol secretary))) ( (instancePath (instanceArrowId (schemaEntityId (symbol s)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol c)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol secretary))) ( (instancePath (instanceArrowId (schemaEntityId (symbol m)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol a)))))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol secretary))) ( (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol manager))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol worksIn))) ( (instancePath (instanceArrowId (schemaEntityId (symbol manager))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) )))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol age))) ( (instancePath (instanceArrowId (schemaEntityId (symbol a)))) )) = (instanceEquationValue (instanceLiteral (instanceLiteralValue "1")))) (instanceEquation (instancePath (instanceArrowId (schemaEntityId (symbol age))) ( (instancePath (instanceArrowId (schemaEntityId (symbol b)))) )) = (instanceEquationValue (instanceLiteral (instanceLiteralValue "5")))) allOptions) }))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/> <div id=\"mappings\">\n\t<h2>Mappings</h2>\n\n\t<p>An <b>mapping</b> from schema <i>C</i> to schema <i>D</i> takes each entity in <i>C</i>\n\t\tto an entity <i>D</i>, each foreign_key in <i>C</i> to a path of foreign_keys in <i>D</i>,\n\t\tand each attribute in <i>C</i> to a lambda expression in <i>D</i> (which may be abbreviated as a path).  In this example, the \n\t\ttwo entities <i>N1,N2</i> are taken to <i>N</i>, the foreign_key <i>f</i> is taken to the \n\t\tzero-length path on <i>N</i>, and the attribute <i>age</i> is taken to <i>age</i>.  We also\n\t\tdefine an instance on <i>D</i> which will be used later.\n\t</p>\t"   *) })) (kindDeclaration (schemaAssignment schema (schemaId (symbol C)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty))) { (schemaLiteralSection entities (schemaEntityId (symbol N1)) (schemaEntityId (symbol N2)) foreign_keys (schemaForeignSig (schemaForeignId (symbol f)) : (schemaEntityId (symbol N1)) -> (schemaEntityId (symbol N2))) attributes (schemaAttributeSig (schemaAttributeId (symbol name)) : (schemaEntityId (symbol N1)) -> (typesideTypeId (symbol String))) (schemaAttributeSig (schemaAttributeId (symbol salary)) : (schemaEntityId (symbol N1)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol age)) : (schemaEntityId (symbol N2)) -> (typesideTypeId (symbol Integer))) allOptions) }))) (kindDeclaration (schemaAssignment schema (schemaId (symbol D)) = (schemaExp literal : (typesideKind (typesideRef (symbol Ty))) { (schemaLiteralSection entities (schemaEntityId (symbol N)) attributes (schemaAttributeSig (schemaAttributeId (symbol name)) : (schemaEntityId (symbol N)) -> (typesideTypeId (symbol String))) (schemaAttributeSig (schemaAttributeId (symbol salary)) : (schemaEntityId (symbol N)) -> (typesideTypeId (symbol Integer))) (schemaAttributeSig (schemaAttributeId (symbol age)) : (schemaEntityId (symbol N)) -> (typesideTypeId (symbol Integer))) allOptions) }))) (kindDeclaration (mappingAssignment mapping (mappingId (symbol F)) = (mappingExp literal : (schemaRef (symbol C)) -> (schemaRef (symbol D)) { (mappingLiteralSection (mappingLiteralSubsection entity (mappingEntitySig (schemaEntityId (symbol N1)) -> (schemaEntityId (symbol N))) foreign_keys (mappingForeignSig (schemaForeignId (symbol f)) -> (schemaPath (schemaArrowId (schemaEntityId (symbol N))))) attributes (mappingAttributeSig (schemaAttributeId (symbol name)) -> (mappingAttributeTerm (schemaPath (schemaArrowId (schemaEntityId (symbol name)))))) (mappingAttributeSig (schemaAttributeId (symbol salary)) -> (mappingAttributeTerm lambda (mappingGen (symbol x)) . (evalMappingFn (mappingFn (typesideFnName (symbol salary))) ( (evalMappingFn (mappingGen (symbol x))) ))))) (mappingLiteralSubsection entity (mappingEntitySig (schemaEntityId (symbol N2)) -> (schemaEntityId (symbol N))) attributes (mappingAttributeSig (schemaAttributeId (symbol age)) -> (mappingAttributeTerm lambda (mappingGen (symbol x)) . (evalMappingFn (mappingFn (typesideFnName (symbol age))) ( (evalMappingFn (mappingGen (symbol x))) ))))) allOptions) }))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <p>  We also define an instance on <i>D</i> which will be used later. </p> </div> "  *) })) (kindDeclaration (instanceAssignment instance (instanceId (symbol J)) = (instanceExp literal : (schemaKind (schemaRef (symbol D))) { (instanceLiteralSection generators (instanceLiteralGen (instanceGen (symbol one)) (instanceGen (symbol two)) (instanceGen (symbol three)) : (schemaEntityId (symbol N))) multi_equations (instanceMultiEquation (instanceEquationId (symbol name)) -> { (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol one)))) (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Alice)))))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol two)))) (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Bob)))))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol three)))) (instanceEquationValue (instancePath (instanceArrowId (schemaEntityId (symbol Sue)))))) }) (instanceMultiEquation (instanceEquationId (symbol salary)) -> { (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol one)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 100)))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol two)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 250)))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol three)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 300)))) }) (instanceMultiEquation (instanceEquationId (symbol age)) -> { (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol one)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 20)))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol two)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 20)))) , (instanceMultiBind (instancePath (instanceArrowId (schemaEntityId (symbol three)))) (instanceEquationValue (instanceLiteral (instanceLiteralValue 30)))) }) allOptions) }))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/> <div id=\"fdm\" >\n\t<h2>Delta and Sigma</h2>\n\n\t<p>Given a mapping <i>F</i> from schema <i>C</i> to schema <i>D</i>, the <b>delta</b>\n\t\toperation converts instances on <i>D</i> to instances on <i>C</i>.  It can be thought\n\t\tof as projection:\n\t</p>\t"  *) })) (kindDeclaration (instanceAssignment instance (instanceId (symbol deltaFJ)) = (instanceExp delta (mappingKind (mappingRef (symbol F))) (instanceKind (instanceRef (symbol J)))))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " \n\t<p>Given a mapping <i>F</i> from schema <i>C</i> to schema <i>D</i>, the <b>sigma</b>\n\t\toperation converts instances on <i>C</i> to instances on <i>D</i>.  It can be thought\n\t\tof as union, followed by merge.  In this example, sigma undoes delta:\n\t</p>\t</div>"  *) })) (kindDeclaration (instanceAssignment instance (instanceId (symbol sigmaFdeltaFJ)) = (instanceExp sigma (mappingKind (mappingRef (symbol F))) (instanceKind (instanceRef (symbol deltaFJ)))))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/> <div id=\"uberflowers\">\n\t<h2>Uber-flowers (From-Where) queries</h2>\n\n\t<p> In addition to mappings, so-called uber-flower <b>queries</b> can be used to define\n\t\trelationships between schemas and to migrate data from one schema to another.  Such\n\t\tqueries can be <b>evaluated</b>, providing a similar semantics to SQL.  However, \n\t\tunlike SQL, AQL guarantees, at compile time, that queries can only result in instances\n\t\twhich obey their data integrity constraints.\n\t</p>\n\t<p> A query from schema <i>C</i> to schema <i>D</i> specifies, for each entity <i>d</i>\n\t\t in <i>D</i>, a from-where-return statement that defines how <i>d</i> is to be\n\t\tpopulated.  In addition, a query specifies how the foreign keys in <i>D</i> must be \n\t\tpopulated.  Here is a query corresponding to the previous section's delta; it does\n\t\tnot require any where clauses.  The block corresponding to foreign key <i>f</i>\n\t\tsays that for each <i>x</i> inserted into <i>N1</i>, the <i>y</i> to which <i>x</i>\n\t\tshould be sent to by <i>f</i> is <i>x</i>.  In general, the foreign_keys\n\t\tpart of a query is the most difficult part to write and should be attempted only\n\t\tafter writing the entities part.\t\t\n\t</p>"  *) })) (kindDeclaration (queryAssignment query (queryId (symbol deltaFAsQuery)) = (queryExp literal : (schemaKind (schemaRef (symbol D))) -> (schemaRef (symbol C)) { (queryLiteralSection entity (queryEntityExpr (schemaEntityId (symbol N1)) -> { (queryClauseExpr from (queryClauseFrom (queryGen (symbol x)) : (schemaEntityId (symbol N))) attributes (queryPathMapping (queryGen (symbol name)) -> (queryPath (queryGen (symbol name)) ( (queryPath (typesideConstantId x)) ))) (queryPathMapping (queryGen (symbol salary)) -> (queryPath (queryGen (symbol salary)) ( (queryPath (typesideConstantId x)) ))) foreign_keys (queryForeignSig (schemaForeignId (symbol f)) -> { (queryPathMapping (queryGen (symbol y)) -> (queryPath (typesideConstantId x))) }) allOptions) }) entity (queryEntityExpr (schemaEntityId (symbol N2)) -> { (queryClauseExpr from (queryClauseFrom (queryGen (symbol y)) : (schemaEntityId (symbol N))) attributes (queryPathMapping (queryGen (symbol age)) -> (queryPath (queryGen (symbol age)) ( (queryPath (typesideConstantId y)) ))) allOptions) }) allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol deltaFJ_prime)) = (instanceExp eval (queryKind (queryRef (symbol deltaFAsQuery))) (instanceKind (instanceRef (symbol J)))))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <br/>Here is a query corresponding to the previous section's sigma: </div>"  *) })) (kindDeclaration (queryAssignment query (queryId (symbol sigmaFAsQuery)) = (queryExp literal : (schemaKind (schemaRef (symbol C))) -> (schemaRef (symbol D)) { (queryLiteralSection entity (queryEntityExpr (schemaEntityId (symbol N)) -> { (queryClauseExpr from (queryClauseFrom (queryGen (symbol n1)) : (schemaEntityId (symbol N1))) attributes (queryPathMapping (queryGen (symbol name)) -> (queryPath (queryGen (symbol name)) ( (queryPath (typesideConstantId n1)) ))) (queryPathMapping (queryGen (symbol salary)) -> (queryPath (queryGen (symbol salary)) ( (queryPath (typesideConstantId n1)) ))) (queryPathMapping (queryGen (symbol age)) -> (queryPath (queryGen (symbol age)) ( (queryPath (queryGen (symbol f)) ( (queryPath (typesideConstantId n1)) )) ))) allOptions) }) allOptions) }))) (kindDeclaration (instanceAssignment instance (instanceId (symbol sigmaFdeltaFJ_prime)) = (instanceExp eval (queryKind (queryRef (symbol sigmaFAsQuery))) (instanceKind (instanceRef (symbol deltaFJ_prime)))))) (commentDeclarationSection (htmlCommentDeclaration html { (*  " <hr/> <div id=\"conclusion\">\n\t<h2>Conclusion</h2>\n\n\t<p> This tutorial has barely scratched the surface of AQL's capabilities.  These capabilities\n\t\tare described in the other examples built-in to the AQL tool, as well as in the examples\n\t\tsection of <a href=\"http://catinf.com\">catinf.com</a>.  In addition, AQL comes with a \n\t\tcomprehensive manual specifying all available operations: see \n\t\t<a href=\"http://categoricaldata.net/fql.html\">categoricaldata.net</a>.  Finally, user\n\t\tcontributions of AQL code are available in the contrib folder of the AQL github repo\n\t\t(available at the previous link).\n\n\t</p>\n\t<br />\n</div></body></html>"  *) }))) <EOF>)