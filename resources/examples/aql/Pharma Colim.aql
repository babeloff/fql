//Example courtesy of Peter Gates

typeside Type = literal {
	java_types	
		dom = "java.lang.Object"
	java_constants
		dom = "return input[0]"
}

///////////////////////////////////////////////////////////////////////////

schema S = literal : Type {
	entities
		O P T
 	foreign_keys
		f: O -> P
		g: O -> T
} 

schema S1 = literal : Type {
	entities 
		Observation Person Gender ObsType
	foreign_keys 
		f: Observation -> Person
		h: Person -> Gender
		g: Observation -> ObsType
	attributes	
	     Person_att: Person -> dom
	     Gender_att: Gender -> dom
	     ObsType_att: ObsType -> dom
} 

schema S2 = literal : Type {
	entities 
		Observation Patient Method Type
	foreign_keys 
		f : Observation -> Patient
		g1: Observation -> Method
		g2: Method -> Type
	attributes
	     Patient_att: Patient -> dom
	     Type_att: Type -> dom
}

mapping F1 = literal : S -> S1 {
	entities 
		O -> Observation
		P -> Person
		T -> ObsType
	foreign_keys 
		f -> f
		g -> g
} 

mapping F2 = literal : S -> S2 {
	entities
		O -> Observation
		P -> Patient
		T -> Type
	foreign_keys 
		f -> f
		g -> g1.g2
} 

///////////////////////////////////////////////////////////////////////////

//Pushout schema, written out explicitly here by hand
schema T = literal : Type {
	entities 
		O P G T M
	foreign_keys 
		f : O -> P
		h : P -> G		
		g1: O -> M 
		g2: M -> T
	attributes	
		G_att : G -> dom
		T_att1: T -> dom
		T_att2: T -> dom
		P_att1: P -> dom
		P_att2: P -> dom
} 

mapping G1 = literal : S1 -> T {
	entities 
		Observation -> O
		Person -> P
		ObsType -> T
		Gender -> G
	foreign_keys 
		f -> f 
		g -> g1.g2
		h -> h
	attributes
		Person_att  -> lambda x. P_att1(x)
		Gender_att  -> lambda x. G_att(x)
		ObsType_att -> lambda x. T_att1(x)
} 

mapping G2 = literal : S2 -> T {
	entities
		Observation -> O
		Patient -> P
		Method -> M
		Type -> T
	foreign_keys 
		f  -> f
		g1 -> g1
		g2 -> g2
	attributes
		Patient_att -> lambda x. P_att2(x)
		Type_att    -> lambda x. T_att2(x)		
} 

///////////////////////////////////////////////////////////////////////////

instance I1 = literal : S1 {
	generators
		one two three : Observation
		Peter Paul : Person
	    	M F :Gender
	    	BloodPressure BodyWeight HeartRate: ObsType
	equations
		Peter.Person_att = xPeter Paul.Person_att = xPaul
		M.Gender_att = xM F.Gender_att = xF
		BloodPressure.ObsType_att = xBloodPressure
		BodyWeight.ObsType_att = xBodyWeight
		HeartRate.ObsType_att = xHeartRate
		one.f = Peter two.f = Peter three.f = Paul
		Peter.h = M Paul.h = M
		one.g = BloodPressure two.g = BodyWeight three.g = HeartRate
} 

instance I2 = literal : S2 {
	generators
		o1 o2 o3 o4 : Observation
		Pete Jane : Patient
		m1 m2 m3 m4 : Method
		BP Wt : Type
	equations
	     Pete.Patient_att = xPete Jane.Patient_att = xJane
	     BP.Type_att = xBloodPressure Wt.Type_att = xBodyWeight
	     o1.f = Pete o2.f = Pete o3.f = Jane o4.f = Jane
	     o1.g1 = m1 o2.g1 = m2 o3.g1 = m3 o4.g1 = m1
	     m1.g2 = BP m2.g2 = BP m3.g2 = Wt m4.g2 = Wt
} 

instance I = literal : S {
	generators 
	  	P : P 
	  	B W : T
} 

transform a1 = literal : sigma F1 I -> I1 {
		generators 
			P -> Peter
			B -> BloodPressure
			W -> BodyWeight
} 

transform a2 = literal : sigma F2 I -> I2 {
		generators
			P -> Pete
			B -> BP 
			W-> Wt
} 

///////////////////////////////////////////////////////////////////////////

transform b1 = sigma G1 a1
transform b2 = sigma G2 a2

graph Span = literal {
	nodes
		A B C
	edges
		f : A -> B
		g : A -> C
}

instance answer = colimit Span T {
	nodes
		A -> src b1
		B -> dst b1
		C -> dst b2
	edges
		f -> b1
		g -> b2
}
