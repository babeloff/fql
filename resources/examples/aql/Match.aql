//test graphs for matching

////////////////////////////////////////////////////////////////

// (R, T) in O Paper 

graph emp1_A = literal {
	nodes 
		A Str Nat
	edges
		emp_last  : A -> Str
       	dept_name : A -> Str
        	sum       : A -> Nat
}

graph emp1_B = literal {
	nodes 
		Emp Dept QR Str Nat
	edges
		mgr  : Emp  -> Emp
         	wrk  : Emp  -> Dept
        	sec  : Dept -> Emp
        	f    : QR   -> Emp
        	g    : QR   -> Dept
        	last : Emp  -> Str
        	name : Dept -> Str
        	sal  : Emp  -> Nat
}

//pragma emp1_AB_naive = match "naive" : emp1_A -> emp1_B   	
//pragma emp1_BA_naive = match "naive" : emp1_B -> emp1_A  	
//pragma emp1_AB_sf = match "sf" : emp1_A -> emp1_B   	
//pragma emp1_BA_sf = match "sf" : emp1_B -> emp1_A 	

/////////////////////////////////////////////////////////////////////

//- (S, L) in O Paper 

graph emp2_A = literal {
	nodes
		Emp Dept Str Nat
	edges
     	mgr  : Emp  -> Emp
         	wrk  : Emp  -> Dept
         	sec  : Dept -> Emp
         	last : Emp  -> Str
         	name : Dept -> Str
         	sal  : Emp  -> Nat
}

graph emp2_B = literal {
	nodes
		Emp Dept Team Str Nat
	edges
         mgr  : Emp  -> Emp
         wrk  : Emp  -> Dept
         sec  : Dept -> Emp
         on   : Emp  -> Team
         bel  : Team -> Dept
         last : Emp  -> Str
         name : Dept -> Str
         sal  : Emp  -> Nat
         col  : Team -> Str
}

//pragma emp2_AB_naive = match "naive" : emp2_A -> emp2_B   	
//pragma emp2_BA_naive = match "naive" : emp2_B -> emp2_A   	
//pragma emp2_AB_sf = match "sf" : emp2_A -> emp2_B   	
//pragma emp2_BA_sf = match "sf" : emp2_B -> emp2_A  	

///////////////////////////////////////////////////////////////////////

//- (C, D) in + Delta 

graph delta_A = literal {
	nodes
		T1 T2 string int
	edges	
		t1_ssn    : T1 -> string
		t1_first  : T1 -> string
		t1_last   : T1 -> string
		t2_first  : T2 -> string
		t2_last   : T2 -> string
		t2_salary : T2 -> int
}

graph delta_B = literal { 
	nodes
		T string int
	edges
		ssn0    : T -> string
		first0  : T -> string
		last0   : T -> string
		salary0 : T -> int
}

//pragma delta_AB_naive = match "naive" : delta_A -> delta_B   	
//pragma delta_BA_naive = match "naive" : delta_B -> delta_A   	
//pragma delta_AB_sf = match "sf" : delta_A -> delta_B   	
//pragma delta_BA_sf = match "sf" : delta_B -> delta_A   	


///////////////////////////////////////////////////////////////////////

//- (C, D) in + Pi 

graph pi_A = literal {
	nodes 
		c1 c2 string
	edges 
		att1 : c1 -> string
		att2 : c1 -> string
		att3 : c2 -> string
}

graph pi_B = literal {
	nodes
		d string
	edges
		a1 : d -> string
		a2 : d -> string
		a3 : d -> string
}

//pragma pi_AB_naive = match "naive" : pi_A -> pi_B   	
//pragma pi_BA_naive = match "naive" : pi_B -> pi_A	
//pragma pi_AB_sf = match "sf" : pi_A -> pi_B   	
//pragma pi_BA_sf = match "sf" : pi_B -> pi_A

////////////////////////////////////////////////////////////////////

graph one = literal {
	nodes
		A B
	edges
		f : A -> B	
}

graph three = literal {
	nodes
		A X B
	edges
		f : A -> X
		g : X -> B	
}

//pragma intoPath_naive = match "naive" : one -> three
//pragma outOfPath_naive= match "naive" : three -> one
//pragma intoPath_sf = match "sf" : one -> three
//pragma outOfPath_sf= match "sf" : three -> one
