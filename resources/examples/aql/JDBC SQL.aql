
//create some example data in a local temporary sql database. (close delay keeps H2 database alive across connections)
pragma load = exec_jdbc "org.h2.Driver" "jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1" { 
"
DROP TABLE IF EXISTS Employee;
DROP TABLE IF EXISTS Department;" //multiple statements can be used, but many SQL engines (such as H2, AQL's internal engine) will only print the output of the first statement, and some require ?allowMultiQueries=true in the jdbc string 

"
CREATE TABLE Employee(
 id INT PRIMARY KEY,
 name VARCHAR(255),
 manager INT,
 worksIn INT
)"

//a bug in the library for AQL's code editor prevents the correct highlighting of 
//multi-line quotes.  Starting the text on the line after the initial quote helps readability.
"
CREATE TABLE Department(
 id INT PRIMARY KEY,
 name VARCHAR(255),
 secretary INT,
)"
 
"
INSERT INTO Employee VALUES 
 (101, 'Alan', 103, 10), 
 (102, 'Camille', 102, 2), 
 (103, 'Andrey', 103, 10)"

"
INSERT INTO Department VALUES
 (10, 'Applied Math', 101),
 (2, 'Pure Math', 102)"

"
ALTER TABLE Employee ADD CONSTRAINT e1
 FOREIGN KEY (manager) REFERENCES Employee (id)"

"
ALTER TABLE Employee ADD CONSTRAINT e2 
 FOREIGN KEY (worksIn) REFERENCES Department (id)"

"
ALTER TABLE Department ADD CONSTRAINT d1
 FOREIGN KEY (secretary) REFERENCES Employee (id)"

// options always_reload = true //true forces pragmas to not be cached between runs (i.e., always run)
}  
 
/* When the JDBC class name and string are left blank, AQL uses the value of the options
   jdbc_default_class and jdbc_default_string.  These can be set globally by placing,
   at the beginning of the file, for example:
   
  options
    jdbc_default_class = "org.h2.Driver" 
    jdbc_default_string = "jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1"
 */
//look at the example data
pragma view0 = exec_jdbc "" "" {  //see note above!!!
"SELECT * FROM Department"
"SELECT * FROM Employee"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

schema S = literal : sql {
	entities
		Employee 
		Department
	foreign_keys
		manager   : Employee -> Employee
		worksIn   : Employee -> Department
		secretary : Department -> Employee
	path_equations 
		manager.worksIn = worksIn
  		secretary.worksIn = Department
  		manager.manager = manager
  	attributes
  		first last	: Employee -> Varchar
     	age			: Employee -> Integer
     	name 		: Department -> Varchar
 }

//import an instance by providing queries for each entity
instance J = import_jdbc "" "" : S {
//use name as first name
  //use null as last name
  //use id as age	
	Employee -> "SELECT id, manager, worksIn, name AS first, NULL as last, id AS age FROM Employee"
	Department -> "SELECT id, secretary, name FROM Department"
}

//or, import an instance by providing queries for each entity/foreign key/attribute 
instance J_again = import_jdbc "" "" : S {
	Employee -> "SELECT id FROM Employee"
	Department -> "SELECT id FROM Department"
	manager -> "SELECT id, manager FROM Employee"  
	worksIn -> "SELECT id, worksIn FROM Employee" 
	secretary -> "SELECT id, secretary FROM Department"
	first -> "SELECT id, name FROM Employee"	//use name as first name
  	last	-> "SELECT id, NULL FROM Employee"   //use null as last name
     age -> "SELECT id, id FROM Employee"	  //use id as age	
     name -> "SELECT id, name FROM Department"		
  options
     import_joined = false      
}

instance K = quotient_jdbc "" "" J {
	"SELECT id, id FROM Employee"
}

//import a transform by providing queries for each entity
transform Jid = import_jdbc "" "" : J -> J {
	Employee -> "SELECT id, id FROM Employee"
	Department -> "SELECT id, id FROM Department"
}

//export the instance to SQL
pragma store1 = export_jdbc_instance J "" "" "Exported" 

//view exported SQL instance
pragma view1 = exec_jdbc "" "" { 
	"SELECT * FROM ExportedEmployee"
	"SELECT * FROM ExportedDepartment"
}

//export the transform to SQL
pragma store2 = export_jdbc_transform Jid "" "" "ExportedTrans"

//view the exported SQL transform
pragma view2 = exec_jdbc "" "" { 
	"SELECT * FROM ExportedTransEmployee"
	"SELECT * FROM ExportedTransDepartment"
}

//to import all the data in a SQL DB at once onto an auto-generated schema, use the following:
instance import_all = import_jdbc_all "" "" 
//the schema can be obtained as
schema import_all_schema = schemaOf import_all
//or
schema import_all_schema_2 = schemaOf (import_jdbc_all "" "" {
	options
		schema_only = true
})

////////////////////////////////////////////////////////////
//
//execute command line actions as follows
//pragma cmdline1 = exec_cmdline  { 
//"ls -ltr"
//"echo hi"
//}
//
//execute actions as follows
//pragma js1 = exec_js  { 
//"javax.swing.JOptionPane.showMessageDialog(null, \"hello1\")"
//"javax.swing.JOptionPane.showMessageDialog(null, \"hello2\")"
//}

//store query evaluation as a view

query Q = literal : S -> S {
	entities
		Employee -> 
		{from e:Employee d:Department
		 where e.worksIn = d
		 return first -> e.manager.first 
		        last -> d.name 
		        age -> e.age}
		
		Department -> {from d:Department 
		               return name -> d.name}
		
	foreign_keys
		manager -> {e -> e.manager
		            d -> e.manager.worksIn}
		worksIn -> {d -> e.worksIn}
		secretary -> {e -> d.secretary 
		              d -> d}
}

pragma store_id_query = export_jdbc_query Q "" "" "Exported" "View"

pragma view_view = exec_jdbc "" "" { 
	"SELECT * FROM ViewEmployee"
	"SELECT * FROM ViewDepartment"
	"DROP VIEW ViewEmployee"
	"DROP VIEW ViewDepartment" //clean up is important when re-running the program
}
