
constraints c = literal : (empty : empty) {
	forall where -> exists where
}


typeside ty = literal {
	types nat
	functions 0 1 2 3 : -> nat   s : nat -> nat    p : nat, nat -> nat
}

constraints c1 = literal : (empty : ty) {
	-> exists where p(0,0)=0.s
}

instance I = literal : (empty : ty) {
	equations
		p(0,0)=0.s	
	options
		require_consistency=false	
}

schema s = literal : ty {
	entities e
	attributes att : e -> nat
}

mapping m = literal : s -> s {
	entity
		e -> e
	attributes 
		att -> lambda x. p(0,p(x.att, att(x)))
}


query q = literal : s -> s {
	entity
		e -> {from where
	attributes 
		att -> p(0,0.s)}
}


schema s2 = literal : ty {
	entities e
	//foreign_keys f : e -> e
	attributes att : e -> nat
	observation_equations
		forall x. x.att.s = 0
}


/* In Instance,
 * instanceColimitNode : instanceRef RARROW instanceKind ;
instanceColimitEdge : schemaArrowId RARROW transformKind ;

should be (or possibly + instead of *)

instanceColimitNode : instanceRef* RARROW instanceKind ;
instanceColimitEdge : schemaArrowId* RARROW transformKind ;

In AQL, most places x : y is allowed so is x w z : y
 */

 /*
  * csv files have 'per block' options - important in practice
  * 
instance I0 = import_csv "/Users/ryan/Desktop/" : S0 {
	Employee -> {Employee -> eId   eAsP -> is    eSsn -> is
	options prover = auto
	}
	//eId -> eId can be ommitted
	
	Person -> {Person -> pId  ssn -> pId  options prover = auto}
}
*/



/*
 * This confused me.  attribute mappings are of the form
 * v -> lambda x:t. e
 * where :t is optional and e is a term (e.g., f(x,y) or p.q or 3 etc)
 * note it is critical that there be exactly one x (i.e., e must have 1 free var)
 * 
 mappingAttributeTerm
  : LAMBDA mappingGen (COMMA mappingGen)* DOT evalMappingFn
  # MappingAttrTerm_Lambda
*/

/*
 * I don't think this is implemented - colimits in the category of schemas and queries may
 * be very different that colimits in the category of schemas and mappings.
 * 
  | GET_MAPPING schemaColimitKind schemaRef
  #QueryExp_Get

  */

 /* aql doesn't treat true and false specially as e.g., the ANTLR grammar does */
 /* does it really work to import 'sql' in a typeside? */
    