typeside Ty = literal { 
	java_types
		String = "java.lang.String"
	java_constants
		String = "return input[0]"
}

/* Introductory Schemas and instances
// The following sequence of schemas and associated instances are basic
// structural elements that will be used to demonstrate how Uber-Flowers
// work. These are our basic building blocks. */

/* One schema declaration.
// The terminal object, one object and an implicit identity arrow
*/
schema One = literal : Ty {
	entities
	  O
	attributes
	  rowOLbl: O -> String // Representitive O attribute
}
/* Proposed template for i_CoSpan instance.
Type in:
instance i_One = literal : One {
and hit carrige return.

If a valid compiled schema One exists, produce an instance template 

instance i_One = literal : One {
	generators
	  <list generators here> : O
	multi_equations
	  // rowOLbl: O -> String // Representitive O attribute
	  rowOLbl -> {<List assignments here>}
}

Example of a complete instance would look like: */
instance i_One = literal : One {
	generators
	  o1 o2 : O
	multi_equations
	  // rowOLbl: O -> String // Representitive O attribute
	  rowOLbl -> {o1 row_o1, o2 row_o2}
}
/* oPair schema declaration.
// Discrete schema containing two tables without any nonprimary keys.
 */
schema oPair = literal : Ty {
    entities
      Ap Bp
    attributes
      rowApLbl: Ap -> String // Representitive Ap attribute
      rowBpLbl: Bp -> String
 // Representitive Bp attribute
}
/* Proposed template for i_Pair instance.
Type in:
instance i_Pair = literal : Pair {
and hit carrige return.

If a valid compiled schema Pair exists, produce an instance template 

instance i_Pair = literal : Pair {
	generators
	  <list generators here> : Ap
	  <List generators here> : Bp
	multi_equations
       rowApLbl: Ap -> String // Representitive Ap attribute
       rowApLbl -> {<List assignments here>}
       rowBpLbl: Bp -> String // Representitive Bp attribute
       rowBpLbl -> {<List assignments here>}
}

Example of a complete instance would look like: */
instance i_oPair = literal : oPair {
  generators
    a1 a2 a3 : Ap
    b1 b2 b3 b4 : Bp
  multi_equations
    // rowApLbl: Ap -> String // Representitive Ap attribute
    rowApLbl -> {a1 row_a1, a2 row_a2, a3 row_a3}
    // rowBpLbl: Bp -> String // Representitive Bp attribute
    rowBpLbl -> {b1 row_b1, b2 row_b2, b3 row_b3, b4 row_b4}
}
instance i_3_1_1 = literal : oPair { // See example 3.1.1 of CT4S
  generators
    a1 a2 a3 a4 a5 a6: Ap
    b1 b2 b3 b4 : Bp
  multi_equations
    // rowApLbl: Ap -> String // Representitive Ap attribute
    rowApLbl -> {a1 one, a2 two, a3 three, a4 four, a5 five, a6 six}
    // rowBpLbl: Bp -> String // Representitive Bp attribute
    rowBpLbl -> {b1 clubs, b2 diamonds, b3 hearts, b4 spades}
}
/* Two schema declaration.
// Schema representing a foreign key, that is, a single arrow f: S -> T.
// This is known as a detail -> master relationship in
 database jargon.
 */
schema Two = literal : Ty {
	entities
	  Source Target
	foreign_keys
	  master: Source -> Target // Single foreign key representing a detail -> master relationship  
	attributes
	  rowSLbl: Source -> String // Representitive Source attribute.
	  rowTLbl: Target -> String // Representitive Target attribute.
	  mstrPtsTo: Source -> String // Move rowTLbl to Source by following master.rowTLbl.
	observation_equations
	  // Copy the target attribute up to source by following the master key.
	  forall s. s.mstrPtsTo = s.master.rowTLbl
}
/* Proposed template for i_Two instance.
Type in:
instance i_Two = literal : Two {
and hit carrige return.

If a valid compiled schema Two exists, produce an instance template 

instance i_Two = literal : Two { 
	generators
	  <list generators here> : Source
	  <List generators here> : Target
	multi_equations
	  // master: Source -> Target // Single foreign key representing a detail -> master relationship
	  master -> {<List assignments here>}
	  // rowSLbl: Source -> String // Representitive Source attribute
       rowSLbl -> {<List assignments here>}
	  // rowTLbl: Target -> String // Representitive Target attribute
       rowTLbl -> {<List assignments here>}
}

Example of a complete instance would look like: */
instance i_Two = literal : Two {
	generators
	  s1 s2 s3 s4: Source
	  t1 t2 t3: Target
	multi_equations
	  // master: Source -> Target // Single foreign key representing a detail -> master relationship
	  master -> {s1 t1, s2 t1, s3 t2, s4 t2}
	  // rowSLbl: Source -> String // Representitive Source attribute
	  rowSLbl -> {s1 row_s1, s2 row_s2, s3 row_s3, s4 row_s4}
	  // rowTLbl: Target -> String // Representitive Target attribute
	  rowTLbl -> {t1 row_t1, t2 row_t2, t3 row_t3}
	  // mstrPtsTo: Source -> String // Move rowTLbl to Source by following master.rowTLbl.
	  // Don't need this, handled by observation_equations
	  // mstrPtsTo -> {s1 s1.master.rowTLbl, s2 s1.master.rowTLbl, s3 s1.master.rowTLbl} 
}
/* aPair schema declaration.
 */
schema GRFintr = literal : Ty {
	entities
	  Arrow Node
	foreign_keys
	  source: Arrow -> Node // Source node for an arrow
	  target: Arrow -> Node // Target node for an arrow
	attributes
	  rowArLbl: Arrow -> String  // Arrow label
	  rowNdLbl: Node -> String   // Node label
	  srcPtsTo: Arrow -> String // Denormalize the source node label onto the arrow
	  tgtPtsTo: Arrow -> String // Denormalize the target node label onto the arrow
	observation_equations
	  // Copy the source and target node labels to the Arrow entity.
	  forall a. a.srcPtsTo = a.source.rowNdLbl
	  forall a. a.tgtPtsTo = a.target.rowNdLbl
}
/* Proposed template for i_aPair instance.
instance i_aPair = literal : aPair {
	generators
	  <list generators here> : Srcp
	  <List generators here> : Tgtp
	multi_equations
	  // fp: Srcp -> Tgtp // First of a pair of parallel foreign keys
	  fp -> {<List assignments here>}
	  // gp: Srcp -> Tgtp // Second of a pair of parallel foreign keys
	  gp -> {<List assignments here>}
	  // rowSpLbl: Srcp -> String // Representitive Source attribute
	  rowSpLbl -> {<List assignments here>}
	  // rowTpLbl: Tgtp -> String // Representitive Target attribute
	  rowTpLbl -> {<List assignments here>}
	  // fpPtsTo: Srcp -> String  // Move rowTpLbl to Srcp by follwoing fp.rowTpLbl
	  fpPtsTo -> {<List assignments here>}
	  // gpPtsTo: Srcp -> String  // Move rowTpLbl to Srcp by follwoing gp.rowTpLbl
	  gpPtsTo -> {<List assignments here>}
} */
instance i_GRFintr = literal : GRFintr {
	generators
	  a1 a2 a3 a4 a5 a6 a7 : Arrow
	  n1 n2 n3 : Node
	multi_equations
	  // source: Arrow -> Node // First of a pair of parallel foreign keys
	  source -> {a1 n1, a2 n1, a3 n2, a4 n2, a5 n3, a6 n3, a7 n3}
	  // gp: Srcp -> Tgtp // Second of a pair of parallel foreign keys
	  target -> {a1 n1, a2 n2, a3 n2, a4 n1, a5 n3, a6 n2, a7 n3}
	  // rowSpLbl: Srcp -> String // Representitive Source attribute
	  rowArLbl -> {a1 arrow_a1, a2 arrow_a2, a3 arrow_s3, a4 arrow_s4, a5 arrow_s5, a6 arrow_s6, a7 arrow_s7}
	  // rowTpLbl: Tgtp -> String // Representitive Target attribute
	  rowNdLbl -> {n1 node_n1, n2 node_n2, n3 node_n3}
}
/* Span schema declaration.
// Schema representing an entity that references two entities. This is called
// a span in category theory and an intersection table in database jargon.
// A state of a span is generally a relation between the two referenced entities.
// In database jargon this is called a many to many relationship.
//
// For further reading about spans see section 3.2.2 Spans, experiments and 
// matrices of CT4S.
//
// The xPntsTo family of attributes are used to illustrate how one can make use
// of paths to move an attribute that can be accessed through a path to an entity
// that is the source of that path. They also serve to illustrate how schema and
// instance interact to include built in providence features. Their intended use
// is illustrated in the assignment statements in instances i_Span and i_Square. 
*/
schema Span = literal : Ty {
	entities
	  As Bs Cs
	foreign_keys
	  fs : Cs -> As // Foreign key to As
	  gs : Cs -> Bs // Foreign key to Bs
	attributes
	  rowAsLbl: As -> String // Representitive As attribute
	  rowBsLbl: Bs -> String // Representitive Bs attribute
	  rowCsLbl: Cs -> String // Representitive Cs attribute
	  fsPntsTo: Cs -> String // Move rowAsLbl to Cs by following fs.rowAsLbl
	  gsPntsTo: Cs -> String // Move rowBsLbl to Cs by following gs.rowBsLbl
	observation_equations
	  // Copy all of the attributes up to Cs referenced through foreign keys
	  forall c. c.fsPntsTo = c.fs.rowAsLbl
	  forall c. c.gsPntsTo = c.gs.rowBsLbl
}
/* Proposed template for i_Span instance.
Type in:
instance i_Span = literal : Span {
and hit carrige return.

If a valid compiled schema Span exists, produce an instance template 

instance i_Span = literal : Span {
	generators
	  <list generators here> : As
	  <List generators here> : Bs
	  <List generators here> : Cs
	multi_equations
	  // fs : Cs -> As // Foreign key to As
	  fs -> {<List assignments here>}
	  // gs : Cs -> Bs // Foreign key to Bs
	  gs -> {<List assignments here>}
	  // rowAsLbl: As -> String // Representitive As attribute
	  rowAsLbl -> {<List assignments here>}
	  // rowBsLbl: Bs -> String // Representitive Bs attribute
	  rowBsLbl -> {<List assignments here>}
	  // rowCsLbl: Cs -> String // Representitive Cs attribute
	  rowCsLbl -> {<List assignments here>}
	  // fsPntsTo: Cs -> String // Move RowAsLbl to Cs by following fs.RowAsLbl
	  fsPntsTo -> {<List assignments here>}
	  // gsPntsTo: Cs -> String // Move RowBsLbl to Cs by following gs
.RowBsLbl
	  gsPntsTo -> {<List assignments here>}
}

Example of a complete instance would look like: */
instance i_SpanPrd = literal : Span {
  generators
    a1 a2 a3 : As
    b1 b2 : Bs
    c1 c2 c3 c4 c5 c6 : Cs
  multi_equations
    // fs : Cs -> As // Foreign key to As
    fs -> {c1 a1, c2 a2, c3 a3, c4 a1, c5 a2, c6 a3}
    // gs : Cs -> Bs // Foreign key to Bs
    gs -> {c1 b1, c2 b1, c3 b1, c4 b2, c5 b2, c6 b2}
    // rowAsLbl: As -> String // Representitive As attribute
    rowAsLbl -> {a1 row_a1, a2 row_a2, a3 row_a3}
    // rowBsLbl: Bs -> String // Representitive Bs attribute
    rowBsLbl -> {b1 row_b1, b2 row_b2}
    // rowCsLbl: Cs -> String // Representitive Cs attribute
    rowCsLbl -> {c1 row_c1_a1b1, c2 row_c2_a2b1, c3 row_c3_a3b1,
                 c4 row_c4_a1b2, c5 row_c5_a2b2, c6 row_c6_a3b2}
    // Don't need this. Handled by the schema observation_equations clause
    // fsPntsTo: Cs -> String // Move RowAsLbl to Cs by following fs.RowAsLbl
    // fsPntsTo -> {c1 c1.fs.rowAsLbl, c2 c2.fs.rowAsLbl, c3 c3.fs.rowAsLbl,
    //              c4 c4.fs.rowAsLbl, c5 c5.fs.rowAsLbl, c6 c6.fs.rowAsLbl}
    // gsPntsTo: Cs -> String // Move RowBsLbl to Cs by following gs.RowBsLbl
    // gsPntsTo -> {c1 c1.gs.rowBsLbl, c2 c2.gs.rowBsLbl, c3 c3.gs.rowBsLbl,
    //              c4 c4.gs.rowBsLbl, c5 c5.gs.rowBsLbl, c6 c6.gs.rowBsLbl}
}
instance i_SpanSum = literal : Span {
  generators
    a1 a2 a3 : As
    b1 b2 b3 b4: Bs
    c1 c2 : Cs
  multi_equations
    // fs : Cs -> As // Foreign key to As
    fs -> {c1 a1, c2 a2}
    // gs : Cs -> Bs // Foreign key to Bs
    gs -> {c1 b1, c2 b4}
    // rowAsLbl: As -> String // Representitive As attribute
    rowAsLbl -> {a1 row_a1, a2 row_a2, a3 row_a3}
    // rowBsLbl: Bs -> String // Representitive Bs attribute
    rowBsLbl -> {b1 row_b1, b2 row_b2}
    // rowCsLbl: Cs -> String // Representitive Cs attribute
    rowCsLbl -> {c1 row_c1, c2 row_c2}
    // Don't need this. Handled by the schema observation_equations clause
    // fsPntsTo: Cs -> String // Move RowAsLbl to Cs by following fs.RowAsLbl
    // fsPntsTo -> {c1 c1.fs.rowAsLbl, c2 c2.fs.rowAsLbl, c3 c3.fs.rowAsLbl,
    //              c4 c4.fs.rowAsLbl, c5 c5.fs.rowAsLbl, c6 c6.fs.rowAsLbl}
    // gsPntsTo: Cs -> String // Move RowBsLbl to Cs by following gs.RowBsLbl
    // gsPntsTo -> {c1 c1.gs.rowBsLbl, c2 c2.gs.rowBsLbl, c3 c3.gs.rowBsLbl,
    //              c4 c4.gs.rowBsLbl, c5 c5.gs.rowBsLbl, c6 c6.gs.rowBsLbl}
}
/* CoSpan schema declaration.
// Schema representing two entities that reference a common master. This is called
// a cospan in category theory. The co prefix indicating that a cospan is related to
// a span by reversing the direction of the arrows. I am unaware of standardized
// jargon in the database community for this structure.
*/
schema CoSpan = literal : Ty {
	entities
	  Ac Bc Cc
	foreign_keys
	  fc: Ac -> Cc // Foreign key from Ac
	  gc: Bc -> Cc // Foreign key from Bc
	attributes
	  rowAcLbl: Ac -> String // Representitive Ac attribute
	  rowBcLbl: Bc -> String // Representitive Bc attribute
	  rowCcLbl: Cc -> String // Representitive Cc attribute
	  fcPntsTo: Ac -> String
	  gcPntsTo: Bc -> String
	observation_equations
	  forall a. a.fcPntsTo = a.fc.rowCcLbl
	  forall b. b.gcPntsTo = b.gc.rowCcLbl 
}
/* Proposed template for i_CoSpan instance.
Type in:
instance i_CoSpan = literal : CoSpan {
and hit carrige return.

If a valid compiled schema CoSpan exists, produce an instance template 

instance i_CoSpan = literal : CoSpan {
	generators
	  <list generators here> : Ac
	  <List generators here> : Bc
	  <List generators here> : Cc
	multi_equations
	  // fc : Cc -> Ac // Foreign key from Ac
	  fc -> {<List assignments here>}
	  // gc : Cc -> Bc // Foreign key from Bc
	  gs -> {<List assignments here>}
	  // rowAcLbl: Ac -> String // Representitive Ac attribute
	  rowAcLbl -> {<List assignments here>}
	  // rowBcLbl: Bc -> String // Representitive Bc attribute
	  rowBcLbl -> {<List assignments here>}
	  // rowCcLbl: Cc -> String // Representitive Cc attribute
	  rowCcLbl -> {<List assignments here>}
}

Example of a complete instance would look like: 
*/
instance i_CoSpan = literal : CoSpan {
  generators
     a1 a2 a3 a4 : Ac
     b1 b2 b3 b4 b5 : Bc
     c1 c2 : Cc
  multi_equations
     // fc : Cc -> Ac // Foreign key from Ac
     fc -> {a1 c1, a2 c1, a3 c2, a4 c2}
	// gc : Cc -> Bc // Foreign key from Bc
     gc -> {b1 c1, b2 c1, b3 c2, b4 c2, b5 c2}
     // rowAcLbl: Ac -> String // Representitive Ac attribute
	rowAcLbl -> {a1 row_a1, a2 row_a2, a3 row_a3, a4 row_a4}
	// rowBcLbl: Bc -> String // Representitive Bc attribute
	rowBcLbl -> {b1 row_b1, b2 row_b2, b3 row_b3, b4 row_b4, b5 row_b5}
	// rowCcLbl: Cc -> String // Representitive Cc attribute
	rowCcLbl -> {c1 row_c1, c2 row_c2}
}
/* Square schema declaration.
// Square defined as follows (neglecting xPntsTo attributes):
// 
//        n
//   NW ------> NE 
//  | |\      /||
//  |  \     /  |
// w|  String   |e
//  | /|    |\  |
// \//       \ \/
// SW ------> SE
//      s
//    
// We have added the path equation w followed by s is equal to n followed be e.
// This equation is a statement that the square is comutitive. Considering this
// from the perspective of a database, if we choose a record in NW and lookup
// a record in SE by following the foriegn keys s followed by n we will get the
// same record in SE as we would get by following the foreign keys w followed
// by s. The AQL syntax provides a mechanism for declaring this path equivalence
// as a property of the schema Square.
//
// The xPntsTo family of attributes are used to illustrate how one can make use
// of paths to move an attribute that can be accessed through a path to an entity
// that is the source of that path.
 They also serve to illustrate how schema and
// instance interact to incluide build in providence features. 
*/
schema Square = literal : Ty {
	entities 
	  NW NE SW SE
	foreign_keys
	  w:NW->SW // Forengn key on the west side of the sqaure 
	  e:NE->SE // Forengn key on the eest side of the sqaure 
	  s:SW->SE // Forengn key on the south side of the sqaure
	  n:NW->NE // Forengn key on the north side of the sqaure
	path_equations 
	  w.s=n.e
	attributes
	  rowNWLbl: NW -> String // Representitive attribute for NW
	  rowNELbl: NE -> String // Representitive attribute for NE
	  rowSWLbl: SW -> String // Representitive attribute for SW
	  rowSELbl: SE -> String // Representitive attribute for SE
	  wPntsTo : NW -> String // Move RowSWLbl to NW by following w.rowSWLbl
	  ePntsTo : NE -> String // Move rowSELbl to NE by following e.rowSELbl
	  sPntsTo : SW -> String // Move rowSELbl to SW by following s.rowSELbl
	  nPntsTo : NW -> String // Move rowNELbl to NW by following n.rowNELbl
	  wsPntsTo: NW -> String // Move rowSELbl to NW by following w.s.rowSELbl
	  nePntsTo: NW -> String // Move rowSELbl to NW by following n.e.rowSELbl
	observation_equations
	  // Copy all attributes referenced through foreign keys
	  forall nw. nw.wPntsTo = nw.w.rowSWLbl
	  forall nw. nw.nPntsTo = nw.n.rowNELbl
	  forall ne. ne.ePntsTo = ne.e.rowSELbl
	  forall sw. sw.sPntsTo = sw.s.rowSELbl
	  forall nw. nw.wsPntsTo = nw.w.s.rowSELbl
	  forall nw. nw.nePntsTo = nw.n.e.rowSELbl
}
/* Proposed template for i_Square instance.
Type in:
instance i_Square = literal : Square {
and hit carrige return.

If a valid compiled schema Square exists, produce an instance template 

instance i_Square = literal : Square {
	generators
	  <list generators here> : NW
	  <List generators here> : NE
	  <List generators here> : SW
	  <List generators here> : SE
	multi_equations
	  // w:NW->SW // Forengn key on the west side of the sqaure 
	  w -> {<List assignments here>}
	  // e:NE->SE // Forengn key on the eest side of the sqaure 
	  e -> {<List assignments here>}
	  // s:SW->SE // Forengn key on the south side of the sqaure
	  s -> {<List assignments here>}
	  // n:NW->NE // Forengn key on the north side of the sqaure
	  n -> {<List assignments here>}
	  // rowNWLbL: NW -> String // Representitive attribute for NW
	  rowNWLbL -> {<List assignments here>}
	  // rowNELbl: NE -> String // Representitive attribute for NE
	  rowNELbl -> {<List assignments here>}
	  // rowSWLbl: SW -> String // Representitive attribute for SW
	  rowSWLbl -> {<List assignments here>}
	  // rowSELbl: SE -> String // Representitive attribute for SE
	  rowSELbl -> {<List assignments here>}
	  // wPntsTo : NW -> String // Move RowSWLbl to NW by following w.RowSWLbl
	  wPntsTo -> {<List assignments here>}
	  // ePntsTo : NE -> String // Move rowSELbl to NE by following e.rowSELbl
	  ePntsTo -> {<List assignments here>}
	  // sPntsTo : SW -> String // Move rowSELbl to SW by following s.rowSELbl
	  sPntsTo -> {<List assignments here>}
	  // nPntsTo : NW -> String // Move RowNELbl to NW by following n.RowNELbl
	  nPntsTo -> {<List assignments here>}
	  // wsPntsTo: NW -> String // Move rowSELbl to NW by following w.s.rowSELbl
	  wsPntsTo -> {<List assignments here>}
	  // nePntsTo: NW -> String // Move rowSELbl to NW by following n.e.rowSELbl
	  nePntsTo -> {<List assignments here>}
}

Example of a complete instance would look like: 
*/
instance i_Square = literal : Square {
	generators
	  nw1 nw2 nw3 nw4 nw5 nw6 : NW
	  ne1 ne2 ne3 ne4 : NE
	  sw1 sw2 sw3 sw4 sw5 : SW
	  se1 se2 : SE
	multi_equations
	  // w:NW->SW // Forengn key on the west side of the sqaure 
	  w -> {nw1 sw1, nw2 sw1, nw3 sw2, nw4 sw3, nw5 sw4, nw6 sw5}
	  // e:NE->SE // Forengn key on the eest side of the sqaure 
	  e -> {ne1 se1, ne2 se1, ne3 se2, ne4 se2}
	  // s:SW->SE // Forengn key on the south side of the sqaure
	  s -> {sw1 se1, sw2 se1, sw3 se2, sw4 se2, sw5 se2}
	  // n:NW->NE // Forengn key on the north side of the sqaure
	  n -> {nw1 ne1, nw2 ne2, nw3 ne1, nw4 ne3, nw5 ne3, nw6 ne3}
	  // rowNWLbL: NW -> String // Representitive attribute for NW
	  rowNWLbl -> {nw1 row_nw1, nw2 row_nw2, nw3 row_nw3,
	               nw4 row_nw4, nw5 row_nw5, nw6 row_nw6}
	  // rowNELbl: NE -> String // Representitive attribute for NE
	  rowNELbl -> {ne1 row_ne1, ne2 row_ne2, ne3 row_ne3, ne4 row_ne4}
	  // rowSWLbl: SW -> String // Representitive attribute for SW
	  rowSWLbl -> {sw1 row_sw1, sw2 row_sw2, sw3 row_sw3, sw4 row_sw4, sw5 row_sw5}
	  // rowSELbl: SE -> String // Representitive attribute for SE
	  rowSELbl -> {se1 row_se1, se2 row_se2}
	  // Not required
	  // wPntsTo : NW -> String // Move RowSWLbl to NW by following w.rowSWLbl
	  // wPntsTo -> {nw1 nw1.w.rowSWLbl, nw2 nw2.w.rowSWLbl, nw3 nw3.w.rowSWLbl,
	  //             nw4 nw4.w.rowSWLbl, nw5 nw5.w.rowSWLbl, nw6 nw6.w.rowSWLbl}
	  // ePntsTo : NE -> String // Move rowSELbl to NE by following e.rowSELbl
	  // ePntsTo -> {ne1 ne1.e.rowSELbl, ne2 ne2.e.rowSELbl,
	  //             ne3 ne3.e.rowSELbl, ne4 ne4.e.rowSELbl}
	  // sPntsTo : SW -> String // Move RowSELbl to SW by following s.rowSELbl
	  // sPntsTo -> {sw1 sw1.s.rowSELbl, sw2 sw2.s.rowSELbl, sw3 sw3.s.rowSELbl,
	  //             sw4 sw4.s.rowSELbl, sw5 sw5.s.rowSELbl}
	  // nPntsTo : NW -> String // Move rowNELbl to NW by following n.rowNELbl
	  // nPntsTo -> {nw1 nw1.n.rowNELbl, nw2 nw2.n.rowNELbl, nw3 nw3.n.rowNELbl,
	  //             nw4 nw4.n.rowNELbl, nw5 nw5.n.rowNELbl, nw6 nw6.n.rowNELbl}
	  // wsPntsTo: NW -> String // Move RowSELbl to NW by following w.s.rowSELbl
	  // wsPntsTo -> {nw1 nw1.w.s.rowSELbl, nw2 nw2.w.s.rowSELbl, nw3 nw3.w.s.rowSELbl,
	  //              nw4 nw4.w.s.rowSELbl, nw5 nw5.w.s.rowSELbl, nw6 nw6.w.s.rowSELbl}
	  // nePntsTo: NW -> String // Move RowSELbl to NW by following n.e.rowSELbl
	  // nePntsTo -> {nw1 nw1.n.e.rowSELbl, nw2 nw2.n.e.rowSELbl, nw3 nw3.n.e.rowSELbl,
	  //              nw4 nw4.n.e.rowSELbl, nw5 nw5.n.e.rowSELbl, nw6 nw6.n.e.rowSELbl}
}
instance i_SqrPB = literal : Square {
	generators
	  //nw1 nw2 nw3 nw4 nw5 nw6 : NW
	  ne1 ne2 ne3 ne4 : NE
	  sw1 sw2 sw3 sw4 sw5 : SW
	  se1 se2 : SE
	multi_equations
	  // w:NW->SW // Forengn key on the west side of the sqaure 
	  // w -> {nw1 sw1, nw2 sw1, nw3 sw2, nw4 sw3, nw5 sw4, nw6 sw5}
	  // e:NE->SE // Forengn key on the eest side of the sqaure 
	  e -> {ne1 se1, ne2 se1, ne3 se2, ne4 se2}
	  // s:SW->SE // Forengn key on the south side of the sqaure
	  s -> {sw1 se1, sw2 se1, sw3 se2, sw4 se2, sw5 se2}
	  // n:NW->NE // Forengn key on the north side of the sqaure
	  // n -> {nw1 ne1, nw2 ne2, nw3 ne1, nw4 ne3, nw5 ne3, nw6 ne3}
	  // rowNWLbL: NW -> String // Representitive attribute for NW
	  //rowNWLbl -> {nw1 row_nw1, nw2 row_nw2, nw3 row_nw3,
	  //             nw4 row_nw4, nw5 row_nw5, nw6 row_nw6}
	  // rowNELbl: NE -> String // Representitive attribute for NE
	  rowNELbl -> {ne1 row_ne1, ne2 row_ne2, ne3 row_ne3, ne4 row_ne4}
	  // rowSWLbl: SW -> String // Representitive attribute for SW
	  rowSWLbl -> {sw1 row_sw1, sw2 row_sw2, sw3 row_sw3, sw4 row_sw4, sw5 row_sw5}
	  // rowSELbl: SE -> String // Representitive attribute for SE
	  rowSELbl -> {se1 row_se1, se2 row_se2}
	  // Not needed.
	  // wPntsTo : NW -> String // Move RowSWLbl to NW by following w.rowSWLbl
	  //wPntsTo -> {nw1 nw1.w.rowSWLbl, nw2 nw2.w.rowSWLbl, nw3 nw3.w.rowSWLbl,
	  //            nw4 nw4.w.rowSWLbl, nw5 nw5.w.rowSWLbl, nw6 nw6.w.rowSWLbl}
	  // ePntsTo : NE -> String // Move rowSELbl to NE by following e.rowSELbl
	  // ePntsTo -> {ne1 ne1.e.rowSELbl, ne2 ne2.e.rowSELbl,
	  //             ne3 ne3.e.rowSELbl, ne4 ne4.e.rowSELbl}
	  // sPntsTo : SW -> String // Move RowSELbl to SW by following s.rowSELbl
	  // sPntsTo -> {sw1 sw1.s.rowSELbl, sw2 sw2.s.rowSELbl, sw3 sw3.s.rowSELbl,
	  //             sw4 sw4.s.rowSELbl, sw5 sw5.s.rowSELbl}
	  // nPntsTo : NW -> String // Move rowNELbl to NW by following n.rowNELbl
	  //nPntsTo -> {nw1 nw1.n.rowNELbl, nw2 nw2.n.rowNELbl, nw3 nw3.n.rowNELbl,
	  //            nw4 nw4.n.rowNELbl, nw5 nw5.n.rowNELbl, nw6 nw6.n.rowNELbl}
	  // wsPntsTo: NW -> String // Move RowSELbl to NW by following w.s.rowSELbl
	  //wsPntsTo -> {nw1 nw1.w.s.rowSELbl, nw2 nw2.w.s.rowSELbl, nw3 nw3.w.s.rowSELbl,
	  //             nw4 nw4.w.s.rowSELbl, nw5 nw5.w.s.rowSELbl, nw6 nw6.w.s.rowSELbl}
	  // nePntsTo: NW -> String // Move RowSELbl to NW by following n.e.rowSELbl
	  //nePntsTo -> {nw1 nw1.n.e.rowSELbl, nw2 nw2.n.e.rowSELbl, nw3 nw3.n.e.rowSELbl,
	  //             nw4 nw4.n.e.rowSELbl, nw5 nw5.n.e.rowSELbl, nw6 nw6.n.e.rowSELbl}
}

/* Some examples of queries on the above schemas
 * 
 */
// The identitity query on Two
query qIdTwo = literal : Two -> Two {
   entities
     Source -> {
    	  from
    	    s:Source
	  return
	    // rowSLbl: Source -> String // Representitive Source attribute
	    rowSLbl -> s.rowSLbl
	    // mstrPtsTo: Source -> String // Move rowTLbl to Source by following master.rowTLbl.
	    mstrPtsTo -> s.master.rowTLbl}
     Target -> {
    	  from
    	    t:Target
	  return
	    // rowTLbl: Target -> String // Representitive Target attribute
	    rowTLbl -> t.rowTLbl}

	foreign_keys
       // master: Source -> Target // Single foreign key representing a detail -> master relationship
	  master -> {t -> s.master}
} 
instance i_IdTwo = eval qIdTwo i_Two
/* Query qoPairBang
 * There is only one way to right this query. Both of the entities in oPair
 * most be populated by the only available entity in One. In the queries that
 * follow you will see this as a universal pattern.
 */
query qoPairBang = literal : One -> oPair {
   entities
	Ap -> {
	  from
	    oa:O
	  return
         // rowApLbl: Ap -> String // Representitive Ap attribute
	    rowApLbl -> oa.rowOLbl}
	Bp -> {
	  from
	    ob:O
	  return
         // rowBpLbl: Bp -> String // Representitive Bp attribute
	    rowBpLbl -> ob.rowOLbl}
}
instance i_oPairBang = eval qoPairBang i_One
instance i_oPairCoeval = coeval qoPairBang i_oPair
/* Query qTwoBang
 * 
 */
query qTwoBang = literal : One -> Two {
   entities
	Source -> {
	  from
	    os:O
	  return
	    // mstrPtsTo: Source -> String // Move rowTLbl to Source by following master.rowTLbl.
	    mstrPtsTo -> os.rowOLbl
	    // rowSLbl: Source -> String // Representitive Source attribute.
	    rowSLbl -> os.rowOLbl}
	Target -> {
	  from
	    ot:O
	  return
	    // rowTLbl: Target -> String // Representitive Target attribute.
	    rowTLbl -> ot.rowOLbl}

   foreign_keys
	// master: Source -> Target // Single foreign key representing a detail -> master relationship  
	master -> {ot -> os}
}
instance i_TwoBang = eval qTwoBang i_One
instance i_TwoCoeval = coeval qTwoBang i_Two

// Injective deltas

/* One as target schema
 * Queries of this type can be used to identify a single entity from any
 * schema and load its contents into the single table one. Notice again
 * that our ability to do this depends on our particularly simple choice
 * of the type side. More generally we would need a target schema One
 * that contained all of the attributes of the entity we were extracting.
 * 
 * Notice also that all foreign keys must by necesity be left behind and
 * so this process effectively removes an entity from the context it
 * enjoys as a part of a larger schema.
 */
// Pick the entity Ap of oPair
query qPickAp = literal : oPair -> One {
   entities
	O -> {
	  from
	    a:Ap
	  return
	    // rowOLbl: O -> String // Representitive O attribute
	    rowOLbl -> a.rowApLbl}
}
instance i_PickAp = eval qPickAp i_oPair
// Pick the entity SW of Square
query qPickSW = literal : Square -> One {
   entities
	O -> {
	  from
	    sw:SW
	  return rowOLbl -> sw.rowSWLbl}
}
instance i_pickSW = eval qPickSW i_Square
// Span as target schema
// Pick the Span in Square
query qPickSqSpn = literal : Square -> Span {
   entities
	As -> {
	  from 
	    ne:NE
	  return
	    // rowAsLbl: As -> String // Representitive As attribute
	    rowAsLbl -> ne.rowNELbl}
	Bs -> {
	  from
	    sw:SW
	  return
	    // rowBsLbl: Bs -> String // Representitive Bs attribute
	    rowBsLbl -> sw.rowSWLbl}
	Cs -> {
	  from 
	    nw:NW
	  return
	    // fsPntsTo: Cs -> String // Move rowAsLbl to Cs by following fs.rowAsLbl
	    fsPntsTo -> nw.nPntsTo
	    // gsPntsTo: Cs -> String // Move rowBsLbl to Cs by following gs.rowBsLbl
	    gsPntsTo -> nw.wPntsTo
	    // rowCsLbl: Cs -> String // Representitive Cs attribute
	    rowCsLbl -> nw.rowNWLbl}

   foreign_keys
	//  fs : Cs -> As // Foreign key to As
	fs -> {ne -> n(nw)}
	//  gs : Cs -> Bs // Foreign key to Bs
	gs -> {sw -> w(nw)}
}
instance i_PickSqSpn = eval qPickSqSpn i_Square
// Mapping GRF to Span
query qGRFSpan = literal : GRFintr -> Span {
   entities /*source entities: Srcp Tgtp*/
	As -> {
	  from
	    na:Node
	  //where
	  return
	    rowAsLbl /*:String*/ -> na.rowNdLbl}
	Bs -> {
	  from
	    nb:Node
	  //where
	  return
	    rowBsLbl /*:String*/ -> nb.rowNdLbl}
	Cs -> {
	  from
	    s:Arrow
	  //where
	  return
	    fsPntsTo /*:String*/ -> s.srcPtsTo
	    gsPntsTo /*:String*/ -> s.tgtPtsTo
	    rowCsLbl /*:String*/ -> s.rowArLbl}

	foreign_keys
		fs /*:Cs->As*/ -> {na -> source(s)}
		gs /*:Cs->Bs*/ -> {nb -> target(s)}
}
instance i_GRFSpan = eval qGRFSpan i_GRFintr
instance i_SpanGRF = coeval qGRFSpan i_SpanPrd

/* The main event
 * 
 */

/* Entity Attribute Value model (EAV)
 *  
 * This model is structurally related to a the Span schema.
 * In this case there are three foreign keys radiating from
 * a central entity rather than two. For this reason EVA is
 * what category theorists would call a wide span.
 * 
 * The EAV model has been a popular strategy to provide for
 * attribute volatility in relational databases. The idea is
 * to create a model that alows new entities and attributes be
 * added at run time through the transaction engine associated
 * with the database. This means that a database schema change
 * (add new tables and new columns) can be handled as part of
 * an insert statement. 
 * 
 * This model can be considered the first example of a schema-
 * less strategy. In our world we can see that this is not a
 * model without a schema, rather a model with a generic schema.
 * In fact, those familiar with the data dictionary of a relational
 * database will recognize the similarity between the "Tables"
 * and "Columns" data dictionary tables and the Entity and Attribute
 * Entities in the EAV model. As we shall see there are multiple
 * such strategies and they can be related through the use of
 * structure preserving maps.
 */
schema EAV = literal : Ty {
  entities
     Observation
     Entity
     Attribute
     Value
  foreign_keys
     source : Observation -> Entity	// Observation source entity 
     attr   : Observation -> Attribute	// Observation attribute name
     target : Observation -> Value		// Observation value entity
  attributes
     attLbl : Attribute -> String	// Attribute label
     entLbl : Entity -> String	// Entity label
     obsVal : Value -> String		// Observation value as string
}
instance i_EAV = literal : EAV {
  generators
     a1 a2 : Attribute
     e1 e2 : Entity
     o1 o2 o3 : Observation
     v1 v2 v3 : Value
/*  equations // verbose equational syntax
     // source : Observation -> Entity // Observation source entity
     o1.source=e1 o2.source=e1 o3.source=e2
     // attr   : Observation -> Attribute // Observation attribute name
     o1.attr=a1 o2.attr=a2 o3.attr=a1
     // target : Observation -> Value // Observation value entity
     o1.target=v1 o2.target=v2 o3.target=v3
     // attLbl : Attribute -> String // Attribute label
     a1.attLbl=BodyWt a2.attLbl=HeartRt
     // entLbl : Entity -> String // String label for an entity
     e1.entLbl=Peter_v1 e2.entLbl=Peter_v2
     // obsVal : Value -> String // Observation value as string
     v1.obsVal="190_lbs" v2.obsVal="60_bpm" v3.obsVal="200_lbs" */
  multi_equations // consise alternative systax
   // source : Observation -> Entity // Observation source entity
   source -> {o1 e1, o2 e1, o3 e2}
   // attr   : Observation -> Attribute // Observation attribute name
   attr -> {o1 a1, o2 a2, o3 a1}
   // target : Observation -> Value // Observation value entity
   target -> {o1 v1, o2 v2, o3 v3}
   // attLbl : Attribute -> String // Attribute label
   attLbl -> {a1 BodyWt, a2 HeartRt}
   // entLbl : Entity -> String // String label for an entity
   entLbl -> {e1 Peter_v1, e2 Peter_v2}
   // obsVal : Value -> String // Observation value as string
   obsVal -> {v1 "190_lbs", v2 "60_bpm", v3 "200_lbs"}
}
/* Directed Graph model (GRF)
 * A directed graph can be modeled useing a schema consisting of a pair of
 * entities connected by a pair of parallel foreign keys. The source entity
 * of the pair of foreign keys will contain the set of nodes of the graph. 
 * The target of the pair of foreign keys will contain the set of arrows of 
 * the graph. Catagory theorists like to think in terms of paths. Along this
 * theme, a node can be considered to be a path of length zero. An arrow 
 * connecting two nodes can be considered to be a path of length one. The
 * data we load into the graph is analogous to instance data in a relational
 * schema so we label the nodes I_0 for instance paths of length zero and
 * arrows which connect individual pices of information I_1 for instance
 * paths of length one.
 * 
 * Notce the similarity between this graph model and the W3C's RDF model
 * consisting of subject (source node) predicate (arrow) object (target node).
 * This model is the second example of a schema-less stragegy. Again note
 * there is a schema for this strategy, but like EAV is is a generic schema
 * rather than one specific to a particular business domain.
 */
schema GRF = literal : Ty {
  entities
     I_1 I_0
  foreign_keys
     src_i    : I_1 -> I_0
     tgt_i    : I_1 -> I_0
  attributes
     arLbl    : I_1 -> String
     nodeVal  : I_0 -> String
}
instance i_GRF = literal : GRF {
  generators
     i11 i12 i13 :  I_1
     i01 i02 i03 i04 i05 : I_0
  equations
     i11.src_i=i04 i12.src_i=i04 i13.src_i=i05
     i11.tgt_i=i01 i12.tgt_i=i02 i13.tgt_i=i03
     i01.nodeVal="190_lbs" i02.nodeVal="60_bpm" i03.nodeVal="200_lbs"
     i04.nodeVal=Peter_v1 i05.nodeVal=Peter_v2
     i11.arLbl=BodyWt i12.arLbl=HeartRt i13.arLbl=BodyWt
}
/* Query mapping EAV to GRF
 * This query illustrates a structure presurving map from EAV to
 * GRF. */
query qEAVSpan = literal : EAV -> Span {
entities /*source entities: Attribute Entity Observation Value*/
   As -> {
	from
	  e:Entity
	return
	  rowAsLbl /*:String*/ -> e.entLbl}
   Bs -> {
   	from
	  v:Value
	return
	  rowBsLbl /*:String*/ -> v.obsVal}
   Cs -> {
   	from
	  o:Observation
	return
	  fsPntsTo /*:String*/ -> o.source.entLbl
	  gsPntsTo /*:String*/ -> o.target.obsVal
	  rowCsLbl /*:String*/ -> o.attr.attLbl}

   foreign_keys
	fs /*:Cs->As*/ -> {e -> o.source}
	gs /*:Cs->Bs*/ -> {v -> o.target}
}
instance i_EAVSpan = eval qEAVSpan i_EAV
instance i_EAVGRF = coeval qGRFSpan i_EAVSpan
/* Universal Data model (UDM)
 *  In this model we draw a stronger connection between the data dictionary
 *  of a relational database and the entities we choose to represent in our
 *  general purpose "schema-less" model. One can draw an line seperating
 *  entities associated with the data dictionary (Tab, Col) and those
 *  associated with instance data (Row, Cell). This divides the model into
 *  two seperate regions.
 *  
 *  Martin Fowler in his book "Analysis Patterns: Reusable Object Models"
 *  labels the region of a model containing dictionary like entities/objects
 *  "Knowledge Layer" and the region of a model containing instance like
 *  entities/objects "Operational Layer".
 */
schema UDM = literal : Ty {
  entities
     Tbl Col Row Cel
  foreign_keys
     colTab  : Col -> Tbl
     rowTab  : Row -> Tbl
     celCol  : Cel -> Col
     celRow  : Cel -> Row
  path_equations
     celCol.colTab = celRow.rowTab
  attributes
     tblName : Tbl -> String
     colName : Col -> String
     rowVal  : Row -> String
     celVal  : Cel -> String
}
instance i_UDM = literal : UDM {
  generators
     t1 t2 : Tbl
     o1 o2 : Col
     r1 r2 r3 r4 r5 r6 : Row
     e1 e2 e3 e4 : Cel
  equations
     o1.colTab=t2 o2.colTab=t2
     r1.rowTab=t1 r2.rowTab=t1 r3.rowTab=t1 r4.rowTab=t1 r5.rowTab=t2 r6.rowTab=t2
     e1.celCol=o1 e2.celCol=o2 e3.celCol=o1 e4.celCol=o2
     e1.celRow=r5 e2.celRow=r5 e3.celRow=r6 e4.celRow=r6
     t1.tblName=Value t2.tblName=Entity
     o1.colName=BodyWt o2.colName=HeartRt
     r1.rowVal="190_lbs" r2.rowVal="60_bpm" r3.rowVal="200_lbs" /* r4.rowVal=PeterV2UnkHR skolem? */
               r5.rowVal=Peter_v1 r6.rowVal=Peter_v2
     e1.celVal="190_lbs" e2.celVal="60_bpm" e3.celVal="200_lbs" /* e4.celVal=PeterV2UnkHR skolem? */
}
/* Instance graph typed by schema/dictionary entities (GRFS)
 * Here we introduce a generic data model that combines and extends
 * all of the features of the obove three generic (schema-less)
 * models.
 * 
 * The model consists of two copies of the parallel arrow graph
 * pattern connect by a pair of foreign keys, one connecting
 * instance nodes to schema nodes and one connecting instance
 * arrows to schema columns (foreign keys).
 */
schema GRFS = literal : Ty {
  entities
     I_1 I_0 C_1 C_0
  foreign_keys
     src_i    : I_1 -> I_0
     tgt_i    : I_1 -> I_0
     ndType   : I_0 -> C_0
     arType   : I_1 -> C_1
     src_c    : C_1 -> C_0
     tgt_c    : C_1 -> C_0
  path_equations
     tgt_i.ndType = arType.tgt_c
     src_i.ndType = arType.src_c
  attributes
     tblLbl   : C_0 -> String
     colLbl   : C_1 -> String
     nodeVal  : I_0 -> String
}
instance i_GRFS = literal : GRFS {
  generators
     i11 i12 i13 : I_1
     i01 i02 i03 i04 i05 : I_0
     c01 c02 : C_0
     c11 c12 : C_1
  equations
     i11.src_i=i04 i12.src_i=i04 i13.src_i=i05
     i11.tgt_i=i01 i12.tgt_i=i02 i13.tgt_i=i03
     i01.ndType=c01 i02.ndType=c01 i03.ndType=c01 // Instance nodes of type value.
     i04.ndType=c02 i05.ndType=c02           // Instance nodes of type entity.
     i11.arType=c11 i12.arType=c12 i13.arType=c11
     c11.src_c=c02 c12.src_c=c02  // Source of BodyWt and HeartRt is Entity.
     c11.tgt_c=c01 c12.tgt_c=c01  // Target of BodyWt and HeartRt is Value.
     c01.tblLbl=Value c02.tblLbl=Entity
     c11.colLbl=BodyWt c12.colLbl=HeartRt
     i01.nodeVal="190_lbs" i02.nodeVal="60_bpm" i03.nodeVal="200_lbs" // instance values
     i04.nodeVal=Peter_v1 i05.nodeVal=Peter_v2                         // instance entities
}

/*
mapping E_GS = literal : EAV -> GRFS {
  entities
     O      -> I_1
     V      -> I_0
     E      -> I_0
     A      -> C_1
  foreign_keys
     target    -> tgt_i
     source    -> src_i
     attr    -> arType
  attributes
     obsVal -> lambda x. nodeVal(x)
     entLbl -> lambda x. nodeVal(x)
     attLbl -> lambda x. colLbl(x)
}

mapping G_GS = literal : GRF -> GRFS {
  entities
     I_1    -> I_1
     I_0    -> I_0
  foreign_keys
     src_i   -> src_i
     tgt_i   -> tgt_i
  attributes
     arLbl   -> lambda x. colLbl(arType(x))
     nodeVal -> lambda x. nodeVal(x)
}

mapping U_GS = literal : UDM -> GRFS {
  entities
     Tbl   -> C_0
     Col   -> C_1
     Row   -> I_0
     Cel   -> I_1
  foreign_keys
     colTab  -> src_c
     rowTab  -> ndType
     celCol  -> arType
     celRow  -> src_i
  attributes
     rowVal  -> lambda x. nodeVal(x)
     celVal  -> lambda x. nodeVal(tgt_i(x))
     tblName -> lambda x. tblLbl(x)
     colName -> lambda x. colLbl(x)
}
*/

