typeside Ty = literal { 
	java_types
		String = "java.lang.String"
	java_constants
		String = "return input[0]"
}

/* Graph schema declaration.
 *  A directed graph can be completely described with a pair of sets and
 *  two functions. The first set is a set of Arrows and the second a set
 *  of Nodes. The two functions map Arrows to Nodes and tell you the node
 *  where an arrow begins (source) and the node where the arrow ends
 *  (target). This defines the schema below.
 *  
 *  What this means is that any directed graph is an instance of the schema
 *  below and any instance of the schema below is a directed graph.
 */
schema GRF = literal : Ty {
	entities
	  Arrow Node
	foreign_keys
	  source: Arrow -> Node // Source node for an arrow
	  target: Arrow -> Node // Target node for an arrow
	attributes
	  rowArLbl: Arrow -> String  // Arrow label
	  rowNdLbl: Node -> String   // Node label
	  srcPtsTo: Arrow -> String // Denormalize the source node label onto the arrow
	  tgtPtsTo: Arrow -> String // Denormalize the target node label onto the arrow
	observation_equations
	  // Copy the source and target node labels to the Arrow entity.
	  forall a. a.srcPtsTo = a.source.rowNdLbl
	  forall a. a.tgtPtsTo = a.target.rowNdLbl
}
instance i_GRF = literal : GRF {
	generators
	  a1 a2 a3 a4 a5 a6 a7 : Arrow
	  n1 n2 n3 : Node
	multi_equations
	  // source: Arrow -> Node // First of a pair of parallel foreign keys
	  source -> {a1 n1, a2 n1, a3 n2, a4 n2, a5 n3, a6 n3, a7 n3}
	  // gp: Srcp -> Tgtp // Second of a pair of parallel foreign keys
	  target -> {a1 n1, a2 n2, a3 n2, a4 n1, a5 n3, a6 n2, a7 n3}
	  // rowSpLbl: Srcp -> String // Representitive Source attribute
	  rowArLbl -> {a1 arrow_a1, a2 arrow_a2, a3 arrow_s3, a4 arrow_s4, a5 arrow_s5, a6 arrow_s6, a7 arrow_s7}
	  // rowTpLbl: Tgtp -> String // Representitive Target attribute
	  rowNdLbl -> {n1 node_n1, n2 node_n2, n3 node_n3}
}
/* Span schema declaration.
// Schema representing an entity that references two entities. This is called
// a span in category theory and an intersection table in database jargon.
// A state of a span is generally a relation between the two referenced entities.
// In database practice spans are typically used to implement many to many
// relationships. More generally instances on spans are 'bag' relations -
// these relations need not be many to many (e.g., could be many to one, one to
// many, one to one, etc)
//
// For further reading about spans see section 3.2.2 Spans, experiments and 
// matrices of CT4S.
//
// The xPntsTo family of attributes are used to illustrate how one can make use
// of paths to move an attribute that can be accessed through a path to an entity
// that is the source of that path. They also serve to illustrate how schema and
// instance interact to include built in providence features. Their intended use
// is illustrated in the assignment statements in instances i_Span and i_Square. 
*/
schema Span = literal : Ty {
	entities
	  As Bs Cs
	foreign_keys
	  fs : Cs -> As // Foreign key to As
	  gs : Cs -> Bs // Foreign key to Bs
	attributes
	  rowAsLbl: As -> String // Representitive As attribute
	  rowBsLbl: Bs -> String // Representitive Bs attribute
	  rowCsLbl: Cs -> String // Representitive Cs attribute
	  fsPntsTo: Cs -> String // Move rowAsLbl to Cs by following fs.rowAsLbl
	  gsPntsTo: Cs -> String // Move rowBsLbl to Cs by following gs.rowBsLbl
	observation_equations
	  // Copy all of the attributes up to Cs referenced through foreign keys
	  forall c. c.fsPntsTo = c.fs.rowAsLbl
	  forall c. c.gsPntsTo = c.gs.rowBsLbl
}
query qGRFSpan = literal : GRF -> Span {
   entities /*source entities: Srcp Tgtp*/
	As -> {
	  from
	    na:Node
	  //where
	  return
	    rowAsLbl /*:String*/ -> na.rowNdLbl}
	Bs -> {
	  from
	    nb:Node
	  //where
	  return
	    rowBsLbl /*:String*/ -> nb.rowNdLbl}
	Cs -> {
	  from
	    s:Arrow
	  //where
	  return
	    fsPntsTo /*:String*/ -> s.srcPtsTo
	    gsPntsTo /*:String*/ -> s.tgtPtsTo
	    rowCsLbl /*:String*/ -> s.rowArLbl}

	foreign_keys
		fs /*:Cs->As*/ -> {na -> source(s)}
		gs /*:Cs->Bs*/ -> {nb -> target(s)}
}


/* The main event
 * 
 */

/* Entity Attribute Value model (EAV)
 *  
 * This model is structurally related to a the Span schema.
 * In this case there are three foreign keys radiating from
 * a central entity rather than two. For this reason EVA is
 * what category theorists would call a wide span.
 * 
 * The EAV model has been a popular strategy to provide for
 * attribute volatility in relational databases. The idea is
 * to create a model that alows new entities and attributes be
 * added at run time through the transaction engine associated
 * with the database. This means that a database schema change
 * (add new tables and new columns) can be handled as part of
 * an insert statement. 
 * 
 * This model can be considered the first example of a schema-
 * less strategy. In our world we can see that this is not a
 * model without a schema, rather a model with a generic schema.
 * In fact, those familiar with the data dictionary of a relational
 * database will recognize the similarity between the "Tables"
 * and "Columns" data dictionary tables and the Entity and Attribute
 * Entities in the EAV model. As we shall see there are multiple
 * such strategies and they can be related through the use of
 * structure preserving maps.
 */
schema EAV = literal : Ty {
  entities
     Observation
     Entity
     Attribute
     Value
  foreign_keys
     source : Observation -> Entity	// Observation source entity 
     attr   : Observation -> Attribute	// Observation attribute name
     target : Observation -> Value		// Observation value entity
  attributes
     attLbl : Attribute -> String	// Attribute label
     entLbl : Entity -> String	// Entity label
     obsVal : Value -> String		// Observation value as string
}
instance i_EAV = literal : EAV {
  generators
     a1 a2 : Attribute
     e1 e2 : Entity
     o1 o2 o3 : Observation
     v1 v2 v3 : Value
/*  equations // verbose equational syntax
     // source : Observation -> Entity // Observation source entity
     o1.source=e1 o2.source=e1 o3.source=e2
     // attr   : Observation -> Attribute // Observation attribute name
     o1.attr=a1 o2.attr=a2 o3.attr=a1
     // target : Observation -> Value // Observation value entity
     o1.target=v1 o2.target=v2 o3.target=v3
     // attLbl : Attribute -> String // Attribute label
     a1.attLbl=BodyWt a2.attLbl=HeartRt
     // entLbl : Entity -> String // String label for an entity
     e1.entLbl=Peter_v1 e2.entLbl=Peter_v2
     // obsVal : Value -> String // Observation value as string
     v1.obsVal="190_lbs" v2.obsVal="60_bpm" v3.obsVal="200_lbs" */
  multi_equations // consise alternative systax
   // source : Observation -> Entity // Observation source entity
   source -> {o1 e1, o2 e1, o3 e2}
   // attr   : Observation -> Attribute // Observation attribute name
   attr -> {o1 a1, o2 a2, o3 a1}
   // target : Observation -> Value // Observation value entity
   target -> {o1 v1, o2 v2, o3 v3}
   // attLbl : Attribute -> String // Attribute label
   attLbl -> {a1 BodyWt, a2 HeartRt}
   // entLbl : Entity -> String // String label for an entity
   entLbl -> {e1 Peter_v1, e2 Peter_v2}
   // obsVal : Value -> String // Observation value as string
   obsVal -> {v1 "190_lbs", v2 "60_bpm", v3 "200_lbs"}
}
instance i_GRF2 = literal : GRF {
  generators
     a1 a2 a3 : Arrow
     n1 n2 n3 n4 n5 : Node
  multi_equations
     source -> {a1 n4, a2 n4, a3 n5}
     target -> {a1 n1, a2 n2, a3 n3}
     rowNdLbl -> {n1 "190_lbs", n2 "60_bpm", n3 "200_lbs"}
     rowNdLbl -> {n4 Peter_v1, n5 Peter_v2}
     rowArLbl -> {a1 BodyWt, a2 HeartRt, a3 BodyWt}
}
/* Query mapping EAV to GRF
 * This query illustrates a structure presurving map from EAV to
 * GRF. */
query qEAVSpan = literal : EAV -> Span {
entities /*source entities: Attribute Entity Observation Value*/
   As -> {
	from
	  e:Entity
	return
	  rowAsLbl /*:String*/ -> e.entLbl}
   Bs -> {
   	from
	  v:Value
	return
	  rowBsLbl /*:String*/ -> v.obsVal}
   Cs -> {
   	from
	  o:Observation
	return
	  fsPntsTo /*:String*/ -> o.source.entLbl
	  gsPntsTo /*:String*/ -> o.target.obsVal
	  rowCsLbl /*:String*/ -> o.attr.attLbl}

   foreign_keys
	fs /*:Cs->As*/ -> {e -> o.source}
	gs /*:Cs->Bs*/ -> {v -> o.target}
}
instance i_EAVSpan = eval qEAVSpan i_EAV
instance i_EAVGRF = coeval qGRFSpan i_EAVSpan
/* Instance graph typed by schema/dictionary entities (GRFS)
 * Here we introduce a generic data model that combines and extends
 * all of the features of the obove two generic (schema-less)
 * models.
 * 
 * The model consists of two copies of the parallel arrow graph
 * pattern connect by a pair of foreign keys, one connecting
 * instance nodes to schema nodes and one connecting instance
 * arrows to schema columns (foreign keys).
 */
schema GRFS = literal : Ty {
  entities
     I_1 I_0 C_1 C_0
  foreign_keys
     src_i    : I_1 -> I_0
     tgt_i    : I_1 -> I_0
     ndType   : I_0 -> C_0
     arType   : I_1 -> C_1
     src_c    : C_1 -> C_0
     tgt_c    : C_1 -> C_0
  path_equations
     tgt_i.ndType = arType.tgt_c
     src_i.ndType = arType.src_c
  attributes
     tblLbl   : C_0 -> String
     colLbl   : C_1 -> String
     nodeVal  : I_0 -> String
}
instance i_GRFS = literal : GRFS {
  generators
     i11 i12 i13 : I_1
     i01 i02 i03 i04 i05 : I_0
     c01 c02 : C_0
     c11 c12 : C_1
  equations
     i11.src_i=i04 i12.src_i=i04 i13.src_i=i05
     i11.tgt_i=i01 i12.tgt_i=i02 i13.tgt_i=i03
     i01.ndType=c01 i02.ndType=c01 i03.ndType=c01 // Instance nodes of type value.
     i04.ndType=c02 i05.ndType=c02           // Instance nodes of type entity.
     i11.arType=c11 i12.arType=c12 i13.arType=c11
     c11.src_c=c02 c12.src_c=c02  // Source of BodyWt and HeartRt is Entity.
     c11.tgt_c=c01 c12.tgt_c=c01  // Target of BodyWt and HeartRt is Value.
     c01.tblLbl=Value c02.tblLbl=Entity
     c11.colLbl=BodyWt c12.colLbl=HeartRt
     i01.nodeVal="190_lbs" i02.nodeVal="60_bpm" i03.nodeVal="200_lbs" // instance values
     i04.nodeVal=Peter_v1 i05.nodeVal=Peter_v2                         // instance entities
}
// GRFS unfolded using pullbacks.
schema UFLD = literal : Ty {
  entities
    I_1 // Instance arrow 
    I_0 // Instance node
    C_1 // Entity column
    C_0 // Entity
    One // Terminal object
    E_sa // Columns of a source entity. Pullback src_c: C_1 -> C_0 <- One :s_ent   -> Attribute
    E_sr // Rows of a source entity.   Pullback ndType: I_0 -> C_0 <- One :s_ent   -> Entity 
    E_sc // Cells of a source entity. Pullbacks   esa: E_sa -> One <- E_sr :esr    -> Observation
         //                                    s_enta: E_sa -> C_1 <- I_1 :arType
         //                                      src_i: I_1 -> I_0 <- E_sr :s_entn
    E_ta // Columns of a target entity. Pullback tgt_c: C_1 -> C_0 <- One :t_ent
    E_tr // Rows of a target entity.   Pullback ndType: I_0 -> C_0 <- One :t_ent   -> Value
    E_tc // Cells of a target entity. Pullbacks   eta: E_ta -> One <- E_tr :etr
         //                                    s_enta: E_sa -> C_1 <- I_1 :arType
         //                                      tgt_i: I_1 -> I_0 <- E_sr :t_entn

  foreign_keys
    src_i   : I_1 -> I_0  // Source node for an instance arrow
    tgt_i   : I_1 -> I_0  // Target node for an instance arrow
    arType  : I_1 -> C_1  // Typeing an instance arrow to a table column
    src_c   : C_1 -> C_0  // Source table for a column
    tgt_c   : C_1 -> C_0  // Target table for a column
    ndType  : I_0 -> C_0  // Typing an instance node to a table
    s_ent   : One -> C_0  // Picking a particular source table (entity) for consideration
    t_ent   : One -> C_0  // Picking a particular target table (entity) for consideration
    s_enta  : E_sa -> C_1  // Inclustion of columns of the source entity into the dictionary of all columns.
    esa     : E_sa -> One  // Arrows of the source entity mapped to one
    s_entn  : E_sr -> I_0  // Inclusion of rows of the source entity into the set of instance nodes.
    esr     : E_sr -> One  // Rows of the source entity mapped to one.
    s_entc_I_1: E_sc -> I_1  // Inclusion of cells of the source entity into the set of instance arrows.
    s_entc_I_0: E_sc -> E_sr  // Cells of the source entity mapped to their rows.
    s_entc_C_1: E_sc -> E_sa  // Cells of the source entity mapped to their columns (attributes)
    t_enta  : E_ta -> C_1  // Inclustion of columns of the target entity into the dictionary of all columns.
    eta     : E_ta -> One  // Arrows of the target entity mapped to one
    t_entn  : E_tr -> I_0  // Inclusion of rows of the target entity into the set of instance nodes.
    etr     : E_tr -> One  // Rows of the target entity mapped to one.
    t_entc_I_1: E_tc -> I_1  // Inclusion of cells of the target entity into the set of instance arrows.
    t_entc_I_0: E_tc -> E_tr  // Cells of the target entity mapped to their rows.
    t_entc_C_1: E_tc -> E_ta  // Cells of the target entity mapped to thier columns (attributes)
    sc_tr   : E_sc -> E_tr // Cells of the source entity mapped to the rows of the target entity   

  path_equations
    tgt_i.ndType = arType.tgt_c
    src_i.ndType = arType.src_c
    s_enta.src_c = esa.s_ent
    s_entn.ndType = esr.s_ent
    s_entc_I_1.arType = s_entc_C_1.s_enta
    s_entc_I_1.src_i = s_entc_I_0.s_entn
    s_entc_C_1.esa = s_entc_I_0.esr
    t_entc_I_1.arType = t_entc_C_1.t_enta
    t_entc_I_1.src_i = t_entc_I_0.t_entn
    t_entc_C_1.eta = t_entc_I_0.etr
    sc_tr.t_entn = s_entc_I_1.tgt_i
      
  attributes
    tblLbl  : C_0 -> String // Label for a table
    colLbl  : C_1 -> String // label for a column
    nodeVal : I_0 -> String // Value associated with a node of the instance graph
}
instance i_UFLDs = literal : UFLD {
	generators
		c01 c02 : C_0
		c11 c12 : C_1
		i01 i02 i03 i04 i05 : I_0
		i11 i12 i13 : I_1
		o1 : One
	multi_equations
		arType  -> {i11 c11, i12 c12, i13 c11}
		ndType  -> {i01 c01, i02 c01, i03 c01, i04 c02, i05 c02}
		src_c  -> {c11 c02, c12 c02}
		src_i  -> {i11 i04, i12 i04, i13 i05}
		tgt_c  -> {c11 c01, c12 c01}
		tgt_i  -> {i11 i01, i12 i02, i13 i03}
		s_ent  -> {o1 c02}  // We are picking c02 as the source entity we wish to pivot. In EAV this is the entity labeled Entity.
		t_ent  -> {o1 c01}	// We are picking c01 as the target entity we wish to pivot. In EAV this is the entity labeled Value.
		colLbl  -> {c11 BodyWt, c12 HeartRt}
		nodeVal  -> {i01 "190_lbs", i02 "60_bpm", i03 "200_lbs", i04 Peter_v1, i05 Peter_v2}
		tblLbl  -> {c01 Value, c02 Entity}
}
query qUFLD = literal : UFLD -> UFLD {
entities
   I_1 -> {
   // Instance arrow 
     // The source entity(ies) from which the target is constructed
   	from
   	  i1:I_1
   } 
   I_0 -> {
   // Instance node
   	from
   	  i0:I_0
   	return
       // Assignment of attributes associated with the target entity from attributes
       // in the source.
       // nodeVal : I_0 -> string; Value associated with a node of the instance graph
   	  nodeVal -> nodeVal(i0)}
   C_1 -> {
   // Entity column
   	from
   	  c1:C_1
   	return
       // colLbl  : C_1 -> string, label for a column
   	  colLbl -> colLbl(c1)}
   C_0 -> {
   // Entity
   	from
   	  c0:C_0
   	return
       // tblLbl  : C_0 -> string, Label for a table
   	  tblLbl -> tblLbl(c0)}
   // Terminal object
   One -> {
   	from
   	  o:One}
   E_sa -> {
   // Columns of a source entity. Pullback src_c: C_1 -> C_0 <- One :s_ent
   // Get the inverse image of the chosen source entity (One -> C_0). All such elements
   // of the inverse image are columns (attributes) of the chosen source entity. 
   	from
   	  sao:One
   	  sac1:C_1
   	where
       //forall sa. sa.s_enta.src_c = sa.esa.s_ent
   	  src_c(sac1) = s_ent(sao)}
   E_sr -> {
   // Rows of a source entity.   Pullback ndType: I_0 -> C_0 <- One :s_ent
   	from
   	  sro : One
   	  sri0 : I_0
   	where
       //forall sr. sr.sentn.ndType = sr.esr.s_ent
   	  ndType(sri0) = s_ent(sro)}
   E_sc -> {
   // Cells of a source entity.
   //  Pullbacks   esa: E_sa -> One <- E_sr :esr
   //           s_enta: E_sa -> C_1 <- I_1 :arType
   //             src_i: I_1 -> I_0 <- E_sr :s_entn
     // How one assembles E_sc on the target side is involved, but with a little thought,
     // completely obvious :). E_sc is simultaniously the pullback for three diagrams.
     // Duplicating the comments in the schema definition we have:
     // 
     //  E_sc contains cells of a source entity. Pullbacks
     //
     //    esa: E_sa -> One <- E_sr :esr
     // s_enta: E_sa -> C_1 <- I_1 :arType
     //   src_i: I_1 -> I_0 <- E_sr :s_entn
     //
     // E_sa and E_sr inturn are pullbacks again duplicating the comments in the schema
     // definition we have:
     //
     // E_sa contains columns of a source entity. Pullback
     //
     //  src_c: C_1 -> C_0 <- One :s_ent
     //
     // and E_sr contains rows of a source entity. Pullback
     //
     //  ndType: I_0 -> C_0 <- One :s_ent
     //
     // and E_tr contains rows of a target entity. Pullback
     //
     // ndType: I_0 -> C_0 <- One :t_ent
     //
     // In order to construct E_sc you must first construct E_sr from I_0 and One and
     // E_sa from C_1 and One. Having done so we must have I_1 to satisfy the three
     // pullbacks for E_sc. This means we need representitive generators ...
   	from
   	  sci1 : I_1
   	  sco : One  //
   	  sci0 : I_0 //
   	  scc1 : C_1
   	  sctri0 : I_0
   	  sctro : One
   	where
      src_c(scc1) = s_ent(sco)     //   src_c: C_1 -> C_0 <- One :s_ent
   	  ndType(sci0) = s_ent(sco)    //  ndType: I_0 -> C_0 <- One :s_ent
      arType(sci1) = scc1          //  arType: I_1 -> C_1
   	  src_i(sci1) = sci0           //   src_i: I_1 -> I_0
	  ndType(sctri0) = t_ent(sctro)//  ndType: I_0 -> C_0 <- One :t_ent
   	  tgt_i(sci1) = sctri0}        //   tgt_i: I_1 -> I_0
   E_ta -> {
   // Columns of a target entity. Pullback tgt_c: C_1 -> C_0 <- One :t_ent
   	from
   	  tao:One
   	  tac1:C_1
   	where
       //forall ta. ta.t_enta.src_c = ta.eta.t_ent,
   	  src_c(tac1) = t_ent(tao)}
   E_tr -> {
   // Rows of a target entity.   Pullback ndType: I_0 -> C_0 <- One :t_ent
   	from
   	  tro : One
   	  tri0 : I_0
   	where
       //forall tr. tr.t_entn.ndType = tr.etr.t_ent,
   	  ndType(tri0) = t_ent(tro)}
   E_tc -> {
   // Cells of a target entity.
   //  Pullbacks   eta: E_ta -> One <- E_tr :etr
   //           s_enta: E_sa -> C_1 <- I_1 :arType
   //             tgt_i: I_1 -> I_0 <- E_sr :t_entn
   	from
   	  tci1 : I_1
   	  tco : One
   	  tci0 : I_0
   	  tcc1 : C_1
   	where
      src_c(tcc1) = t_ent(tco)
   	  ndType(tci0) = t_ent(tco)
      arType(tci1) = tcc1
   	  src_i(tci1) = tci0}

   foreign_keys
   	  // As a practice for keeping track of what you need to build I have
   	  // found that it is convenient to copy the keys from the target schema
   	  // that must be assembled. These keys are all keys that originate from
   	  // the target entity being constructed.
       //
       // The uber flower must assign each of the foriegn keys of the source
       // to a path in the target.
       // For example:
   	  // Assign the src_i value in the target instance to i0 in the source
   	  // instance that is returned by src_i evaluated at i1 in the source
   	  // instance. This i0 is the working generator in the I_0q query block.
   	  // Note above: src_i is a foriegn key from I_1 to I_0.
   	  // Similarly for tgt_i and arType. 
   	  // Below are the three I_1 foriegn keys from the schema definition:
       // src_i   : I_1 -> I_0,  Source node for an instance arrow
   	  src_i  -> {i0 -> src_i(i1)}
       // tgt_i   : I_1 -> I_0,  Target node for an instance arrow
   	  tgt_i  -> {i0 -> tgt_i(i1)}
       // arType  : I_1 -> C_1,  Typeing an instance arrow to a table column
   	  arType -> {c1 -> arType(i1)}
       // ndType  : I_0 -> C_0,  Typing an instance node to a table
   	  ndType -> {c0 -> ndType(i0)}
       // src_c   : C_1 -> C_0,  Source table for a column
   	  src_c -> {c0 -> c1.src_c}
       // tgt_c   : C_1 -> C_0,  Target table for a column
   	  tgt_c -> {c0 -> c1.tgt_c}
       // s_ent   : One -> C_0,  Picking a particular source table (entity) for consideration
   	  s_ent -> {c0 -> o.s_ent}
       // t_ent   : One -> C_0,  Picking a particular target table (entity) for consideration
   	  t_ent -> {c0 -> o.t_ent}
       // s_enta  : E_sa -> C_1,  Attributges of the selected entitiy (selected entity attribute)
   	  s_enta -> {c1 -> sac1}
       // esa     : E_sa -> One,  All arrows of the selected entity mapped to one
   	  esa -> {o -> sao}
       // s_entn  : E_sr -> I_0,  Rows of the selected entity (selected entity node)
   	  s_entn -> {i0 -> sri0}
       // esr     : E_sr -> One,  Rows of the selected entity mapped to one
   	  esr -> {o -> sro}
       // s_entc_I_1 : E_sc -> I_1,  Cells of the selected entity mapped to their instance arrows
   	  s_entc_I_1 -> {i1 -> sci1}
   	   // At this point things get more difficult. We are constructing a foreign key between a pair of
   	   // entities both of which are constructed as part of the query. This means there is a direct map
   	   // between the generators of the source entity to the target entity.
       // s_entc_I_0 : E_sc -> E_sr,  Cells of the selected entity mapped to their rows
       // To assign the value of a foreign key we need to get a generator for E_sr --the pair (sro, sri0)--
       // and associate it with a generator for E_sc. Both of these entities are constructed as part
       // of this query so we must make the assignments directly.
       // Note: E_sr is constructed from the pullback ndType: I_0 -> C_0 <- One :s_ent and so its generator
       // is the pair (sro, sri0) subject to the constraint ndType(sri0) = s_ent(sro)
       // We need to match this up with the corresponding pair in the zoo of generators for E_sc, specifically:
       //    	  ndType(sci0) = s_ent(sco)    //  ndType: I_0 -> C_0 <- One :s_ent
   	  s_entc_I_0 -> {sro -> sco sri0 -> sci0}
       // s_entc_C_1 : E_sc -> E_sa;  Cells of the selected entity mapped to their columns (attributes)
       // sao, sco are representatives of One in E_sa and E_sc blocks respectively
       // similarly sac1 and scc1 are representatives of C_1 in E_sa and E_sc 
 	  s_entc_C_1 -> {sao -> sco sac1 -> scc1} 
       // t_enta   : E_ta -> C_1,  Attributes of the selected entity (selected entity attribute)
   	  t_enta -> {c1 -> tac1}
       // eta     : E_ta -> One,  All arrows of the selected entity mapped to one
   	  eta -> {o -> tao}
       // t_entn  : E_tr -> I_0,  Rows of the selected entity (selected entity node)
   	  t_entn -> {i0 -> tri0}
       // etr     : E_tr -> One,  Rows of the selected entity mapped to one
   	  etr -> {o -> tro}
       // t_entc_I_1: E_tc -> I_1  // Inclusion of cells of the target entity into the set of instance arrows.
   	  t_entc_I_1 -> {i1 -> tci1}
       // t_entc_I_0: E_tc -> E_tr  // Cells of the target entity mapped to their rows.
   	  t_entc_I_0 -> {tro -> tco tri0 -> tci0}
       // t_entc_C_1: E_tc -> E_ta  // Cells of the target entity mapped to thier columns (attributes)
   	  t_entc_C_1 -> {tao -> tco tac1 -> tcc1}
       // sc_tr   : E_sc -> E_tr // Cells of the source entity mapped to the rows of the target entity
       sc_tr -> {tro -> sctro tri0 -> sctri0}
}
instance i_UFLDt = eval qUFLD i_UFLDs
// Delta EAV out of UFLD
query qPickEAVfromUFLD = literal : UFLD -> EAV {
   entities
	Attribute -> {
	  from
	    sa:E_sa
	  return
	    attLbl -> sa.s_enta.colLbl}
	Entity -> {
	  from
	    sr:E_sr
	  return
	    entLbl -> sr.s_entn.nodeVal}
	Observation -> {
	  from
	    sc:E_sc}
	Value -> {
	  from
	    tr:E_tr
	  return
	    obsVal -> tr.t_entn.nodeVal}

   foreign_keys
	attr -> {sa -> sc.s_entc_C_1}
	source -> {sr -> sc.s_entc_I_0}
	target -> {tr -> sc.sc_tr}
}
instance i_PickEAVfromUFLD = eval qPickEAVfromUFLD i_UFLDt

// Compose qUFLD with qPickEAVfromUFLD
query qUFLDtoEAV = literal : UFLD -> EAV {
   entities
	Attribute -> {
/*
   // Columns of a source entity. Pullback src_c: C_1 -> C_0 <- One :s_ent
   // Get the inverse image of the chosen source entity (One -> C_0). All such elements
   // of the inverse image are columns (attributes) of the chosen source entity.
   Attribute is populated from E_sa which is in turn constructed from the above pullback
	   E_sa -> {
   		from
   		  sao:One
   		  sac1:C_1
   		where
          //forall sa. sa.s_enta.src_c = sa.esa.s_ent
   	  	  src_c(sac1) = s_ent(sao)}*/
	  from
   	    sao:One   // the one record in One that is used to pick the desired source attribute from C_1
   	    sac1:C_1  // source attribute 
   	  where
        //forall sa. sa.s_enta.src_c = sa.esa.s_ent
    	// src_c   : C_1 -> C_0  Source table for a column
        // s_ent   : One -> C_0  Picking a particular source table (entity) for consideration
        // Note: sao represents the single row in One. The foreign key s_ent picks a record in
        // in C_0 which is the dictionary table containing entities. This means we are identifying
        // a particular entity as the source entity we are interested in. The equation below ensures
        // that all of the attributes (rows of C_1) associated with that entity are populated into
        // Attribute. That is all of the attributes associated with the particular source entity we
        // are interested in. 
   	    src_c(sac1) = s_ent(sao)
	  return
	    attLbl -> sac1.colLbl}
	Entity -> {
/*
 * This construction is analogous to the one above except we are identfying all of the rows associated
 * with the source entity we are interested.
   // Rows of a source entity.   Pullback ndType: I_0 -> C_0 <- One :s_ent
	   E_sr -> {
	   	from
	   	  sro : One
	   	  sri0 : I_0
	   	where
	      //forall sr. sr.sentn.ndType = sr.esr.s_ent
	   	  ndType(sri0) = s_ent(sro)}*/
	  from
	   	sro : One
	   	sri0 : I_0
   	  where
        //forall sr. sr.sentn.ndType = sr.esr.s_ent
   	    ndType(sri0) = s_ent(sro)
	  return
	    entLbl -> sri0.nodeVal}
	Observation -> {
/* This is the hard one!!!
 * Observation is construction from E_sc, which is in turn constructed from E_sa and E_sr
     // How one assembles E_sc on the target side is involved, but with a little thought,
     // completely obvious :). E_sc is simultaniously the pullback for three diagrams.
     // Duplicating the comments in the schema definition we have:
     // 
     //  E_sc contains cells of a source entity. Pullbacks
     //
     //    esa: E_sa -> One <- E_sr :esr
     // s_enta: E_sa -> C_1 <- I_1 :arType
     //   src_i: I_1 -> I_0 <- E_sr :s_entn
     //
     // E_sa and E_sr inturn are pullbacks again duplicating the comments in the schema
     // definition we have:
     //
     // E_sa contains columns of a source entity. Pullback
     //
     //  src_c: C_1 -> C_0 <- One :s_ent
     //
     // and E_sr contains rows of a source entity. Pullback
     //
     //  ndType: I_0 -> C_0 <- One :s_ent
     //
     // and E_tr contains rows of a target entity. Pullback
     //
     // ndType: I_0 -> C_0 <- One :t_ent
     //
     // In order to construct E_sc you must first construct E_sr from I_0 and One and
     // E_sa from C_1 and One. Having done so we must have I_1 to satisfy the three
     // pullbacks for E_sc. This means we need representitive generators ...
   	from
   	  sci1 : I_1
   	  sco : One
   	  sci0 : I_0
   	  scc1 : C_1
   	  sctri0 : I_0
   	  sctro : One
   	where
      src_c(scc1) = s_ent(sco)     //   src_c: C_1 -> C_0 <- One :s_ent
   	  ndType(sci0) = s_ent(sco)    //  ndType: I_0 -> C_0 <- One :s_ent
      arType(sci1) = scc1          //  arType: I_1 -> C_1
   	  src_i(sci1) = sci0           //   src_i: I_1 -> I_0
	  ndType(sctri0) = t_ent(sctro)//  ndType: I_0 -> C_0 <- One :t_ent
   	  tgt_i(sci1) = sctri0}        //   tgt_i: I_1 -> I_0 */
	  from
   	    sci1 : I_1
   	    sco : One
   	    sci0 : I_0
   	    scc1 : C_1
   	    sctri0 : I_0
   	    sctro : One
   	  where
        src_c(scc1) = s_ent(sco)     //   src_c: C_1 -> C_0 <- One :s_ent
   	    ndType(sci0) = s_ent(sco)    //  ndType: I_0 -> C_0 <- One :s_ent
        arType(sci1) = scc1          //  arType: I_1 -> C_1
   	    src_i(sci1) = sci0           //   src_i: I_1 -> I_0
	    ndType(sctri0) = t_ent(sctro)//  ndType: I_0 -> C_0 <- One :t_ent
   	    tgt_i(sci1) = sctri0}        //   tgt_i: I_1 -> I_0
	Value -> {
/*   	from
	   	  tro : One
	   	  tri0 : I_0
	   	where
	       //forall tr. tr.t_entn.ndType = tr.etr.t_ent,
	   	  ndType(tri0) = t_ent(tro)} */
	  from
	   	tro : One
	   	tri0 : I_0
   	  where
        //forall tr. tr.t_entn.ndType = tr.etr.t_ent,
   	    ndType(tri0) = t_ent(tro)	   	
	  return
	    obsVal -> tri0.nodeVal}

   foreign_keys
// s_entc_I_0 : E_sc -> E_sr,  Cells of the selected entity mapped to their rows
// To assign the value of a foreign key we need to get a generator for E_sr --the pair (sro, sri0)--
// and associate it with a generator for E_sc. Both of these entities are constructed as part
// of this query so we must make the assignments directly.
// Note: E_sr is constructed from the pullback ndType: I_0 -> C_0 <- One :s_ent and so its generator
// is the pair (sro, sri0) subject to the constraint ndType(sri0) = s_ent(sro)
// We need to match this up with the corresponding pair in the zoo of generators for E_sc, specifically:
//    	  ndType(sci0) = s_ent(sco)    //  ndType: I_0 -> C_0 <- One :s_ent
//
// From the query above we mapped the source foreign key to s_entc_I_0. We must now compose these two
// constructions.
//	source -> {s_entc_I_0 -> {sro -> sco sri0 -> sci0} followed by source -> {sr -> sc.s_entc_I_0}}
	source -> {sro -> sco sri0 -> sci0}

// Using the same pattern we need to implement:
//	target -> {sc_tr -> {tro -> sctro tri0 -> sctri0} followed by target -> {tr -> sc.sc_tr}}
	target -> {tro -> sctro tri0 -> sctri0}

// Again using the above pattern:
//	attr -> {s_entc_C_1 -> {sao -> sco sac1 -> scc1} followed by attr -> {sa -> sc.s_entc_C_1}}
	attr -> {sao -> sco sac1 -> scc1}	
}

instance iUFLDtoEAV = eval qUFLDtoEAV i_UFLDs