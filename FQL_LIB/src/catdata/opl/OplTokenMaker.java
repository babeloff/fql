/* The following code was generated by JFlex 1.4.3 on 6/29/16 12:01 PM */

/*
 * Generated on 6/29/16 12:01 PM
 */
package catdata.opl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class OplTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\70\1\24"+
    "\1\71\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\73\1\72\1\24\1\16\1\44\1\5\1\45\1\5\1\46\1\5"+
    "\1\1\1\51\1\40\3\1\1\53\1\41\1\52\1\47\2\1\1\42"+
    "\1\43\1\50\5\1\1\25\1\10\1\25\1\74\1\2\1\0\1\54"+
    "\1\13\1\64\1\57\1\35\1\32\1\62\1\26\1\33\1\63\1\67"+
    "\1\34\1\65\1\12\1\61\1\30\1\66\1\56\1\31\1\27\1\11"+
    "\1\60\1\37\1\1\1\55\1\1\1\22\1\74\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\24\1\1\6\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\1\1\2\4\1\14\1\15\1\16"+
    "\17\1\1\17\12\1\1\20\11\1\1\21\11\0\2\1"+
    "\1\4\1\22\1\4\16\1\1\20\23\1\11\0\1\1"+
    "\1\4\27\1\2\0\1\23\2\0\1\24\1\0\1\4"+
    "\23\1\5\0\1\4\32\1\1\17\12\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\267\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\267\0\267\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u06e9\0\u0726\0\267\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\267\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\267\0\267\0\267\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\364\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\364"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\267\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\267\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u265d\0\u2c8f\0\u2714\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190"+
    "\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378"+
    "\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560"+
    "\0\u359d\0\u35da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\2\5\1\11\2\4\1\12\1\13\1\14\1\15\2\4"+
    "\1\15\1\5\1\16\1\17\1\20\1\21\1\22\1\5"+
    "\1\23\1\14\1\24\1\25\1\5\1\26\4\5\1\27"+
    "\4\5\1\30\1\5\1\31\1\32\1\5\1\33\1\34"+
    "\1\35\1\5\1\36\1\37\1\40\1\14\1\41\1\4"+
    "\1\42\1\14\7\43\1\44\11\43\1\45\4\43\1\46"+
    "\3\43\1\47\4\43\1\50\35\43\7\51\1\52\16\51"+
    "\1\53\3\51\1\54\4\51\1\55\35\51\76\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\31\5\5\0"+
    "\3\57\2\6\1\57\2\0\4\57\2\0\1\57\7\0"+
    "\10\57\1\0\31\57\6\0\5\5\2\0\1\56\1\5"+
    "\1\60\1\5\12\0\10\5\1\0\31\5\5\0\7\11"+
    "\1\61\1\62\3\11\1\63\60\11\17\0\1\12\75\0"+
    "\1\64\1\65\54\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\66\7\5\1\0\16\5\1\67\1\70\11\5\6\0"+
    "\5\5\2\0\1\56\1\71\2\5\12\0\10\5\1\0"+
    "\15\5\1\72\1\5\1\73\11\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\5\5\1\74\1\5\1\75\1\0"+
    "\15\5\1\76\1\77\3\5\1\100\2\5\1\101\3\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\6\5\1\102"+
    "\1\5\1\0\17\5\1\103\2\5\1\104\6\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\20\5"+
    "\1\105\10\5\6\0\5\5\2\0\1\56\1\5\1\106"+
    "\1\5\12\0\10\5\1\0\20\5\1\107\1\110\5\5"+
    "\1\111\1\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\112\7\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\2\5\1\113\26\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\6\5"+
    "\1\114\22\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\11\5\1\115\17\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\1\5\1\116\1\117\1\120\4\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\7\5\1\121\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\122\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\2\5\1\123\12\0\10\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\7\5\1\124"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\125\13\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\15\5\1\126\4\5"+
    "\1\127\6\5\6\0\5\5\2\0\1\56\1\130\2\5"+
    "\12\0\10\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\131\1\0\31\5\77\0\1\14"+
    "\2\0\7\43\1\0\11\43\1\0\4\43\1\0\3\43"+
    "\1\0\4\43\1\0\35\43\20\0\1\132\103\0\1\133"+
    "\74\0\1\134\3\0\1\135\100\0\1\136\35\0\7\51"+
    "\1\0\16\51\1\0\3\51\1\0\4\51\1\0\35\51"+
    "\27\0\1\137\74\0\1\140\3\0\1\141\100\0\1\142"+
    "\46\0\1\143\63\0\6\57\2\0\4\57\2\0\1\57"+
    "\7\0\10\57\1\0\31\57\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\3\5\1\144\1\5\1\145\2\5\1\0"+
    "\31\5\5\0\10\61\1\146\3\61\1\147\64\61\1\11"+
    "\1\61\1\11\1\0\1\11\1\150\3\11\12\61\1\11"+
    "\2\61\1\11\23\61\1\11\16\61\1\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\151\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\2\5\1\152\5\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\153\13\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\3\5\1\154\4\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\1\5\1\155"+
    "\6\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\156\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\23\5\1\157\5\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\6\5\1\160"+
    "\1\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\161\6\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\26\5\1\162"+
    "\2\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\17\5\1\163\11\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\164\7\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\22\5\1\165"+
    "\6\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\22\5\1\166\6\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\17\5\1\167\11\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\1\5\1\170\6\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\23\5\1\171\5\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\15\5\1\172\13\5"+
    "\6\0\5\5\2\0\1\56\1\173\2\5\12\0\10\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\7\5\1\174\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\3\5\1\175\25\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\12\5"+
    "\1\176\16\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\3\5\1\177\25\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\1\5\1\200\6\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\2\5\1\201"+
    "\5\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\202\6\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\6\5\1\203\1\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\3\5"+
    "\1\204\4\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\1\5\1\205\1\5\12\0\10\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\21\5"+
    "\1\206\7\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\2\5\1\207\5\5\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\20\5\1\210\10\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\7\5\1\211"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\16\5\1\212\12\5\34\0\1\213\75\0"+
    "\1\214\100\0\1\215\77\0\1\216\64\0\1\217\75\0"+
    "\1\220\100\0\1\221\77\0\1\222\40\0\3\223\5\0"+
    "\1\223\16\0\1\223\2\0\1\223\6\0\3\223\5\0"+
    "\1\223\2\0\1\223\4\0\1\223\11\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\15\5\1\76\13\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\22\5\1\224\6\5\5\0\7\61\1\0\70\61\3\225"+
    "\2\61\1\146\2\61\1\225\1\147\15\61\1\225\2\61"+
    "\1\225\6\61\3\225\5\61\1\225\2\61\1\225\4\61"+
    "\1\225\10\61\1\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\22\5\1\211\6\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\226\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\1\5\1\227\1\5\12\0\10\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\230\7\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\204\7\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\3\5\1\231\4\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\26\5\1\232\2\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\233\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\1\234\2\5\12\0\10\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\2\5\1\235\12\0\10\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\5\1\212\6\5\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\157\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\1\236"+
    "\30\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\26\5\1\120\2\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\15\5\1\237\13\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\5\5\1\240\2\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\7\5\1\212\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\6\5\1\105\1\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\15\5"+
    "\1\241\13\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\17\5\1\242\11\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\4\5\1\243\24\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\7\5\1\244\21\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\12\5\1\245\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\17\5\1\246"+
    "\11\5\6\0\5\5\2\0\1\56\3\5\12\0\6\5"+
    "\1\247\1\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\1\250\2\5\12\0\10\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\232\6\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\7\5\1\251\21\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\252\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\15\5\1\253"+
    "\13\5\6\0\5\5\2\0\1\56\3\5\12\0\2\5"+
    "\1\254\5\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\172\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\17\5\1\247"+
    "\11\5\6\0\5\5\2\0\1\56\3\5\12\0\3\5"+
    "\1\120\4\5\1\0\31\5\35\0\1\255\102\0\1\256"+
    "\73\0\1\214\62\0\1\257\101\0\1\260\102\0\1\261"+
    "\73\0\1\220\62\0\1\262\54\0\3\263\5\0\1\263"+
    "\16\0\1\263\2\0\1\263\6\0\3\263\5\0\1\263"+
    "\2\0\1\263\4\0\1\263\11\0\5\5\2\0\1\56"+
    "\1\5\1\105\1\5\12\0\10\5\1\0\31\5\5\0"+
    "\3\61\3\264\2\61\1\146\2\61\1\264\1\147\15\61"+
    "\1\264\2\61\1\264\6\61\3\264\5\61\1\264\2\61"+
    "\1\264\4\61\1\264\10\61\1\0\5\5\2\0\1\56"+
    "\3\5\12\0\3\5\1\105\4\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\3\5\1\265\4\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\22\5\1\266\6\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\267\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\15\5"+
    "\1\105\13\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\25\5\1\270\3\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\17\5\1\271\11\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\22\5\1\272\6\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\273\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\274\1\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\1\5\1\275"+
    "\6\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\276\6\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\120\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\5\5\1\277\23\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\14\5\1\300\14\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\13\5\1\301"+
    "\15\5\6\0\5\5\2\0\1\56\3\5\12\0\5\5"+
    "\1\302\2\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\16\5\1\105\12\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\17\5"+
    "\1\303\11\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\27\5\1\304\1\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\17\5\1\305\11\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\3\5\1\306"+
    "\4\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\307\2\5\1\0\31\5\36\0\1\214"+
    "\4\0\1\256\56\0\1\310\55\0\1\257\1\311\3\257"+
    "\1\311\2\0\3\257\2\0\1\311\1\0\1\257\1\311"+
    "\1\0\3\311\10\257\1\311\31\257\2\311\1\0\1\311"+
    "\32\0\1\220\4\0\1\261\56\0\1\312\55\0\1\262"+
    "\1\313\3\262\1\313\2\0\3\262\2\0\1\313\1\0"+
    "\1\262\1\313\1\0\3\313\10\262\1\313\31\262\2\313"+
    "\1\0\1\313\4\0\3\314\5\0\1\314\16\0\1\314"+
    "\2\0\1\314\6\0\3\314\5\0\1\314\2\0\1\314"+
    "\4\0\1\314\10\0\3\61\3\315\2\61\1\146\2\61"+
    "\1\315\1\147\15\61\1\315\2\61\1\315\6\61\3\315"+
    "\5\61\1\315\2\61\1\315\4\61\1\315\10\61\1\0"+
    "\5\5\2\0\1\56\3\5\12\0\2\5\1\316\1\5"+
    "\1\317\3\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\1\320\2\5\12\0\10\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\1\5\1\321\1\5\12\0\10\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\1\5"+
    "\1\120\6\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\15\5\1\322\13\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\6\5\1\212\1\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\17\5\1\105\11\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\120\1\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\5\5\1\323"+
    "\2\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\324\2\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\2\5\1\325"+
    "\26\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\5\5\1\105\23\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\11\5\1\326\17\5\6\0"+
    "\5\5\2\0\1\56\2\5\1\327\12\0\10\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\1\5\1\120\1\5"+
    "\12\0\10\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\1\330\2\5\12\0\10\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\15\5\1\331"+
    "\13\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\25\5\1\332\3\5\6\0\5\5\2\0\1\56"+
    "\1\5\1\333\1\5\12\0\10\5\1\0\31\5\25\0"+
    "\1\257\74\0\1\262\57\0\3\5\5\0\1\5\16\0"+
    "\1\5\2\0\1\5\6\0\3\5\5\0\1\5\2\0"+
    "\1\5\4\0\1\5\10\0\3\61\3\11\2\61\1\146"+
    "\2\61\1\11\1\147\15\61\1\11\2\61\1\11\6\61"+
    "\3\11\5\61\1\11\2\61\1\11\4\61\1\11\10\61"+
    "\1\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\17\5\1\152\11\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\22\5\1\334\6\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\105\6\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\1\5"+
    "\1\335\6\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\5\1\336\6\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\7\5\1\337\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\22\5\1\340\6\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\6\5\1\341\22\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\4\5"+
    "\1\105\24\5\6\0\5\5\2\0\1\56\1\342\2\5"+
    "\12\0\10\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\15\5\1\343\13\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\1\5\1\344\6\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\17\5\1\345\11\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\23\5\1\105\5\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\17\5\1\346\11\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\15\5\1\347\13\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\105\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\3\5\1\350"+
    "\4\5\1\0\31\5\6\0\5\5\2\0\1\56\1\5"+
    "\1\212\1\5\12\0\10\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\7\5\1\105"+
    "\21\5\6\0\5\5\2\0\1\56\3\5\12\0\1\5"+
    "\1\152\6\5\1\0\31\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\6\5\1\351\1\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\22\5"+
    "\1\352\6\5\6\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\353\2\5\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\26\5\1\105\2\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\1\5\1\354"+
    "\6\5\1\0\31\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\5\5\1\355\23\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\5\5\1\356\2\5\1\0"+
    "\31\5\6\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\17\5\1\226\11\5\6\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\320\5\5\1\0\31\5\6\0"+
    "\5\5\2\0\1\56\3\5\12\0\5\5\1\145\2\5"+
    "\1\0\31\5\6\0\5\5\2\0\1\56\1\5\1\357"+
    "\1\5\12\0\10\5\1\0\31\5\6\0\5\5\2\0"+
    "\1\56\3\5\12\0\1\5\1\360\6\5\1\0\31\5"+
    "\6\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\20\5\1\361\10\5\6\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\171\2\5\1\0\31\5\6\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\5\5\1\362"+
    "\23\5\6\0\5\5\2\0\1\56\3\5\12\0\1\5"+
    "\1\116\6\5\1\0\31\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13847];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\4\1\2\11\26\1\1\11"+
    "\5\1\1\11\3\1\1\0\4\1\3\11\44\1\1\11"+
    "\11\0\3\1\1\11\43\1\11\0\31\1\2\0\1\1"+
    "\2\0\1\1\1\0\24\1\5\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public OplTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OplTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OplTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 18: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 34: break;
        case 16: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 8: 
          { 
          }
        case 39: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 243: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 244: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 245: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
