package catdata.opl;

import catdata.ide.Example;
import catdata.ide.Language;

public class OplJee1 extends Example {
	
	@Override
	public Language lang() {
		return Language.OPL;
	}

	@Override
	public String getName() {
		return "Integration 2";
	}

	@Override
	public String getText() {
		return s;
	}
	
	String s = "Example courtesy of Jee Chung"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Configure OPL options"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\npreamble = pragma {"
			+ "\n	options"
			+ "\n		\"opl_prover_force_prec\" = \"true\", //for success"
			+ "\n		\"opl_prover_sort\" = \"false\", //for speed"
			+ "\n		\"opl_prover_compose\" = \"false\", //for speed"
			+ "\n		\"opl_prover_filter_subsumed\" = \"false\", //for speed"
			+ "\n		\"opl_cache_gui\" = \"true\"; //for speed"
			+ "\n}"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Type Side"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nTy = theory {"
			+ "\n	sorts"
			+ "\n		Integer, String, Double, Boolean, Date;"
			+ "\n	symbols"
			+ "\n		\"1/1/2011\", \"9/1/2013\", \"2/1/2013\" : Date,"
			+ "\n		buy, sell : Boolean,"
			+ "\n		\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", "
			+ "\n		\"200\", \"100\", \"150\", \"550\", \"170\", \"551\", \"160\" : Integer,"
			+ "\n		Tom, Dick, Harry, \"Tom Client\", \"Dick Client\", \"Harry Client\","
			+ "\n		Strat1, Strat2, Strat3, Strat4, Strat5, "
			+ "\n		Strategy1, Strategy2, Strategy3, Strategy4, Strategy5,"
			+ "\n		Port1, Port2, Port3, Portfolio1, Portfolio2, Portfolio3,"
			+ "\n		AU, CH, CN, EU, JP, US,"
			+ "\n		Australia, Switzerland, China, \"European Union\","
			+ "\n		Japan, \"United States of America\","
			+ "\n		USD, EUR, JYP, \"US Dollar\", \"Euro\", \"Japanese Yen\","
			+ "\n		A1, A2, A3, A4, A5, A6, A7, A8, A9, A10,"
			+ "\n		Asset1, Asset2, Asset3, Asset4, Asset5, "
			+ "\n		Asset6, Asset7, Asset8, Asset9, Asset10 : String,"
			+ "\n		\"5.51\", \"5.5\", \"2.5\", \"3.5\", \"1.6\", \"1.5\" : Double;"
			+ "\n	equations;"
			+ "\n}"
			+ "\n"
			+ "\n		"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Input schemas and instances, separately"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nClient = SCHEMA {"
			+ "\n	entities"
			+ "\n		client;"
			+ "\n	edges;"
			+ "\n	attributes"
			+ "\n		client_id : client -> Integer,"
			+ "\n		client_name : client -> String,"
			+ "\n		client_description : client -> String;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;"
			+ "\n} : Ty"
			+ "\n"
			+ "\nClientInstance = INSTANCE {"
			+ "\n     generators "
			+ "\n     	cc1, cc2, cc3 : client;   	"
			+ "\n     equations"
			+ "\n		cc1.client_id = \"1\", cc1.client_name = Tom, cc1.client_description = \"Tom Client\","
			+ "\n		cc2.client_id = \"2\", cc2.client_name = Dick, cc2.client_description = \"Dick Client\","
			+ "\n		cc3.client_id = \"3\", cc3.client_name = Harry, cc3.client_description = \"Harry Client\";"
			+ "\n} : Client"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nPortfolio = SCHEMA {"
			+ "\n	entities"
			+ "\n		strategy, "
			+ "\n		portfolio;"
			+ "\n	edges			"
			+ "\n		portfolio_strategy : portfolio -> strategy;			"
			+ "\n	attributes			"
			+ "\n		strategy_id : strategy -> Integer,"
			+ "\n		strategy_name : strategy -> String,"
			+ "\n		strategy_description : strategy -> String,"
			+ "\n		portfolio_id : portfolio -> Integer,"
			+ "\n		portfolio_name : portfolio -> String,"
			+ "\n		portfolio_description : portfolio -> String,"
			+ "\n		portfolio_client_id : portfolio -> Integer,"
			+ "\n		portfolio_strategy_id : portfolio -> Integer;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities"
			+ "\n		forall p. p.portfolio_strategy.strategy_id = p.portfolio_strategy_id;"
			+ "\n} : Ty"
			+ "\n"
			+ "\nPortfolioInstance = INSTANCE {"
			+ "\n     generators "
			+ "\n     	ps1, ps2, ps3 : strategy,"
			+ "\n     	pp1, pp2, pp3 : portfolio;"
			+ "\n     equations"
			+ "\n		ps1.strategy_id = \"1\", ps1.strategy_name = Strat1, ps1.strategy_description = Strategy1, "
			+ "\n		ps2.strategy_id = \"2\", ps2.strategy_name = Strat2, ps2.strategy_description = Strategy2, "
			+ "\n		ps3.strategy_id = \"3\", ps3.strategy_name = Strat3, ps3.strategy_description = Strategy3, "
			+ "\n		pp1.portfolio_id = \"1\", pp1.portfolio_name = Port1, pp1.portfolio_description = Portfolio1, pp1.portfolio_client_id = \"1\", pp1.portfolio_strategy_id = \"2\", pp1.portfolio_strategy = ps2,"
			+ "\n		pp2.portfolio_id = \"2\", pp2.portfolio_name = Port2, pp2.portfolio_description = Portfolio2, pp2.portfolio_client_id = \"2\", pp2.portfolio_strategy_id = \"2\", pp2.portfolio_strategy = ps2,"
			+ "\n		pp3.portfolio_id = \"3\", pp3.portfolio_name = Port3, pp3.portfolio_description = Portfolio3, pp3.portfolio_client_id = \"2\", pp3.portfolio_strategy_id = \"1\", pp3.portfolio_strategy = ps1;"
			+ "\n} : Portfolio"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n		"
			+ "\nRef = SCHEMA {"
			+ "\n	entities"
			+ "\n		country, "
			+ "\n		currency, "
			+ "\n		asset, "
			+ "\n		strategy;"
			+ "\n	edges"
			+ "\n		currency_country : currency -> country,"
			+ "\n		asset_strategy : asset -> strategy;"
			+ "\n	attributes	"
			+ "\n		country_id : country -> Integer,"
			+ "\n		country_code : country -> String,"
			+ "\n		country_name : country -> String,"
			+ "\n		asset_id : asset -> Integer,"
			+ "\n		asset_name : asset -> String,"
			+ "\n		asset_description : asset -> String,"
			+ "\n		asset_strategy_id : asset -> Integer,"
			+ "\n		strategy_id : strategy -> Integer,"
			+ "\n		strategy_name : strategy -> String,"
			+ "\n		strategy_description : strategy -> String,"
			+ "\n		currency_id : currency -> Integer,"
			+ "\n		currency_code : currency -> String,"
			+ "\n		currency_name : currency -> String,"
			+ "\n		currency_country_id : currency -> Integer;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities	"
			+ "\n		forall c. c.currency_country.country_id = c.currency_country_id,"
			+ "\n		forall a. a.asset_strategy.strategy_id = a.asset_strategy_id;"
			+ "\n} : Ty		"
			+ "\n"
			+ "\nRefInstance = INSTANCE {"
			+ "\n     generators "
			+ "\n     	rcty1, rcty2, rcty3, rcty4, rcty5, rcty6 : country, "
			+ "\n		rcur1, rcur2, rcur3 : currency, "
			+ "\n		ra1, ra2, ra3, ra4, ra5, ra6, ra7, ra8, ra9, ra10 : asset, "
			+ "\n		rs1, rs2, rs3, rs4, rs5 : strategy;"
			+ "\n     equations	"
			+ "\n 		rcty1.country_id = \"1\", rcty1.country_code = AU, rcty1.country_name = Australia, "
			+ "\n 		rcty2.country_id = \"2\", rcty2.country_code = CH, rcty2.country_name = Switzerland, "
			+ "\n 		rcty3.country_id = \"3\", rcty3.country_code = CN, rcty3.country_name = China, "
			+ "\n 		rcty4.country_id = \"4\", rcty4.country_code = EU, rcty4.country_name = \"European Union\", "
			+ "\n 		rcty5.country_id = \"5\", rcty5.country_code = JP, rcty5.country_name = Japan, "
			+ "\n 		rcty6.country_id = \"6\", rcty6.country_code = US, rcty6.country_name = \"United States of America\", "
			+ "\n 		rcur1.currency_id = \"1\", rcur1.currency_code = USD, rcur1.currency_name = \"US Dollar\", rcur1.currency_country_id  = \"6\", rcur1.currency_country = rcty6, "
			+ "\n		rcur2.currency_id = \"2\", rcur2.currency_code = EUR, rcur2.currency_name = \"Euro\", rcur2.currency_country_id  = \"4\", rcur2.currency_country = rcty4, "
			+ "\n		rcur3.currency_id = \"3\", rcur3.currency_code = JYP, rcur3.currency_name = \"Japanese Yen\", rcur3.currency_country_id  = \"5\", rcur3.currency_country = rcty5, 	 		 		"
			+ "\n		ra1.asset_id = \"1\", ra1.asset_name = A1, ra1.asset_description = Asset1, ra1.asset_strategy_id = \"1\", ra1.asset_strategy = rs1, "
			+ "\n		ra2.asset_id = \"2\", ra2.asset_name = A2, ra2.asset_description = Asset2, ra2.asset_strategy_id = \"3\", ra2.asset_strategy = rs3,"
			+ "\n		ra3.asset_id = \"3\", ra3.asset_name = A3, ra3.asset_description = Asset3, ra3.asset_strategy_id = \"2\", ra3.asset_strategy = rs2,		 "
			+ "\n		ra4.asset_id = \"4\", ra4.asset_name = A4, ra4.asset_description = Asset4, ra4.asset_strategy_id = \"4\", ra4.asset_strategy = rs4,"
			+ "\n		ra5.asset_id = \"5\", ra5.asset_name = A5, ra5.asset_description = Asset5, ra5.asset_strategy_id = \"5\", ra5.asset_strategy = rs5,"
			+ "\n		ra6.asset_id = \"6\", ra6.asset_name = A6, ra6.asset_description = Asset6, ra6.asset_strategy_id = \"4\", ra6.asset_strategy = rs4,"
			+ "\n		ra7.asset_id = \"7\", ra7.asset_name = A7, ra7.asset_description = Asset7, ra7.asset_strategy_id = \"4\", ra7.asset_strategy = rs4,"
			+ "\n		ra8.asset_id = \"8\", ra8.asset_name = A8, ra8.asset_description = Asset8, ra8.asset_strategy_id = \"5\", ra8.asset_strategy = rs5,"
			+ "\n		ra9.asset_id = \"9\", ra9.asset_name = A9, ra9.asset_description = Asset9, ra9.asset_strategy_id = \"3\", ra9.asset_strategy = rs3,"
			+ "\n		ra10.asset_id = \"10\", ra10.asset_name = A10, ra10.asset_description = Asset10, ra10.asset_strategy_id = \"1\", ra10.asset_strategy = rs1,"
			+ "\n		rs1.strategy_id = \"1\", rs1.strategy_name = Strat1, rs1.strategy_description = Strategy1, "
			+ "\n		rs2.strategy_id = \"2\", rs2.strategy_name = Strat2, rs2.strategy_description = Strategy2, "
			+ "\n		rs3.strategy_id = \"3\", rs3.strategy_name = Strat3, rs3.strategy_description = Strategy3, "
			+ "\n		rs4.strategy_id = \"4\", rs4.strategy_name = Strat4, rs4.strategy_description = Strategy4, "
			+ "\n		rs5.strategy_id = \"5\", rs5.strategy_name = Strat5, rs5.strategy_description = Strategy5;"
			+ "\n} : Ref"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n		"
			+ "\nTrans = SCHEMA {"
			+ "\n	entities"
			+ "\n		asset, "
			+ "\n		currency, "
			+ "\n		transaction;"
			+ "\n	edges"
			+ "\n		transaction_asset : transaction -> asset,"
			+ "\n		transaction_currency : transaction -> currency;"
			+ "\n	attributes	"
			+ "\n		asset_id : asset -> Integer,"
			+ "\n		asset_name : asset -> String,"
			+ "\n		asset_description : asset -> String,"
			+ "\n		currency_id : currency -> Integer,"
			+ "\n		currency_code : currency -> String,"
			+ "\n		currency_name : currency -> String,"
			+ "\n		transaction_id : transaction -> Integer,"
			+ "\n		transaction_asset_id : transaction -> Integer,"
			+ "\n		transaction_portfolio_id : transaction -> Integer,"
			+ "\n		transaction_buy_sell_ind : transaction -> Boolean,"
			+ "\n		transaction_quantity : transaction -> Integer,"
			+ "\n		transaction_price : transaction -> Double,"
			+ "\n		transaction_currency_id : transaction -> Integer;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities	"
			+ "\n		forall t. t.transaction_asset.asset_id = t.transaction_asset_id,"
			+ "\n		forall t. t.transaction_currency.currency_id = t.transaction_currency_id;"
			+ "\n} : Ty"
			+ "\n"
			+ "\nTransInstance = INSTANCE {"
			+ "\n     generators "
			+ "\n		ta1, ta3, ta5, ta7, ta9: asset, "
			+ "\n		tc1, tc2, tc3: currency, "
			+ "\n		tt1, tt2, tt3, tt4, tt5, tt6 : transaction;"
			+ "\n     equations"
			+ "\n		ta1.asset_id = \"1\", ta1.asset_name = A1, ta1.asset_description = Asset1, "
			+ "\n		ta3.asset_id = \"3\", ta3.asset_name = A3, ta3.asset_description = Asset3, "
			+ "\n		ta5.asset_id = \"5\", ta5.asset_name = A5, ta5.asset_description = Asset5, "
			+ "\n		ta7.asset_id = \"7\", ta7.asset_name = A7, ta7.asset_description = Asset7, "
			+ "\n		ta9.asset_id = \"9\", ta9.asset_name = A9, ta9.asset_description = Asset9, "
			+ "\n		tc1.currency_id = \"1\", tc1.currency_code = USD, tc1.currency_name = \"US Dollar\", "
			+ "\n		tc2.currency_id = \"2\", tc2.currency_code = EUR, tc2.currency_name = Euro, "
			+ "\n		tc3.currency_id = \"3\", tc3.currency_code = JYP, tc3.currency_name = \"Japanese Yen\", "
			+ "\n		tt1.transaction_id = \"1\", tt1.transaction_asset_id = \"1\", tt1.transaction_asset = ta1, tt1.transaction_portfolio_id = \"1\", tt1.transaction_buy_sell_ind = buy, tt1.transaction_quantity = \"200\", tt1.transaction_price = \"5.51\", tt1.transaction_currency_id  = \"2\", tt1.transaction_currency = tc2, "
			+ "\n		tt2.transaction_id = \"2\", tt2.transaction_asset_id = \"1\", tt2.transaction_asset = ta1, tt2.transaction_portfolio_id = \"1\", tt2.transaction_buy_sell_ind = sell, tt2.transaction_quantity = \"100\", tt2.transaction_price = \"5.5\", tt2.transaction_currency_id  = \"2\", tt2.transaction_currency = tc2, "
			+ "\n		tt3.transaction_id = \"3\", tt3.transaction_asset_id = \"3\", tt3.transaction_asset = ta3, tt3.transaction_portfolio_id = \"2\", tt3.transaction_buy_sell_ind = buy, tt3.transaction_quantity = \"150\", tt3.transaction_price = \"2.5\", tt3.transaction_currency_id  = \"1\", tt3.transaction_currency = tc1, "
			+ "\n		tt4.transaction_id = \"4\", tt4.transaction_asset_id = \"3\", tt4.transaction_asset = ta3, tt4.transaction_portfolio_id = \"2\", tt4.transaction_buy_sell_ind = sell, tt4.transaction_quantity = \"150\", tt4.transaction_price = \"3.5\", tt4.transaction_currency_id  = \"1\", tt4.transaction_currency = tc1, "
			+ "\n		tt5.transaction_id = \"5\", tt5.transaction_asset_id = \"5\", tt5.transaction_asset = ta5, tt5.transaction_portfolio_id = \"3\", tt5.transaction_buy_sell_ind = buy, tt5.transaction_quantity = \"200\", tt5.transaction_price = \"1.6\", tt5.transaction_currency_id  = \"3\", tt5.transaction_currency = tc3, "
			+ "\n		tt6.transaction_id = \"6\", tt6.transaction_asset_id = \"5\", tt6.transaction_asset = ta5, tt6.transaction_portfolio_id = \"3\", tt6.transaction_buy_sell_ind = sell, tt6.transaction_quantity = \"100\", tt6.transaction_price = \"1.5\", tt6.transaction_currency_id  = \"3\", tt6.transaction_currency = tc3 ;"
			+ "\n} : Trans"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nHoldPos = SCHEMA {"
			+ "\n	entities"
			+ "\n		client, "
			+ "\n		holding, "
			+ "\n		position;"
			+ "\n	edges	"
			+ "\n		holding_client : holding -> client,"
			+ "\n		position_client : position -> client;"
			+ "\n	attributes	"
			+ "\n		client_id : client -> Integer,"
			+ "\n		client_name : client -> String,"
			+ "\n		client_description : client -> String,"
			+ "\n		holding_id : holding -> Integer,"
			+ "\n		holding_client_id : holding -> Integer,"
			+ "\n		holding_portfolio_id : holding -> Integer,"
			+ "\n		holding_asset_id : holding -> Integer,"
			+ "\n		holding_quantity : holding -> Integer,"
			+ "\n		holding_purchase_date : holding -> Date,"
			+ "\n		holding_purchase_price : holding -> Double,"
			+ "\n		holding_currency_id : holding -> Integer,"
			+ "\n		position_id : position -> Integer,"
			+ "\n		position_client_id : position -> Integer,"
			+ "\n		position_asset_id : position -> Integer,"
			+ "\n		position_quantity : position -> Integer,"
			+ "\n		position_current_value : position -> Integer,"
			+ "\n		position_current_value_currency_id : position -> Integer,"
			+ "\n		position_cost_basis : position -> Integer,"
			+ "\n		position_cost_basis_currency_id : position -> Integer;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities	"
			+ "\n		forall h. h.holding_client.client_id = h.holding_client_id,"
			+ "\n		forall p. p.position_client.client_id = p.position_client_id;"
			+ "\n} : Ty"
			+ "\n"
			+ "\nHoldPosInstance = INSTANCE {"
			+ "\n     generators "
			+ "\n  		hpc1, hpc2 : client, "
			+ "\n		hph1, hph2, hph3 : holding, "
			+ "\n		hpp1, hpp2 : position;"
			+ "\n     equations"
			+ "\n		hpc1.client_id  = \"1\", hpc1.client_name = Tom, hpc1.client_description = \"Tom Client\", "
			+ "\n		hpc2.client_id  = \"2\", hpc2.client_name = Dick, hpc2.client_description = \"Dick Client\", "
			+ "\n		hph1.holding_id = \"1\", hph1.holding_client_id = \"1\", hph1.holding_client = hpc1, hph1.holding_portfolio_id = \"1\", hph1.holding_asset_id = \"1\", hph1.holding_quantity = \"200\", hph1.holding_purchase_date = \"1/1/2011\", hph1.holding_purchase_price = \"5.51\", hph1.holding_currency_id = \"2\","
			+ "\n		hph2.holding_id = \"2\", hph2.holding_client_id = \"2\", hph2.holding_client = hpc2, hph2.holding_portfolio_id = \"3\", hph2.holding_asset_id = \"3\", hph2.holding_quantity = \"150\", hph2.holding_purchase_date = \"9/1/2013\", hph2.holding_purchase_price = \"2.5\", hph2.holding_currency_id = \"1\","
			+ "\n		hph3.holding_id = \"3\", hph3.holding_client_id = \"2\", hph3.holding_client = hpc2, hph3.holding_portfolio_id = \"3\", hph3.holding_asset_id = \"5\", hph3.holding_quantity = \"200\", hph3.holding_purchase_date = \"2/1/2013\", hph3.holding_purchase_price = \"1.6\", hph3.holding_currency_id = \"3\","
			+ "\n		hpp1.position_id = \"1\", hpp1.position_client_id = \"1\", hpp1.position_client = hpc1, hpp1.position_asset_id = \"1\", hpp1.position_quantity = \"100\", hpp1.position_current_value = \"550\", hpp1.position_current_value_currency_id = \"2\", hpp1.position_cost_basis = \"551\", hpp1.position_cost_basis_currency_id = \"2\",		"
			+ "\n		hpp2.position_id = \"2\", hpp2.position_client_id = \"2\", hpp2.position_client = hpc2, hpp2.position_asset_id = \"5\", hpp2.position_quantity = \"100\", hpp2.position_current_value = \"170\", hpp2.position_current_value_currency_id = \"3\", hpp2.position_cost_basis = \"160\", hpp2.position_cost_basis_currency_id = \"3\";"
			+ "\n} : HoldPos"
			+ "\n"
			+ "\n	"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Linkages between input schemas and instances"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//todo: remove name and description attributes from overlaps?"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nClientHoldPosLinkage = SCHEMA {"
			+ "\n	entities"
			+ "\n		client;"
			+ "\n	edges;"
			+ "\n	attributes"
			+ "\n		client_id : client -> Integer,"
			+ "\n		client_name : client -> String,"
			+ "\n		client_description : client -> String;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;	"
			+ "\n} : Ty"
			+ "\n"
			+ "\nClientHoldPosLinkageToClient = mapping {"
			+ "\n	sorts"
			+ "\n		client -> client;"
			+ "\n	symbols"
			+ "\n		client_id -> forall c. c.client_id,"
			+ "\n		client_name -> forall c. c.client_name,"
			+ "\n		client_description -> forall c. c.client_description;"
			+ "\n} : ClientHoldPosLinkage -> Client"
			+ "\n"
			+ "\nClientHoldPosLinkageToHoldPos = mapping {"
			+ "\n	sorts"
			+ "\n		client -> client;"
			+ "\n	symbols"
			+ "\n		client_id -> forall c. c.client_id,"
			+ "\n		client_name -> forall c. c.client_name,"
			+ "\n		client_description -> forall c. c.client_description;"
			+ "\n} : ClientHoldPosLinkage -> HoldPos"
			+ "\n"
			+ "\nClientHoldPosLinkageInstance = INSTANCE {"
			+ "\n	generators"
			+ "\n		tom, dick : client;"
			+ "\n	equations"
			+ "\n		tom.client_id = \"1\", "
			+ "\n		tom.client_name = Tom,"
			+ "\n		tom.client_description = \"Tom Client\","
			+ "\n		dick.client_id = \"2\", "
			+ "\n		dick.client_name = Dick,"
			+ "\n		dick.client_description = \"Dick Client\";"
			+ "\n} : ClientHoldPosLinkage"
			+ "\n"
			+ "\nSigma_ClientHoldPosLinkageToClient_ClientHoldPosLinkageInstance = sigma ClientHoldPosLinkageToClient ClientHoldPosLinkageInstance"
			+ "\n"
			+ "\nClientHoldPosLinkageInstanceToClientInstance = transpres {"
			+ "\n	sorts"
			+ "\n		client -> {(tom, cc1), (dick, cc2)};"
			+ "\n} : Sigma_ClientHoldPosLinkageToClient_ClientHoldPosLinkageInstance -> ClientInstance"
			+ "\n"
			+ "\nSigma_ClientHoldPosLinkageToHoldPos_ClientHoldPosLinkageInstance = sigma ClientHoldPosLinkageToHoldPos ClientHoldPosLinkageInstance"
			+ "\n"
			+ "\nClientHoldPosLinkageInstanceToHoldPosInstance = transpres {"
			+ "\n	sorts"
			+ "\n		client -> {(tom, hpc1), (dick, hpc2)};"
			+ "\n} : Sigma_ClientHoldPosLinkageToHoldPos_ClientHoldPosLinkageInstance -> HoldPosInstance"
			+ "\n"
			+ "\n"
			+ "\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nPortfolioRefLinkage = SCHEMA {"
			+ "\n	entities"
			+ "\n		strategy;"
			+ "\n	edges;"
			+ "\n	attributes"
			+ "\n		strategy_id : strategy -> Integer,"
			+ "\n		strategy_name : strategy -> String,"
			+ "\n		strategy_description : strategy -> String;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;		"
			+ "\n} : Ty"
			+ "\n"
			+ "\nPortfolioRefLinkageToPortfolio = mapping {"
			+ "\n	sorts"
			+ "\n		strategy -> strategy;"
			+ "\n	symbols"
			+ "\n		strategy_id -> forall c. c.strategy_id,"
			+ "\n		strategy_name -> forall c. c.strategy_name,"
			+ "\n		strategy_description -> forall c. c.strategy_description;"
			+ "\n} : PortfolioRefLinkage -> Portfolio"
			+ "\n"
			+ "\nPortfolioRefLinkageToRef = mapping {"
			+ "\n	sorts"
			+ "\n		strategy -> strategy;"
			+ "\n	symbols"
			+ "\n		strategy_id -> forall c. c.strategy_id,"
			+ "\n		strategy_name -> forall c. c.strategy_name,"
			+ "\n		strategy_description -> forall c. c.strategy_description;	"
			+ "\n} :  PortfolioRefLinkage -> Ref"
			+ "\n"
			+ "\nPortfolioRefLinkageInstance = INSTANCE {"
			+ "\n	generators"
			+ "\n		strat1, strat2, strat3 : strategy; "
			+ "\n	equations"
			+ "\n		strat1.strategy_id = \"1\", strat1.strategy_name = Strat1, strat1.strategy_description = Strategy1,"
			+ "\n		strat2.strategy_id = \"2\", strat2.strategy_name = Strat2, strat2.strategy_description = Strategy2,"
			+ "\n		strat3.strategy_id = \"3\", strat3.strategy_name = Strat3, strat3.strategy_description = Strategy3;"
			+ "\n} : PortfolioRefLinkage"
			+ "\n"
			+ "\nSigma_PortfolioRefLinkageToPortfolio_PortfolioRefLinkageInstance = sigma PortfolioRefLinkageToPortfolio PortfolioRefLinkageInstance "
			+ "\n"
			+ "\nPortfolioRefLinkageInstanceToPortfolioInstance = transpres {"
			+ "\n	sorts"
			+ "\n		strategy -> {(strat1, ps1), (strat2, ps2), (strat3, ps3)};"
			+ "\n} : Sigma_PortfolioRefLinkageToPortfolio_PortfolioRefLinkageInstance -> PortfolioInstance"
			+ "\n"
			+ "\nSigma_PortfolioRefLinkageToRef_PortfolioRefLinkageInstance = sigma PortfolioRefLinkageToRef PortfolioRefLinkageInstance "
			+ "\n"
			+ "\nPortfolioRefLinkageInstanceToRefInstance = transpres {"
			+ "\n	sorts"
			+ "\n		strategy -> {(strat1, rs1), (strat2, rs2), (strat3, rs3)};"
			+ "\n"
			+ "\n} : Sigma_PortfolioRefLinkageToRef_PortfolioRefLinkageInstance -> RefInstance"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nRefTransLinkage = SCHEMA {"
			+ "\n	entities"
			+ "\n		currency, "
			+ "\n		asset;"
			+ "\n	edges;"
			+ "\n	attributes"
			+ "\n		currency_id : currency -> Integer,"
			+ "\n		currency_code : currency -> String,"
			+ "\n		currency_name : currency -> String,"
			+ "\n		asset_id : asset -> Integer,"
			+ "\n		asset_name : asset -> String,"
			+ "\n		asset_description : asset -> String;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;	"
			+ "\n} : Ty"
			+ "\n		"
			+ "\nRefTransLinkageToRef = mapping {"
			+ "\n	sorts"
			+ "\n		currency -> currency,"
			+ "\n		asset -> asset;"
			+ "\n	symbols"
			+ "\n		currency_id -> forall c. c.currency_id,"
			+ "\n		currency_code -> forall c. c.currency_code,"
			+ "\n		currency_name -> forall c. c.currency_name,"
			+ "\n		asset_id -> forall a. a.asset_id,"
			+ "\n		asset_name -> forall a. a.asset_name,"
			+ "\n		asset_description -> forall a. a.asset_description;"
			+ "\n} : RefTransLinkage -> Ref	"
			+ "\n		"
			+ "\nRefTransLinkageToTrans = mapping {"
			+ "\n	sorts"
			+ "\n		currency -> currency,"
			+ "\n		asset -> asset;"
			+ "\n	symbols"
			+ "\n		currency_id -> forall c. c.currency_id,"
			+ "\n		currency_code -> forall c. c.currency_code,"
			+ "\n		currency_name -> forall c. c.currency_name,"
			+ "\n		asset_id -> forall a. a.asset_id,"
			+ "\n		asset_name -> forall a. a.asset_name,"
			+ "\n		asset_description -> forall a. a.asset_description;"
			+ "\n} : RefTransLinkage -> Trans"
			+ "\n"
			+ "\nRefTransLinkageInstance = INSTANCE {"
			+ "\n	generators"
			+ "\n		usd, eur, jyp : currency, "
			+ "\n		one, three, five, seven, nine : asset;"
			+ "\n	equations	"
			+ "\n		usd.currency_id = \"1\", usd.currency_code = USD, usd.currency_name = \"US Dollar\",  "
			+ "\n		eur.currency_id = \"2\", eur.currency_code = EUR, eur.currency_name = \"Euro\", "
			+ "\n		jyp.currency_id = \"3\", jyp.currency_code = JYP, jyp.currency_name = \"Japanese Yen\", 	 		 		"
			+ "\n	"
			+ "\n		one.asset_id = \"1\", one.asset_name = A1, one.asset_description = Asset1, "
			+ "\n		three.asset_id = \"3\", three.asset_name = A3, three.asset_description = Asset3, "
			+ "\n		five.asset_id = \"5\", five.asset_name = A5, five.asset_description = Asset5, "
			+ "\n		seven.asset_id = \"7\", seven.asset_name = A7, seven.asset_description = Asset7, "
			+ "\n		nine.asset_id = \"9\", nine.asset_name = A9, nine.asset_description = Asset9;"
			+ "\n} : RefTransLinkage"
			+ "\n"
			+ "\nSigma_RefTransLinkageToRef_RefTransLinkageInstance = sigma RefTransLinkageToRef RefTransLinkageInstance "
			+ "\n"
			+ "\nRefTransLinkageInstanceToRefInstance = transpres {"
			+ "\n	sorts"
			+ "\n		currency -> {(usd, rcur1), (eur, rcur2), (jyp, rcur3)},"
			+ "\n		asset -> {(one, ra1), (three, ra3), (five, ra5), (seven, ra7), (nine, ra9)};"
			+ "\n} : Sigma_RefTransLinkageToRef_RefTransLinkageInstance -> RefInstance"
			+ "\n"
			+ "\nSigma_RefTransLinkageToTrans_RefTransLinkageInstance = sigma RefTransLinkageToTrans RefTransLinkageInstance"
			+ "\n"
			+ "\nRefTransLinkageInstanceToTransInstance = transpres {"
			+ "\n	sorts"
			+ "\n		currency -> {(usd, tc1), (eur, tc2), (jyp, tc3)},"
			+ "\n		asset -> {(one, ta1), (three, ta3), (five, ta5), (seven, ta7), (nine, ta9)};"
			+ "\n} : Sigma_RefTransLinkageToTrans_RefTransLinkageInstance -> TransInstance"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Schema Colimit computation"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//the entities and edges should match the names of schemas and mappings already defined."
			+ "\nColimitSchemaInput = SCHEMA {"
			+ "\n	entities "
			+ "\n		Client, "
			+ "\n		HoldPos, "
			+ "\n		Portfolio, "
			+ "\n		Ref, "
			+ "\n		Trans, "
			+ "\n		RefTransLinkage,"
			+ "\n		PortfolioRefLinkage,"
			+ "\n		ClientHoldPosLinkage;"
			+ "\n	edges"
			+ "\n		RefTransLinkageToTrans :  RefTransLinkage -> Trans,"
			+ "\n		RefTransLinkageToRef : RefTransLinkage -> Ref,"
			+ "\n		PortfolioRefLinkageToPortfolio : PortfolioRefLinkage -> Portfolio,"
			+ "\n		PortfolioRefLinkageToRef : PortfolioRefLinkage -> Ref,"
			+ "\n		ClientHoldPosLinkageToClient : ClientHoldPosLinkage -> Client,"
			+ "\n		ClientHoldPosLinkageToHoldPos : ClientHoldPosLinkage -> HoldPos;"
			+ "\n	attributes; //can't have attributes in inputs to colimits	"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;	"
			+ "\n} : Ty"
			+ "\n"
			+ "\n//OPL can compute the colimit "
			+ "\nColimitByOPL = colimit ColimitSchemaInput"
			+ "\n"
			+ "\n//but in this particular case, the colimit schema happens to be presented by the "
			+ "\n//union of the presentations of the five input schemas.  So for convenience "
			+ "\n//we will write the colimit by hand.  As an added bonus, in this particular"
			+ "\n//case the mappings into the colimit are all inclusions."
			+ "\nColimit = SCHEMA {"
			+ "\n	imports"
			+ "\n		Client, Ref, Trans, Portfolio, HoldPos;"
			+ "\n	entities;"
			+ "\n	edges; "
			+ "\n	attributes;"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;"
			+ "\n} : Ty"
			+ "\n"
			+ "\nClientIdentityMapping = ID Client"
			+ "\n"
			+ "\nClientToColimit = mapping {"
			+ "\n	imports "
			+ "\n		ClientIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : Client -> Colimit "
			+ "\n"
			+ "\nRefIdentityMapping = ID Ref"
			+ "\n"
			+ "\nRefToColimit = mapping {"
			+ "\n	imports "
			+ "\n		RefIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : Ref -> Colimit "
			+ "\n"
			+ "\nTransIdentityMapping = ID Trans"
			+ "\n"
			+ "\nTransToColimit = mapping {"
			+ "\n	imports "
			+ "\n		TransIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : Trans -> Colimit "
			+ "\n"
			+ "\nPortfolioIdentityMapping = ID Portfolio"
			+ "\n"
			+ "\nPortfolioToColimit = mapping {"
			+ "\n	imports "
			+ "\n		PortfolioIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : Portfolio -> Colimit "
			+ "\n"
			+ "\nHoldPosIdentityMapping = ID HoldPos"
			+ "\n"
			+ "\nHoldPosToColimit = mapping {"
			+ "\n	imports "
			+ "\n		HoldPosIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : HoldPos -> Colimit "
			+ "\n"
			+ "\nRefTransLinkageIdentityMapping = ID RefTransLinkage"
			+ "\n"
			+ "\nRefTransLinkageToColimit = mapping {"
			+ "\n	imports "
			+ "\n		RefTransLinkageIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : RefTransLinkage -> Colimit "
			+ "\n"
			+ "\nPortfolioRefLinkageIdentityMapping = ID PortfolioRefLinkage"
			+ "\n"
			+ "\nPortfolioRefLinkageToColimit = mapping {"
			+ "\n	imports "
			+ "\n		PortfolioRefLinkageIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : PortfolioRefLinkage -> Colimit "
			+ "\n"
			+ "\n"
			+ "\nClientHoldPosLinkageIdentityMapping = ID ClientHoldPosLinkage"
			+ "\n"
			+ "\nClientHoldPosLinkageToColimit = mapping {"
			+ "\n	imports "
			+ "\n		ClientHoldPosLinkageIdentityMapping;"
			+ "\n	sorts;"
			+ "\n	symbols;"
			+ "\n} : ClientHoldPosLinkage -> Colimit "
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Instance Colimit computation"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//we use the mappings from the colimit of schemas to push all our"
			+ "\n//data and data-level linkages onto the colimit schema, then we do a colimit of instances."
			+ "\n"
			+ "\nClientInstanceOnColimit = sigma ClientToColimit ClientInstance"
			+ "\nRefInstanceOnColimit = sigma RefToColimit RefInstance"
			+ "\nTransInstanceOnColimit = sigma TransToColimit TransInstance"
			+ "\nPortfolioInstanceOnColimit = sigma PortfolioToColimit PortfolioInstance "
			+ "\nHoldPosInstanceOnColimit = sigma HoldPosToColimit HoldPosInstance"
			+ "\nRefTransLinkageInstanceOnColimit = sigma RefTransLinkageToColimit RefTransLinkageInstance"
			+ "\nPortfolioRefLinkageInstanceOnColimit = sigma PortfolioRefLinkageToColimit PortfolioRefLinkageInstance"
			+ "\nClientHoldPosLinkageInstanceOnColimit = sigma ClientHoldPosLinkageToColimit ClientHoldPosLinkageInstance"
			+ "\n"
			+ "\nRefTransLinkageToTransOnColimit = sigma TransToColimit RefTransLinkageInstanceToTransInstance "
			+ "\nRefTransLinkageToRefOnColimit = sigma RefToColimit RefTransLinkageInstanceToRefInstance"
			+ "\nPortfolioRefLinkageToPortfolioOnColimit = sigma PortfolioToColimit PortfolioRefLinkageInstanceToPortfolioInstance "
			+ "\nPortfolioRefLinkageToRefOnColimit = sigma RefToColimit PortfolioRefLinkageInstanceToRefInstance "
			+ "\nClientHoldPosLinkageToClientOnColimit = sigma ClientToColimit ClientHoldPosLinkageInstanceToClientInstance "
			+ "\nClientHoldPosLinkageToHoldPosOnColimit = sigma HoldPosToColimit ClientHoldPosLinkageInstanceToHoldPosInstance"
			+ "\n"
			+ "\n"
			+ "\n//this is the same shape as ColimitSchemaInput, but different names.  "
			+ "\n//mathematically, we would give a shape and then ColimitSchemaInput and"
			+ "\n//ColimitInstanceInput would be schema- and instance- valued functors, respectively,"
			+ "\n//from shape."
			+ "\nColimitInstanceInput = SCHEMA {"
			+ "\n	entities "
			+ "\n		ClientInstanceOnColimit, "
			+ "\n		HoldPosInstanceOnColimit, "
			+ "\n		PortfolioInstanceOnColimit, "
			+ "\n		RefInstanceOnColimit, "
			+ "\n		TransInstanceOnColimit, "
			+ "\n		RefTransLinkageInstanceOnColimit,"
			+ "\n		PortfolioRefLinkageInstanceOnColimit,"
			+ "\n		ClientHoldPosLinkageInstanceOnColimit;"
			+ "\n	edges"
			+ "\n		RefTransLinkageToTransOnColimit :  RefTransLinkageInstanceOnColimit -> TransInstanceOnColimit,"
			+ "\n		RefTransLinkageToRefOnColimit : RefTransLinkageInstanceOnColimit -> RefInstanceOnColimit,"
			+ "\n		PortfolioRefLinkageToPortfolioOnColimit : PortfolioRefLinkageInstanceOnColimit -> PortfolioInstanceOnColimit,"
			+ "\n		PortfolioRefLinkageToRefOnColimit : PortfolioRefLinkageInstanceOnColimit -> RefInstanceOnColimit,"
			+ "\n		ClientHoldPosLinkageToClientOnColimit : ClientHoldPosLinkageInstanceOnColimit -> ClientInstanceOnColimit,"
			+ "\n		ClientHoldPosLinkageToHoldPosOnColimit : ClientHoldPosLinkageInstanceOnColimit -> HoldPosInstanceOnColimit;"
			+ "\n	attributes; //can't have attributes in inputs to colimits	"
			+ "\n	pathEqualities;"
			+ "\n	obsEqualities;	"
			+ "\n} : Ty"
			+ "\n"
			+ "\n//OPL's computation"
			+ "\nColimitInstanceByOPL = colimit ColimitInstanceInput"
			+ "\n"
			+ "\n//in this particular case, the colimit instance is presented by the union"
			+ "\n//of the presentations of the input instances and some equations."
			+ "\n//in general this will not be true."
			+ "\nColimitInstance = INSTANCE {"
			+ "\n	imports "
			+ "\n		ClientInstance, RefInstance, TransInstance, PortfolioInstance, HoldPosInstance;"
			+ "\n	generators;"
			+ "\n	equations"
			+ "\n		ps1 = rs1, ps2 = rs2, ps3 = rs3, //strategy"
			+ "\n "
			+ "\n  		rcur1 = tc1, rcur2 = tc2, rcur3 = tc3, //currency"
			+ "\n  		"
			+ "\n  		ta1 = ra1, ta3 = ra3, ta5 = ra5, ta7 = ra7, ta9 = ra9,	//asset"
			+ "\n "
			+ "\n		cc1 = hpc1, cc2 = hpc2; //client "
			+ "\n} : Colimit"
			+ "\n"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//Desired Target Schema, translated from asset-mgmt-er.pdf"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//this is the colimit schema plus some extra fks and equations"
			+ "\nTarget = SCHEMA {"
			+ "\n	imports"
			+ "\n		Colimit;"
			+ "\n		"
			+ "\n	entities"
			+ "\n		portfolioholding; //NEW	"
			+ "\n		"
			+ "\n	edges"
			+ "\n		portfolio_client : portfolio -> client, //NEW"
			+ "\n"
			+ "\n		position_asset : position -> asset, //NEW"
			+ "\n		"
			+ "\n		position_current_value_currency : position -> currency, //NEW"
			+ "\n		position_cost_basis_currency : position -> currency, //NEW"
			+ "\n		"
			+ "\n		transaction_portfolio : transaction -> portfolio, //NEW"
			+ "\n"
			+ "\n		holding_currency : holding -> currency, //NEW"
			+ "\n		holding_portfolio : holding -> portfolio, //NEW"
			+ "\n"
			+ "\n		portfolioholding_holding : portfolioholding -> holding, //NEW"
			+ "\n		portfolioholding_client : portfolioholding -> client, //NEW "
			+ "\n		portfolioholding_portfolio : portfolioholding -> portfolio; //NEW"
			+ "\n		"
			+ "\n	attributes"
			+ "\n		//can't have - requires keygen portfolioholding_id : portfolioholding -> Integer, //NEW"
			+ "\n		portfolioholding_holding_id : portfolioholding -> Integer, //NEW"
			+ "\n		portfolioholding_client_id : portfolioholding -> Integer, //NEW"
			+ "\n		portfolioholding_portfolio_id : portfolioholding -> Integer; //NEW"
			+ "\n	"
			+ "\n	pathEqualities"
			+ "\n		forall ph. ph.portfolioholding_holding.holding_client = ph.portfolioholding_client, //NEW"
			+ "\n		forall ph. ph.portfolioholding_portfolio.portfolio_client = ph.portfolioholding_client, //NEW"
			+ "\n		forall ph. ph.portfolioholding_holding.holding_portfolio = ph.portfolioholding_portfolio; //NEW"
			+ "\n"
			+ "\n	obsEqualities"
			+ "\n		forall p. p.portfolioholding_holding.holding_id = p.portfolioholding_holding_id,"
			+ "\n		forall p. p.portfolioholding_client.client_id = p.portfolioholding_client_id,	"
			+ "\n		forall p. p.portfolioholding_portfolio.portfolio_id = p.portfolioholding_portfolio_id;"
			+ "\n} : Ty"
			+ "\n"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n//An uber-flower to migrate from Colim to Target"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n////////////////////////////////////////////////////////////////////////"
			+ "\n		"
			+ "\nETL = query {"
			+ "\n	//identity"
			+ "\n	currencyQ = {for c:currency;"
			+ "\n		 where;"
			+ "\n		 return currency_code = c.currency_code,"
			+ "\n			currency_name = c.currency_name,"
			+ "\n			currency_id = c.currency_id,"
			+ "\n			currency_country_id = c.currency_country_id;		 		"
			+ "\n		 keys currency_country = {c = c.currency_country} : countryQ;		"
			+ "\n	} : currency,"
			+ "\n"
			+ "\n	//identity"
			+ "\n	strategyQ = {for s:strategy;"
			+ "\n		 where;"
			+ "\n		 return strategy_name = s.strategy_name,"
			+ "\n		 	strategy_description = s.strategy_description,"
			+ "\n		 	strategy_id = s.strategy_id;"
			+ "\n		 keys;		"
			+ "\n	} : strategy,"
			+ "\n"
			+ "\n	//identity"
			+ "\n	assetQ = {for a:asset;"
			+ "\n		 where;"
			+ "\n		 return asset_id = a.asset_id,"
			+ "\n		 	asset_description = a.asset_description,"
			+ "\n		 	asset_name = a.asset_name,"
			+ "\n		 	asset_strategy_id = a.asset_strategy_id;"
			+ "\n		 keys asset_strategy = {s = a.asset_strategy} : strategyQ; 		"
			+ "\n	} : asset,"
			+ "\n"
			+ "\n	//identity"
			+ "\n	clientQ = {for c:client;"
			+ "\n		 where;"
			+ "\n		 return client_description = c.client_description, "
			+ "\n			client_name = c.client_name,"
			+ "\n			client_id = c.client_id;"
			+ "\n		 keys;		"
			+ "\n	} : client,"
			+ "\n"
			+ "\n	//identity"
			+ "\n	countryQ = {for c:country;"
			+ "\n		 where;"
			+ "\n		 return country_code = c.country_code,"
			+ "\n		 	country_name = c.country_name,"
			+ "\n		 	country_id = c.country_id;"
			+ "\n		 keys;		"
			+ "\n	} : country,"
			+ "\n"
			+ "\n	//not identity"
			+ "\n	transactionQ = {for t:transaction, p:portfolio, c:client;"
			+ "\n		 where p.portfolio_client_id = c.client_id,"
			+ "\n		 	t.transaction_portfolio_id = p.portfolio_id;"
			+ "\n		 return transaction_id = t.transaction_id, "
			+ "\n			transaction_asset_id = t.transaction_asset_id, "
			+ "\n			transaction_buy_sell_ind = t.transaction_buy_sell_ind, "
			+ "\n			transaction_quantity = t.transaction_quantity,"
			+ "\n			transaction_price = t.transaction_price, "
			+ "\n			transaction_currency_id = t.transaction_currency_id, 			"
			+ "\n			transaction_portfolio_id = t.transaction_portfolio_id;"
			+ "\n		 keys transaction_currency = {c = t.transaction_currency} : currencyQ, "
			+ "\n			transaction_asset = {a = t.transaction_asset} : assetQ,  "
			+ "\n			transaction_portfolio = {p = p, c = c} : portfolioQ;	//NEW	"
			+ "\n	} : transaction,"
			+ "\n"
			+ "\n	//not identity"
			+ "\n	positionQ = {for p:position, a:asset, cv:currency, cb:currency;"
			+ "\n		 where p.position_asset_id = a.asset_id,"
			+ "\n		 	p.position_current_value_currency_id = cv.currency_id,"
			+ "\n		 	p.position_cost_basis_currency_id = cb.currency_id;"
			+ "\n		 return position_quantity = p.position_quantity,"
			+ "\n		 	position_current_value = p.position_current_value,"
			+ "\n		 	position_cost_basis = p.position_cost_basis,"
			+ "\n		 	position_id = p.position_id, "
			+ "\n		 	position_client_id = p.position_client_id,"
			+ "\n		 	position_asset_id = p.position_asset_id,"
			+ "\n		 	position_current_value_currency_id = p.position_current_value_currency_id,"
			+ "\n		 	position_cost_basis_currency_id = p.position_cost_basis_currency_id;"
			+ "\n		 keys position_client = {c = p.position_client} : clientQ,"
			+ "\n			position_asset = {a = a} : assetQ, //NEW"
			+ "\n			position_current_value_currency = {c = cv} : currencyQ, //NEW"
			+ "\n			position_cost_basis_currency = {c = cb} : currencyQ; //NEW"
			+ "\n	} : position,"
			+ "\n"
			+ "\n	//not identity"
			+ "\n	portfolioQ = {for p:portfolio, c:client;"
			+ "\n		 where p.portfolio_client_id = c.client_id;"
			+ "\n		 return portfolio_name = p.portfolio_name,"
			+ "\n		 	portfolio_description = p.portfolio_description,"
			+ "\n		 	portfolio_id = p.portfolio_id,"
			+ "\n		 	portfolio_strategy_id = p.portfolio_strategy_id,"
			+ "\n		 	portfolio_client_id = p.portfolio_client_id; "
			+ "\n		 keys portfolio_strategy = {s=p.portfolio_strategy} : strategyQ,"
			+ "\n			portfolio_client = {c = c} : clientQ; //NEW"
			+ "\n	} : portfolio,"
			+ "\n"
			+ "\n	//not identity"
			+ "\n	holdingQ = {for h:holding, c:currency, p:portfolio;"
			+ "\n		 where h.holding_currency_id = c.currency_id,"
			+ "\n		 	h.holding_portfolio_id = p.portfolio_id,"
			+ "\n		 	p.portfolio_client_id = client_id(holding_client(h));"
			+ "\n		 return holding_id = h.holding_id,			"
			+ "\n			holding_asset_id = h.holding_asset_id,"
			+ "\n			holding_currency_id  = h.holding_currency_id, "
			+ "\n			holding_purchase_price  = h.holding_purchase_price, "
			+ "\n			holding_quantity  = h.holding_quantity, "
			+ "\n			holding_purchase_date  = h.holding_purchase_date, "
			+ "\n			holding_client_id  = h.holding_client_id, "
			+ "\n			holding_portfolio_id  = h.holding_portfolio_id;"
			+ "\n		 keys holding_currency = {c = c} : currencyQ, //NEW"
			+ "\n			holding_client = {c = h.holding_client} : clientQ, "
			+ "\n			holding_portfolio = {p = p, c = h.holding_client} : portfolioQ; //NEW	"
			+ "\n	} : holding,"
			+ "\n "
			+ "\n	//not identity"
			+ "\n	portfolioholdingQ = {for h:holding, p:portfolio, cur:currency;"
			+ "\n		 where h.holding_currency_id = cur.currency_id,"
			+ "\n		 	p.portfolio_client_id = h.holding_client.client_id,"
			+ "\n		 	h.holding_portfolio_id = p.portfolio_id;"
			+ "\n		 return portfolioholding_holding_id = h.holding_id,"
			+ "\n			portfolioholding_client_id = h.holding_client.client_id,"
			+ "\n			portfolioholding_portfolio_id = p.portfolio_id;"
			+ "\n		 keys portfolioholding_holding = {h = h, c = cur, p = p} : holdingQ, "
			+ "\n		portfolioholding_client = {c = h.holding_client} : clientQ, "
			+ "\n		portfolioholding_portfolio = {p = p, c = h.holding_client} : portfolioQ;		"
			+ "\n	} : portfolioholding"
			+ "\n	"
			+ "\n} : Colimit -> Target	"
			+ "\n"
			+ "\nOutput = apply ETL ColimitInstance"
			+ "\n";



}
