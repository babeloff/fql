/* The following code was generated by JFlex 1.4.3 on 8/29/16 10:45 PM */

/*
 * Generated on 8/29/16 10:45 PM
 */
package catdata.aql;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("unused")
public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\25\1\14"+
    "\1\16\1\1\1\25\1\25\1\6\1\26\1\26\1\21\1\56\1\25"+
    "\1\57\1\23\1\20\1\4\3\4\4\4\2\3\1\37\1\25\1\15"+
    "\1\61\1\60\1\25\1\24\6\5\10\1\1\55\13\1\1\26\1\10"+
    "\1\26\1\62\1\2\1\0\1\43\1\13\1\44\1\51\1\36\1\33"+
    "\1\41\1\27\1\34\1\53\1\54\1\35\1\45\1\12\1\50\1\31"+
    "\1\46\1\42\1\32\1\30\1\11\1\52\1\40\1\1\1\47\1\1"+
    "\1\22\1\62\1\22\1\25\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\23\1\1\6\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\3\1\2\4\1\14\1\15\1\16"+
    "\2\1\1\17\14\1\1\17\5\1\1\17\20\1\1\20"+
    "\11\0\3\1\1\4\1\21\1\4\14\1\1\17\33\1"+
    "\11\0\1\4\32\1\2\0\1\22\2\0\1\23\1\0"+
    "\1\4\1\1\1\17\6\1\1\24\6\1\5\0\1\4"+
    "\2\1\1\24\22\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\231\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\231\0\231\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05c7\0\u05fa\0\231\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\231\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\231\0\231\0\231\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\314\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\231\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\231\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u20df\0\u2112\0\u0990\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\314\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u22aa\0\u26d9\0\u2343\0\u270c\0\u273f\0\u2772\0\u27a5"+
    "\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d"+
    "\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5"+
    "\0\u2b08\0\u2b3b\0\u2b6e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\1\4\1\15\1\4\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\15\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\5\1\35\1\36\1\5"+
    "\1\37\1\40\1\5\1\15\1\41\1\4\1\42\1\15"+
    "\7\43\1\44\11\43\1\45\5\43\1\46\3\43\1\47"+
    "\4\43\1\50\22\43\7\51\1\52\17\51\1\53\3\51"+
    "\1\54\4\51\1\55\22\51\64\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\16\5\5\0\3\57\2\6"+
    "\1\57\2\0\4\57\2\0\1\57\5\0\1\57\2\0"+
    "\10\57\1\0\16\57\6\0\5\5\2\0\1\56\1\5"+
    "\1\60\1\5\13\0\10\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\1\61\2\5\13\0\10\5\1\0\10\5"+
    "\1\62\5\5\5\0\7\12\1\63\1\64\3\12\1\65"+
    "\46\12\17\0\1\13\63\0\1\66\1\67\42\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\2\5\1\70"+
    "\4\5\1\71\6\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\5\5\1\72\2\5\1\0\2\5\1\73\1\74"+
    "\12\5\6\0\5\5\2\0\1\56\3\5\13\0\5\5"+
    "\1\75\1\5\1\76\1\0\4\5\1\77\2\5\1\100"+
    "\1\101\5\5\6\0\5\5\2\0\1\56\1\102\2\5"+
    "\13\0\10\5\1\0\2\5\1\103\5\5\1\104\5\5"+
    "\6\0\5\5\2\0\1\56\1\5\1\105\1\5\13\0"+
    "\10\5\1\0\5\5\1\106\3\5\1\107\4\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\5\5\1\110\2\5"+
    "\1\0\3\5\1\111\12\5\6\0\5\5\2\0\1\56"+
    "\1\5\1\112\1\5\13\0\10\5\1\0\5\5\1\113"+
    "\1\114\2\5\1\115\1\116\3\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\117\4\5\1\74\2\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\3\5\13\0\7\5"+
    "\1\120\1\0\2\5\1\121\13\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\7\5\1\122\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\1\5\1\123\1\5\13\0\1\5"+
    "\1\124\1\5\1\107\4\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\1\125\7\5\1\0\10\5"+
    "\1\126\5\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\3\5\1\127\12\5\6\0\5\5\2\0"+
    "\1\56\1\130\2\5\13\0\10\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\2\5\1\131\13\0\2\5\1\132"+
    "\5\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\7\5\1\133\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\3\5\1\134\12\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\7\5\1\135"+
    "\1\0\16\5\65\0\1\15\2\0\7\43\1\0\11\43"+
    "\1\0\5\43\1\0\3\43\1\0\4\43\1\0\22\43"+
    "\20\0\1\136\72\0\1\137\62\0\1\140\3\0\1\141"+
    "\66\0\1\142\22\0\7\51\1\0\17\51\1\0\3\51"+
    "\1\0\4\51\1\0\22\51\30\0\1\143\62\0\1\144"+
    "\3\0\1\145\66\0\1\146\33\0\1\147\51\0\6\57"+
    "\2\0\4\57\2\0\1\57\5\0\1\57\2\0\10\57"+
    "\1\0\16\57\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\5\5\1\150\2\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\6\5\1\151\1\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\11\5\1\152\4\5\5\0\10\63\1\153\3\63\1\154"+
    "\52\63\1\12\1\63\1\12\1\0\1\12\1\155\3\12"+
    "\13\63\1\12\2\63\1\12\6\63\1\12\20\63\1\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\3\5"+
    "\1\156\12\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\2\5\1\157\5\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\12\5\1\160\3\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\3\5\1\161\12\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\1\5\1\162\6\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\1\5\1\163"+
    "\14\5\6\0\5\5\2\0\1\56\3\5\13\0\6\5"+
    "\1\164\1\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\1\165\7\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\5\5\1\166"+
    "\10\5\6\0\5\5\2\0\1\56\3\5\13\0\10\5"+
    "\1\0\2\5\1\167\13\5\6\0\5\5\2\0\1\56"+
    "\1\5\1\170\1\5\13\0\10\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\10\5"+
    "\1\171\5\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\2\5\1\172\13\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\173\1\5\1\174\4\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\2\5\1\175\5\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\176\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\2\5\1\177\13\0\10\5"+
    "\1\0\5\5\1\200\10\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\1\5\1\201\6\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\2\5\1\202\5\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\1\203\2\5"+
    "\13\0\10\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\1\5\1\152\14\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\3\5"+
    "\1\204\12\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\7\5\1\205\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\1\5\1\206\1\5\13\0\10\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\3\5"+
    "\1\207\12\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\1\5\1\210\6\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\11\5\1\107\4\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\1\5\1\211"+
    "\6\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\10\5\1\0\3\5\1\212\12\5\6\0\5\5"+
    "\2\0\1\56\1\10\1\213\1\5\13\0\2\5\1\214"+
    "\3\5\1\215\1\216\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\2\5\1\217\5\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\7\5\1\220"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\3\5\1\221\4\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\222\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\6\5\1\223"+
    "\1\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\10\5\1\0\12\5\1\224\3\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\7\5\1\225"+
    "\6\5\35\0\1\226\63\0\1\227\66\0\1\230\65\0"+
    "\1\231\52\0\1\232\63\0\1\233\66\0\1\234\65\0"+
    "\1\235\25\0\3\236\5\0\1\236\17\0\1\236\2\0"+
    "\1\236\4\0\2\236\4\0\1\236\12\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\107\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\6\5\1\225"+
    "\1\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\7\5\1\225\1\0\16\5\5\0\7\63\1\0"+
    "\56\63\3\237\2\63\1\153\2\63\1\237\1\154\16\63"+
    "\1\237\2\63\1\237\4\63\2\237\4\63\1\237\11\63"+
    "\1\0\5\5\2\0\1\56\1\5\1\240\1\5\13\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\7\5\1\241\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\10\5\1\150\5\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\1\5\1\242\14\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\1\107\7\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\5\5\1\224\10\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\7\5\1\243"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\7\5\1\244\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\2\5\1\245\13\0\10\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\1\5\1\225\6\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\3\5\13\0\10\5"+
    "\1\0\4\5\1\132\11\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\5\5\1\107\10\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\3\5"+
    "\1\246\12\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\10\5\1\107\5\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\247\5\5\1\250\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\3\5\13\0\10\5"+
    "\1\0\10\5\1\101\5\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\7\5\1\251\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\7\5\1\252\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\2\5\1\253\13\0\10\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\5\5\1\254\2\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\255\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\3\5\1\132\12\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\6\5\1\107\1\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\2\5\1\256"+
    "\13\5\6\0\5\5\2\0\1\56\3\5\13\0\7\5"+
    "\1\257\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\2\5\1\260\5\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\1\261\2\5\13\0\10\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\2\5\1\262\13\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\3\5\1\256\4\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\3\5\1\263\4\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\3\5\13\0\5\5"+
    "\1\264\2\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\5\5\1\265\2\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\12\5"+
    "\1\116\3\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\2\5\1\266\5\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\2\5\1\267\13\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\7\5\1\270"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\5\5\1\271\2\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\1\5\1\224\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\3\5\1\107\12\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\3\5\1\107\4\5\1\0\16\5\36\0\1\272"+
    "\70\0\1\273\61\0\1\227\47\0\1\274\70\0\1\275"+
    "\70\0\1\276\61\0\1\233\47\0\1\277\42\0\3\300"+
    "\5\0\1\300\17\0\1\300\2\0\1\300\4\0\2\300"+
    "\4\0\1\300\11\0\3\63\3\301\2\63\1\153\2\63"+
    "\1\301\1\154\16\63\1\301\2\63\1\301\4\63\2\301"+
    "\4\63\1\301\11\63\1\0\5\5\2\0\1\56\3\5"+
    "\13\0\3\5\1\302\4\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\3\5\1\303\4\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\3\5\13\0\10\5"+
    "\1\0\5\5\1\304\10\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\4\5\1\150\11\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\5\5"+
    "\1\305\10\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\10\5\1\151\5\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\6\5\1\204\1\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\3\5\1\306\12\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\10\5\1\0\2\5\1\150\13\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\2\5\1\116"+
    "\13\5\6\0\5\5\2\0\1\56\3\5\13\0\6\5"+
    "\1\307\1\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\11\5\1\224\4\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\1\5\1\310\6\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\7\5\1\107\6\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\7\5\1\107\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\2\5"+
    "\1\311\13\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\1\312\7\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\2\5\1\313\13\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\5\5\1\314\2\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\1\5\1\315\6\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\5\5\1\60\10\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\5\5\1\316"+
    "\2\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\10\5\1\0\7\5\1\312\6\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\2\5\1\317"+
    "\13\5\6\0\5\5\2\0\1\56\3\5\13\0\10\5"+
    "\1\0\10\5\1\320\5\5\37\0\1\227\4\0\1\273"+
    "\43\0\1\321\43\0\1\274\1\322\3\274\1\322\2\0"+
    "\3\274\2\0\1\322\1\0\1\274\1\322\1\0\4\322"+
    "\10\274\1\322\16\274\2\322\1\0\1\322\33\0\1\233"+
    "\4\0\1\276\43\0\1\323\43\0\1\277\1\324\3\277"+
    "\1\324\2\0\3\277\2\0\1\324\1\0\1\277\1\324"+
    "\1\0\4\324\10\277\1\324\16\277\2\324\1\0\1\324"+
    "\4\0\3\325\5\0\1\325\17\0\1\325\2\0\1\325"+
    "\4\0\2\325\4\0\1\325\11\0\3\63\3\326\2\63"+
    "\1\153\2\63\1\326\1\154\16\63\1\326\2\63\1\326"+
    "\4\63\2\326\4\63\1\326\11\63\1\0\5\5\2\0"+
    "\1\56\3\5\13\0\4\5\1\327\3\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\5\5\1\330"+
    "\2\5\1\0\16\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\10\5\1\0\3\5\1\312\12\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\3\5\1\331"+
    "\12\5\6\0\5\5\2\0\1\56\1\5\1\332\1\5"+
    "\13\0\10\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\6\5\1\333\1\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\5\5\1\152\2\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\3\5\1\334\12\5\6\0\5\5\2\0"+
    "\1\56\1\5\1\107\1\5\13\0\10\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\2\5\1\335\13\0\10\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\3\5\1\336\12\5\6\0\5\5\2\0"+
    "\1\56\1\5\1\337\1\5\13\0\10\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\12\5\1\340\3\5\6\0\5\5\2\0\1\56\1\5"+
    "\1\225\1\5\13\0\10\5\1\0\16\5\25\0\1\274"+
    "\62\0\1\277\45\0\3\5\5\0\1\5\17\0\1\5"+
    "\2\0\1\5\4\0\2\5\4\0\1\5\11\0\3\63"+
    "\3\12\2\63\1\153\2\63\1\12\1\154\16\63\1\12"+
    "\2\63\1\12\4\63\2\12\4\63\1\12\11\63\1\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\10\5"+
    "\1\341\5\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\11\5\1\342\4\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\15\5\1\343\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\4\5"+
    "\1\344\11\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\7\5\1\123\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\1\5\1\345\6\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\1\346\2\5\13\0\10\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\56\1\5\1\167\1\5"+
    "\13\0\10\5\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\1\5\1\312\14\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\10\5\1\0\3\5"+
    "\1\347\12\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\10\5\1\0\2\5\1\350\13\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\7\5\1\331\1\0\16\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\4\5\1\107\3\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\7\5\1\312\1\0\16\5\6\0\5\5\2\0\1\56"+
    "\3\5\13\0\10\5\1\0\10\5\1\351\5\5\6\0"+
    "\5\5\2\0\1\56\3\5\13\0\1\5\1\152\6\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\56\3\5\13\0"+
    "\1\5\1\352\6\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\56\3\5\13\0\10\5\1\0\5\5\1\312\10\5"+
    "\6\0\5\5\2\0\1\56\3\5\13\0\10\5\1\0"+
    "\2\5\1\225\13\5\6\0\5\5\2\0\1\56\3\5"+
    "\13\0\5\5\1\353\2\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\56\3\5\13\0\10\5\1\0\10\5\1\313"+
    "\5\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11169];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\2\11\25\1\1\11"+
    "\5\1\1\11\3\1\1\0\6\1\3\11\46\1\1\11"+
    "\11\0\4\1\1\11\51\1\11\0\33\1\2\0\1\1"+
    "\2\0\1\1\1\0\20\1\5\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 20: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 34: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 8: 
          { 
          }
        case 39: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 236: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 237: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 238: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
