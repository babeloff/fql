/* The following code was generated by JFlex 1.4.3 on 11/14/16 1:16 AM */

/*
 * Generated on 11/14/16 1:16 AM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("unused")
public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
 
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\55\1\24"+
    "\1\56\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\60\1\57\1\24\1\16\6\5\10\1\1\54\13\1\1\25\1\10"+
    "\1\25\1\61\1\2\1\0\1\42\1\13\1\43\1\50\1\35\1\32"+
    "\1\40\1\26\1\33\1\53\1\52\1\34\1\44\1\12\1\47\1\30"+
    "\1\45\1\41\1\31\1\27\1\11\1\51\1\37\1\1\1\46\1\1"+
    "\1\22\1\61\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\22\1\1\6\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\2\1\2\4\1\14\1\15\1\16"+
    "\14\1\1\17\26\1\1\20\11\0\1\1\1\4\1\21"+
    "\1\4\41\1\11\0\1\1\1\4\34\1\1\17\2\0"+
    "\1\22\2\0\1\23\1\0\1\4\1\1\1\17\10\1"+
    "\1\24\10\1\5\0\1\4\3\1\1\24\35\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\226\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\226\0\226\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u0578\0\u05aa\0\226\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\226\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\226\0\226\0\226\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\310\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\226\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\226\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166"+
    "\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6"+
    "\0\u2328\0\310\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u203a\0\u251c\0\u20d0\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30"+
    "\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0"+
    "\0\u2bf2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\15\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\36\2\5\1\37\1\5"+
    "\1\15\1\40\1\4\1\41\1\15\7\42\1\43\11\42"+
    "\1\44\4\42\1\45\3\42\1\46\4\42\1\47\22\42"+
    "\7\50\1\51\16\50\1\52\3\50\1\53\4\50\1\54"+
    "\22\50\63\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\16\5\5\0\3\56\2\6\1\56\2\0\4\56"+
    "\2\0\1\56\7\0\10\56\1\0\16\56\6\0\5\5"+
    "\2\0\1\55\1\5\1\57\1\5\12\0\10\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\10\5\1\60\5\5\5\0\7\12\1\61\1\62"+
    "\3\12\1\63\45\12\17\0\1\13\62\0\1\64\1\65"+
    "\41\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\2\5\1\66\4\5\1\67\6\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\2\5\1\70\1\71"+
    "\12\5\6\0\5\5\2\0\1\55\3\5\12\0\5\5"+
    "\1\72\2\5\1\0\2\5\1\73\1\5\1\74\11\5"+
    "\6\0\5\5\2\0\1\55\1\75\2\5\12\0\10\5"+
    "\1\0\2\5\1\76\5\5\1\77\5\5\6\0\5\5"+
    "\2\0\1\55\1\5\1\100\1\5\12\0\10\5\1\0"+
    "\5\5\1\101\3\5\1\102\4\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\103\2\5\1\0\3\5"+
    "\1\104\12\5\6\0\5\5\2\0\1\55\1\5\1\105"+
    "\1\5\12\0\10\5\1\0\5\5\1\106\1\107\2\5"+
    "\1\110\1\111\3\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\1\112\7\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\7\5\1\113\1\0\2\5\1\114"+
    "\13\5\6\0\5\5\2\0\1\55\3\5\12\0\7\5"+
    "\1\115\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\1\5\1\116\6\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\10\5\1\117"+
    "\5\5\6\0\5\5\2\0\1\55\1\120\2\5\12\0"+
    "\10\5\1\0\3\5\1\121\12\5\6\0\5\5\2\0"+
    "\1\55\1\122\2\5\12\0\10\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\2\5\1\123\12\0\2\5\1\124"+
    "\5\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\3\5\1\125\1\5\1\126\1\5\1\127\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\3\5\1\130\12\5\64\0\1\15\2\0\7\42"+
    "\1\0\11\42\1\0\4\42\1\0\3\42\1\0\4\42"+
    "\1\0\22\42\20\0\1\131\70\0\1\132\61\0\1\133"+
    "\3\0\1\134\65\0\1\135\22\0\7\50\1\0\16\50"+
    "\1\0\3\50\1\0\4\50\1\0\22\50\27\0\1\136"+
    "\61\0\1\137\3\0\1\140\65\0\1\141\33\0\1\142"+
    "\50\0\6\56\2\0\4\56\2\0\1\56\7\0\10\56"+
    "\1\0\16\56\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\5\5\1\125\2\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\11\5\1\143\4\5"+
    "\5\0\10\61\1\144\3\61\1\145\51\61\1\12\1\61"+
    "\1\12\1\0\1\12\1\146\3\12\12\61\1\12\2\61"+
    "\1\12\6\61\1\12\20\61\1\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\3\5\1\147\12\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\2\5\1\150\5\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\3\5\1\151\12\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\152\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\1\5\1\153\14\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\4\5\1\102\11\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\1\154\7\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\1\5\1\155\1\5\12\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\10\5\1\156\5\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\2\5\1\157"+
    "\13\5\6\0\5\5\2\0\1\55\3\5\12\0\3\5"+
    "\1\160\4\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\2\5\1\161\5\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\1\5\1\162\6\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\5\5\1\163\10\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\164\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\2\5\1\165"+
    "\5\5\1\0\16\5\6\0\5\5\2\0\1\55\1\166"+
    "\2\5\12\0\10\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\1\5\1\143\14\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\3\5\1\167\12\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\7\5\1\170\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\1\5\1\171\1\5\12\0\10\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\3\5\1\172\12\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\1\5\1\173\6\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\1\5\1\174\6\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\1\10\1\175\1\5"+
    "\12\0\6\5\1\176\1\177\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\6\5\1\200\1\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\2\5"+
    "\1\201\5\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\202\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\3\5\1\203\4\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\1\5"+
    "\1\204\6\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\1\5\1\102\6\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\3\5\1\205\4\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\6\5\1\206\1\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\12\5\1\207\3\5"+
    "\34\0\1\210\62\0\1\211\65\0\1\212\64\0\1\213"+
    "\51\0\1\214\62\0\1\215\65\0\1\216\64\0\1\217"+
    "\25\0\3\220\5\0\1\220\16\0\1\220\2\0\1\220"+
    "\4\0\2\220\4\0\1\220\12\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\221\1\0\16\5\5\0\7\61"+
    "\1\0\55\61\3\222\2\61\1\144\2\61\1\222\1\145"+
    "\15\61\1\222\2\61\1\222\4\61\2\222\4\61\1\222"+
    "\11\61\1\0\5\5\2\0\1\55\1\5\1\223\1\5"+
    "\12\0\10\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\224\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\1\5\1\225"+
    "\14\5\6\0\5\5\2\0\1\55\3\5\12\0\1\226"+
    "\7\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\5\5\1\227\10\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\7\5\1\230\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\4\5\1\124\11\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\5\5\1\102\10\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\7\5\1\231\1\0\3\5"+
    "\1\232\12\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\1\5\1\233\5\5\1\234\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\10\5\1\235"+
    "\5\5\6\0\5\5\2\0\1\55\3\5\12\0\7\5"+
    "\1\236\1\0\16\5\6\0\5\5\2\0\1\55\2\5"+
    "\1\237\12\0\10\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\240\2\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\1\5\1\241"+
    "\6\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\3\5\1\124\12\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\6\5\1\102\1\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\2\5\1\242\13\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\243\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\2\5\1\244\5\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\1\245\2\5\12\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\2\5\1\246\13\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\3\5\1\247\4\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\5\5"+
    "\1\250\2\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\12\5\1\111\3\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\1\5\1\251\6\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\2\5\1\252\5\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\2\5\1\253\13\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\7\5\1\254"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\5\5\1\255\2\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\256\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\1\5\1\227"+
    "\6\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\3\5\1\257\12\5\35\0\1\260"+
    "\67\0\1\261\60\0\1\211\47\0\1\262\66\0\1\263"+
    "\67\0\1\264\60\0\1\215\47\0\1\265\41\0\3\266"+
    "\5\0\1\266\16\0\1\266\2\0\1\266\4\0\2\266"+
    "\4\0\1\266\12\0\5\5\2\0\1\55\3\5\12\0"+
    "\3\5\1\102\4\5\1\0\16\5\5\0\3\61\3\267"+
    "\2\61\1\144\2\61\1\267\1\145\15\61\1\267\2\61"+
    "\1\267\4\61\2\267\4\61\1\267\11\61\1\0\5\5"+
    "\2\0\1\55\3\5\12\0\3\5\1\270\4\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\3\5"+
    "\1\271\4\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\5\5\1\272\10\5\6\0"+
    "\1\5\1\273\3\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\3\5\1\102\12\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\5\5\1\274\10\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\5\5\1\275"+
    "\2\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\6\5\1\167\1\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\3\5\1\276"+
    "\12\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\2\5\1\125\13\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\2\5\1\277\13\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\2\5"+
    "\1\111\13\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\11\5\1\227\4\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\300\6\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\7\5\1\102\6\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\7\5\1\102\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\2\5\1\301\13\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\1\302\7\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\2\5\1\303\13\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\304\2\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\1\5\1\305"+
    "\6\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\5\5\1\57\10\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\5\5\1\226\2\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\5\5"+
    "\1\306\2\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\7\5\1\302\6\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\2\5"+
    "\1\307\13\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\10\5\1\310\5\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\311\2\5\1\0\16\5"+
    "\6\0\1\5\1\312\3\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\16\5\36\0\1\211\4\0\1\261\43\0"+
    "\1\313\42\0\1\262\1\314\3\262\1\314\2\0\3\262"+
    "\2\0\1\314\1\0\1\262\1\314\1\0\3\314\10\262"+
    "\1\314\16\262\2\314\1\0\1\314\32\0\1\215\4\0"+
    "\1\264\43\0\1\315\42\0\1\265\1\316\3\265\1\316"+
    "\2\0\3\265\2\0\1\316\1\0\1\265\1\316\1\0"+
    "\3\316\10\265\1\316\16\265\2\316\1\0\1\316\4\0"+
    "\3\317\5\0\1\317\16\0\1\317\2\0\1\317\4\0"+
    "\2\317\4\0\1\317\11\0\3\61\3\320\2\61\1\144"+
    "\2\61\1\320\1\145\15\61\1\320\2\61\1\320\4\61"+
    "\2\320\4\61\1\320\11\61\1\0\5\5\2\0\1\55"+
    "\3\5\12\0\4\5\1\321\3\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\5\5\1\322\2\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\3\5\1\302\12\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\7\5\1\323\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\3\5"+
    "\1\324\12\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\1\5\1\325\14\5\6\0\5\5\2\0"+
    "\1\55\1\5\1\326\1\5\12\0\10\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\1\5\1\221"+
    "\6\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\5\5\1\143\2\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\3\5\1\327"+
    "\12\5\6\0\5\5\2\0\1\55\1\5\1\102\1\5"+
    "\12\0\10\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\2\5\1\330\12\0\10\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\3\5\1\331"+
    "\12\5\6\0\5\5\2\0\1\55\1\5\1\332\1\5"+
    "\12\0\10\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\12\5\1\333\3\5\6\0"+
    "\5\5\2\0\1\55\1\5\1\221\1\5\12\0\10\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\1\5\1\334"+
    "\1\5\12\0\10\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\335\2\5\1\336\3\5"+
    "\1\0\4\5\1\337\11\5\25\0\1\262\61\0\1\265"+
    "\44\0\3\5\5\0\1\5\16\0\1\5\2\0\1\5"+
    "\4\0\2\5\4\0\1\5\11\0\3\61\3\12\2\61"+
    "\1\144\2\61\1\12\1\145\15\61\1\12\2\61\1\12"+
    "\4\61\2\12\4\61\1\12\11\61\1\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\10\5\1\340\5\5"+
    "\6\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\11\5\1\341\4\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\6\5\1\107\7\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\15\5\1\342"+
    "\6\0\5\5\2\0\1\55\1\5\1\343\1\5\12\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\4\5\1\344\11\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\1\5\1\345\6\5\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\1\346\2\5\12\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\55\1\5"+
    "\1\277\1\5\12\0\10\5\1\0\16\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\1\5\1\302"+
    "\14\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\3\5\1\347\12\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\4\5\1\125\11\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\7\5"+
    "\1\350\6\5\6\0\5\5\2\0\1\55\1\75\2\5"+
    "\12\0\10\5\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\10\5\1\351\5\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\2\5"+
    "\1\352\13\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\7\5\1\324\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\4\5\1\102\3\5\1\0\16\5\6\0"+
    "\1\5\1\353\3\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\7\5\1\302\1\0\16\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\10\5\1\354\5\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\1\5\1\143\6\5"+
    "\1\0\16\5\6\0\5\5\2\0\1\55\3\5\12\0"+
    "\1\5\1\355\6\5\1\0\16\5\6\0\5\5\2\0"+
    "\1\55\3\5\12\0\2\5\1\143\5\5\1\0\16\5"+
    "\6\0\5\5\2\0\1\55\1\5\1\175\1\5\12\0"+
    "\10\5\1\0\16\5\6\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\5\5\1\302\10\5\6\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\13\5\1\356"+
    "\2\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\2\5\1\221\13\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\5\5\1\357\2\5\1\0\16\5\6\0"+
    "\5\5\2\0\1\55\3\5\12\0\7\5\1\360\1\0"+
    "\16\5\6\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\10\5\1\361\5\5\6\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\7\5\1\221\6\5\6\0"+
    "\5\5\2\0\1\55\1\5\1\226\1\5\12\0\10\5"+
    "\1\0\16\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\2\11\24\1\1\11"+
    "\5\1\1\11\3\1\1\0\5\1\3\11\43\1\1\11"+
    "\11\0\2\1\1\11\42\1\11\0\37\1\2\0\1\1"+
    "\2\0\1\1\1\0\24\1\5\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 20: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 34: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 8: 
          { 
          }
        case 39: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 242: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 243: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 244: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
