/* The following code was generated by JFlex 1.4.3 on 11/21/16 12:48 AM */

/*
 * Generated on 11/21/16 12:48 AM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  @SuppressWarnings("unused")
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\6\1\0\1\16\1\14\22\0\1\16\1\5\1\13"+
    "\1\15\1\1\1\5\1\5\1\5\1\23\1\23\1\20\1\54\1\5"+
    "\1\55\1\22\1\17\1\3\3\3\4\3\2\3\1\34\1\5\1\14"+
    "\1\57\1\56\1\5\1\15\6\4\10\1\1\53\13\1\1\23\1\7"+
    "\1\23\1\60\1\2\1\0\1\40\1\12\1\41\1\46\1\33\1\30"+
    "\1\36\1\24\1\31\1\51\1\52\1\32\1\42\1\11\1\45\1\26"+
    "\1\43\1\37\1\27\1\25\1\10\1\47\1\35\1\50\1\44\1\1"+
    "\1\21\1\60\1\21\1\5\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\2\2\1\5"+
    "\1\6\1\2\1\7\1\10\22\2\1\7\1\1\1\11"+
    "\1\1\1\12\5\1\1\13\3\1\1\0\1\14\2\2"+
    "\1\15\1\16\14\2\1\17\27\2\1\20\11\0\45\2"+
    "\11\0\1\17\37\2\1\17\2\0\1\21\2\0\1\22"+
    "\1\0\2\2\1\17\12\2\1\23\11\2\5\0\4\2"+
    "\1\23\102\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\304"+
    "\0\u0157\0\u0188\0\304\0\u01b9\0\u01ea\0\304\0\304\0\u021b"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u055c\0\u058d\0\304\0\u05be\0\304\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\304\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\304\0\304\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\365\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\304\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\365\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2028\0\u2584\0\u20bb\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958"+
    "\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78"+
    "\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100"+
    "\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288"+
    "\0\u32b9\0\u32ea\0\u331b\0\u334c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\1\5\1\17\1\6\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\16\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\6\1\36\1\37\2\6\1\40\2\6"+
    "\1\16\1\41\1\5\1\42\1\16\13\43\1\44\45\43"+
    "\6\45\1\46\11\45\1\47\3\45\1\50\3\45\1\51"+
    "\4\45\1\52\23\45\6\53\1\54\15\53\1\55\3\53"+
    "\1\56\4\53\1\57\23\53\62\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\17\6\5\0\3\61\1\7"+
    "\1\61\2\0\4\61\2\0\1\61\6\0\10\61\1\0"+
    "\17\61\6\0\4\6\2\0\1\60\1\6\1\62\1\6"+
    "\11\0\10\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\10\6\1\63\6\6\23\0"+
    "\1\14\61\0\1\64\1\65\41\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\2\6\1\66\4\6\1\67"+
    "\7\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\2\6\1\70\1\71\13\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\5\6\1\72\2\6\1\0\2\6"+
    "\1\73\1\6\1\74\12\6\6\0\4\6\2\0\1\60"+
    "\1\75\2\6\11\0\10\6\1\0\2\6\1\76\5\6"+
    "\1\77\6\6\6\0\4\6\2\0\1\60\1\6\1\100"+
    "\1\6\11\0\10\6\1\0\5\6\1\101\3\6\1\102"+
    "\5\6\6\0\4\6\2\0\1\60\3\6\11\0\5\6"+
    "\1\103\2\6\1\0\3\6\1\104\13\6\6\0\4\6"+
    "\2\0\1\60\1\6\1\105\1\6\11\0\10\6\1\0"+
    "\5\6\1\106\1\107\2\6\1\110\1\111\1\112\3\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\113\7\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\7\6\1\114\1\0\2\6\1\115\14\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\7\6\1\116\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\6\1\117"+
    "\6\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\10\6\1\120\6\6\6\0\4\6"+
    "\2\0\1\60\1\121\2\6\11\0\10\6\1\0\3\6"+
    "\1\122\13\6\6\0\4\6\2\0\1\60\1\123\2\6"+
    "\11\0\10\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\2\6\1\124\11\0\2\6\1\125\5\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\3\6\1\126"+
    "\1\6\1\127\1\6\1\130\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\3\6\1\131"+
    "\13\6\63\0\1\16\2\0\13\43\1\0\45\43\6\45"+
    "\1\0\11\45\1\0\3\45\1\0\3\45\1\0\4\45"+
    "\1\0\23\45\17\0\1\132\66\0\1\133\60\0\1\134"+
    "\3\0\1\135\64\0\1\136\23\0\6\53\1\0\15\53"+
    "\1\0\3\53\1\0\4\53\1\0\23\53\25\0\1\137"+
    "\60\0\1\140\3\0\1\141\64\0\1\142\33\0\1\143"+
    "\50\0\5\61\2\0\4\61\2\0\1\61\6\0\10\61"+
    "\1\0\17\61\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\5\6\1\144\2\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\11\6\1\145\5\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\3\6\1\146\13\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\2\6\1\147\5\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\3\6\1\150"+
    "\13\6\6\0\4\6\2\0\1\60\3\6\11\0\1\6"+
    "\1\151\6\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\1\6\1\152\15\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\102\12\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\1\153\7\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\1\6\1\154\1\6\11\0\10\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\10\6"+
    "\1\155\6\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\2\6\1\156\14\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\3\6\1\157\4\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\2\6\1\160"+
    "\5\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\6\1\161\6\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\5\6\1\162"+
    "\11\6\6\0\4\6\2\0\1\60\3\6\11\0\1\6"+
    "\1\163\6\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\2\6\1\164\5\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\1\165\2\6\11\0\10\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\1\6\1\145\15\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\3\6\1\166\13\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\2\6\1\167\4\6"+
    "\1\170\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\7\6\1\171\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\1\6\1\172\1\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\3\6\1\173\13\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\6\1\174\6\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\1\6\1\175\6\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\1\11\1\176\1\6"+
    "\11\0\6\6\1\177\1\200\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\6\6\1\201\1\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\2\6"+
    "\1\202\5\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\7\6\1\203\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\3\6\1\204\4\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\1\6"+
    "\1\205\6\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\102\6\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\3\6\1\206\4\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\6\6\1\207\1\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\12\6\1\210\4\6"+
    "\32\0\1\211\61\0\1\212\64\0\1\213\63\0\1\214"+
    "\50\0\1\215\61\0\1\216\64\0\1\217\63\0\1\220"+
    "\26\0\2\221\5\0\1\221\15\0\1\221\2\0\1\221"+
    "\4\0\2\221\4\0\1\221\13\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\222\6\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\7\6\1\223\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\1\6\1\224\1\6"+
    "\11\0\10\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\7\6\1\225\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\1\6\1\226"+
    "\15\6\6\0\4\6\2\0\1\60\3\6\11\0\1\227"+
    "\7\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\5\6\1\230\11\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\7\6\1\231\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\4\6\1\125\12\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\5\6\1\102\11\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\7\6\1\232\1\0\3\6"+
    "\1\233\13\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\1\6\1\234\5\6\1\235\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\10\6\1\236"+
    "\6\6\6\0\4\6\2\0\1\60\3\6\11\0\7\6"+
    "\1\237\1\0\17\6\6\0\4\6\2\0\1\60\2\6"+
    "\1\240\11\0\10\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\5\6\1\241\2\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\6\1\242"+
    "\6\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\3\6\1\125\13\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\6\6\1\102\1\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\10\6\1\243\6\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\4\6\1\244\12\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\2\6"+
    "\1\245\14\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\7\6\1\246\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\2\6\1\247\5\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\1\250\2\6\11\0\10\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\2\6\1\251\14\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\3\6\1\252\4\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\5\6\1\253\2\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\12\6\1\111\4\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\254\6\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\2\6\1\255"+
    "\5\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\256\14\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\7\6\1\257\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\5\6\1\260"+
    "\2\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\6\1\261\6\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\1\6\1\230\6\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\3\6\1\262\13\6\33\0\1\263\66\0\1\264"+
    "\57\0\1\212\47\0\1\265\64\0\1\266\66\0\1\267"+
    "\57\0\1\216\47\0\1\270\41\0\2\271\5\0\1\271"+
    "\15\0\1\271\2\0\1\271\4\0\2\271\4\0\1\271"+
    "\13\0\1\6\1\272\2\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\3\6\1\102\4\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\3\6\1\273\4\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\3\6"+
    "\1\274\4\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\5\6\1\275\11\6\6\0"+
    "\1\6\1\276\2\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\3\6\1\102\13\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\5\6\1\277\11\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\5\6\1\300"+
    "\2\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\6\6\1\166\1\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\3\6\1\301"+
    "\13\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\2\6\1\126\14\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\2\6\1\302\14\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\2\6"+
    "\1\111\14\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\11\6\1\230\5\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\303\6\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\7\6\1\102\7\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\304\14\6\6\0\1\6"+
    "\1\305\2\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\7\6"+
    "\1\102\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\306\14\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\1\307\7\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\2\6\1\310\14\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\311\2\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\1\6\1\312\6\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\5\6\1\313\11\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\5\6\1\227\2\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\5\6\1\314\2\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\7\6\1\307\7\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\2\6\1\315\14\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\10\6\1\316\6\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\317\2\6\1\0\17\6\6\0\1\6"+
    "\1\320\2\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\17\6\34\0\1\212\4\0\1\264\43\0\1\321\42\0"+
    "\1\265\1\322\2\265\1\322\2\0\3\265\2\0\1\322"+
    "\1\0\1\265\1\322\1\0\2\322\10\265\1\322\17\265"+
    "\2\322\1\0\1\322\30\0\1\216\4\0\1\267\43\0"+
    "\1\323\42\0\1\270\1\324\2\270\1\324\2\0\3\270"+
    "\2\0\1\324\1\0\1\270\1\324\1\0\2\324\10\270"+
    "\1\324\17\270\2\324\1\0\1\324\4\0\2\325\5\0"+
    "\1\325\15\0\1\325\2\0\1\325\4\0\2\325\4\0"+
    "\1\325\13\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\6\6\1\326\10\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\4\6\1\327\3\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\5\6\1\330\2\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\3\6\1\307\13\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\7\6\1\331\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\3\6"+
    "\1\332\13\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\1\6\1\333\15\6\6\0\4\6\2\0"+
    "\1\60\1\6\1\334\1\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\6\1\335"+
    "\6\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\145\2\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\1\6\1\336\6\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\4\6\1\337\7\6\1\340\2\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\3\6\1\341"+
    "\13\6\6\0\4\6\2\0\1\60\1\6\1\102\1\6"+
    "\11\0\10\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\2\6\1\342\11\0\10\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\3\6\1\343"+
    "\13\6\6\0\4\6\2\0\1\60\3\6\11\0\5\6"+
    "\1\126\2\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\1\6\1\344\1\6\11\0\10\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\12\6"+
    "\1\345\4\6\6\0\4\6\2\0\1\60\1\6\1\223"+
    "\1\6\11\0\10\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\1\6\1\346\1\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\6\1\347"+
    "\2\6\1\350\3\6\1\0\4\6\1\351\12\6\24\0"+
    "\1\265\60\0\1\270\44\0\2\6\5\0\1\6\15\0"+
    "\1\6\2\0\1\6\4\0\2\6\4\0\1\6\13\0"+
    "\4\6\2\0\1\60\1\352\2\6\11\0\10\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\10\6\1\353\6\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\11\6\1\354\5\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\6\6"+
    "\1\107\10\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\16\6\1\355\6\0\4\6\2\0\1\60"+
    "\1\6\1\356\1\6\11\0\10\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\357\12\6\6\0\1\6\1\360\2\6\2\0\1\60"+
    "\3\6\11\0\3\6\1\102\4\6\1\0\17\6\6\0"+
    "\1\6\1\361\2\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\5\6\1\362\11\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\3\6\1\102\4\6\1\0\11\6"+
    "\1\363\5\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\1\6\1\364\6\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\1\365\2\6\11\0\10\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\1\6\1\366\1\6\11\0\10\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\1\6\1\307\15\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\3\6\1\367\13\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\4\6\1\126\12\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\7\6\1\370\7\6\6\0\4\6"+
    "\2\0\1\60\1\75\2\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\10\6\1\371\6\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\7\6\1\372\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\2\6\1\373\14\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\7\6\1\332"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\4\6\1\102\3\6\1\0\17\6\6\0\1\6\1\374"+
    "\2\6\2\0\1\60\3\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\7\6\1\307"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\4\6\1\375\7\6\1\376\2\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\377\7\6\1\u0100\2\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\11\6\1\u0101\5\6\6\0"+
    "\4\6\2\0\1\60\2\6\1\73\11\0\10\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\10\6\1\u0102\6\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\145\6\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\1\6\1\223\6\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\1\6\1\u0103\6\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\2\6\1\145\5\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\1\6\1\176\1\6\11\0"+
    "\10\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\242\14\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\5\6\1\307"+
    "\11\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\15\6\1\u0104\1\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\3\6\1\u0105\4\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\11\6"+
    "\1\363\5\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\3\6\1\u0106\4\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\11\6\1\u0107\5\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\6\6\1\u0108"+
    "\1\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\223\14\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\5\6\1\u0109\2\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\3\6\11\0\7\6"+
    "\1\u010a\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\12\6\1\102\4\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\12\6\1\u010b"+
    "\4\6\6\0\4\6\2\0\1\60\2\6\1\u010c\11\0"+
    "\10\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\u010d\2\6\1\0\17\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\10\6\1\u010e"+
    "\6\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\7\6\1\223\7\6\6\0\1\6\1\u010f\2\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\u010b\12\6\6\0\4\6\2\0\1\60\1\6\1\245"+
    "\1\6\11\0\10\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\1\6\1\227\1\6\11\0\10\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\3\6\11\0\1\6\1\u0110"+
    "\3\6\1\u0111\2\6\1\0\17\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\2\6\1\u0112\14\6"+
    "\6\0\4\6\2\0\1\60\1\6\1\u0113\1\6\11\0"+
    "\10\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\3\6\1\u0114\13\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\3\6\1\u0115\4\6\1\0"+
    "\17\6\6\0\4\6\2\0\1\60\1\6\1\u0116\1\6"+
    "\11\0\10\6\1\0\17\6\6\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\u0117\6\6\1\0\17\6\6\0"+
    "\4\6\2\0\1\60\3\6\11\0\3\6\1\u0118\4\6"+
    "\1\0\17\6\6\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\3\6\1\u0119\13\6\6\0\4\6\2\0"+
    "\1\60\3\6\11\0\4\6\1\u011a\3\6\1\0\17\6"+
    "\6\0\4\6\2\0\1\60\1\6\1\u011b\1\6\11\0"+
    "\10\6\1\0\17\6\6\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\10\6\1\u011c\6\6\6\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\4\6\1\245"+
    "\12\6\6\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\2\6\1\155\14\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13181];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\24\1\1\11\1\1\1\11\5\1\1\11"+
    "\3\1\1\0\3\1\2\11\44\1\1\11\11\0\45\1"+
    "\11\0\41\1\2\0\1\1\2\0\1\1\1\0\27\1"+
    "\5\0\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  @SuppressWarnings("unused")
private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 20: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 21: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 22: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 23: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 24: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 25: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 26: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 27: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 28: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 29: break;
        case 17: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 30: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 31: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 32: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 33: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 34: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 35: break;
        case 9: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 36: break;
        case 1: 
          { 
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 285: break;
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 286: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 287: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 288: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
