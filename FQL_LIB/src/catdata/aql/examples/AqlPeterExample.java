package catdata.aql.examples;

public class AqlPeterExample extends AqlExample {

	@Override
	public String getName() {
		return "Pharma Colim";
	}

	@Override
	public String getText() {
		return s;
	}
	
	String s = "//Example courtesy of Peter Gates"
			+ "\n"
			+ "\ntypeside Type = literal {"
			+ "\n	java_types	"
			+ "\n		dom = \"java.lang.Object\""
			+ "\n	java_constants"
			+ "\n		dom = \"return input[0]\""
			+ "\n}"
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\nschema S = literal : Type {"
			+ "\n	entities"
			+ "\n		O P T"
			+ "\n 	foreign_keys"
			+ "\n		f: O -> P"
			+ "\n		g: O -> T"
			+ "\n} "
			+ "\n"
			+ "\nschema S1 = literal : Type {"
			+ "\n	entities "
			+ "\n		Observation Person Gender ObsType"
			+ "\n	foreign_keys "
			+ "\n		f: Observation -> Person"
			+ "\n		h: Person -> Gender"
			+ "\n		g: Observation -> ObsType"
			+ "\n	attributes	"
			+ "\n	     Person_att: Person -> dom"
			+ "\n	     Gender_att: Gender -> dom"
			+ "\n	     ObsType_att: ObsType -> dom"
			+ "\n} "
			+ "\n"
			+ "\nschema S2 = literal : Type {"
			+ "\n	entities "
			+ "\n		Observation Patient Method Type"
			+ "\n	foreign_keys "
			+ "\n		f : Observation -> Patient"
			+ "\n		g1: Observation -> Method"
			+ "\n		g2: Method -> Type"
			+ "\n	attributes"
			+ "\n         	Method_att: Method -> dom"
			+ "\n	     Patient_att: Patient -> dom"
			+ "\n	     Type_att: Type -> dom"
			+ "\n}"
			+ "\n"
			+ "\nmapping F1 = literal : S -> S1 {"
			+ "\n	entities "
			+ "\n		O -> Observation"
			+ "\n		P -> Person"
			+ "\n		T -> ObsType"
			+ "\n	foreign_keys "
			+ "\n		f -> f"
			+ "\n		g -> g"
			+ "\n} "
			+ "\n"
			+ "\nmapping F2 = literal : S -> S2 {"
			+ "\n	entities"
			+ "\n		O -> Observation"
			+ "\n		P -> Patient"
			+ "\n		T -> Type"
			+ "\n	foreign_keys "
			+ "\n		f -> f"
			+ "\n		g -> g1.g2"
			+ "\n} "
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//Pushout schema, written out explicitly here by hand"
			+ "\nschema T = literal : Type {"
			+ "\n	entities "
			+ "\n		O P G T M"
			+ "\n	foreign_keys "
			+ "\n		f : O -> P"
			+ "\n		h : P -> G		"
			+ "\n		g1: O -> M "
			+ "\n		g2: M -> T"
			+ "\n	attributes	"
			+ "\n       	M_att : M -> dom"
			+ "\n		G_att : G -> dom"
			+ "\n		T_att1: T -> dom"
			+ "\n		T_att2: T -> dom"
			+ "\n		P_att1: P -> dom"
			+ "\n		P_att2: P -> dom"
			+ "\n} "
			+ "\n"
			+ "\nmapping G1 = literal : S1 -> T {"
			+ "\n	entities "
			+ "\n		Observation -> O"
			+ "\n		Person -> P"
			+ "\n		ObsType -> T"
			+ "\n		Gender -> G"
			+ "\n	foreign_keys "
			+ "\n		f -> f "
			+ "\n		g -> g1.g2"
			+ "\n		h -> h"
			+ "\n	attributes"
			+ "\n		Person_att  -> lambda x. P_att1(x)"
			+ "\n		Gender_att  -> lambda x. G_att(x)"
			+ "\n		ObsType_att -> lambda x. T_att1(x)"
			+ "\n} "
			+ "\n"
			+ "\nmapping G2 = literal : S2 -> T {"
			+ "\n	entities"
			+ "\n		Observation -> O"
			+ "\n		Patient -> P"
			+ "\n		Method -> M"
			+ "\n		Type -> T"
			+ "\n	foreign_keys "
			+ "\n		f  -> f"
			+ "\n		g1 -> g1"
			+ "\n		g2 -> g2"
			+ "\n	attributes"
			+ "\n       	Method_att  -> lambda x. M_att(x)"
			+ "\n		Patient_att -> lambda x. P_att2(x)"
			+ "\n		Type_att    -> lambda x. T_att2(x)		"
			+ "\n} "
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\ninstance I1 = literal : S1 {"
			+ "\n	generators"
			+ "\n		one two three : Observation"
			+ "\n		Peter Paul : Person"
			+ "\n	    	M F :Gender"
			+ "\n	    	BloodPressure BodyWeight HeartRate: ObsType"
			+ "\n	equations"
			+ "\n		Peter.Person_att = xPeter Paul.Person_att = xPaul"
			+ "\n		M.Gender_att = xM F.Gender_att = xF"
			+ "\n		BloodPressure.ObsType_att = xBloodPressure"
			+ "\n		BodyWeight.ObsType_att = xBodyWeight"
			+ "\n		HeartRate.ObsType_att = xHeartRate"
			+ "\n		one.f = Peter two.f = Peter three.f = Paul"
			+ "\n		Peter.h = M Paul.h = M"
			+ "\n		one.g = BloodPressure two.g = BodyWeight three.g = HeartRate"
			+ "\n} "
			+ "\n"
			+ "\ninstance I2 = literal : S2 {"
			+ "\n	generators"
			+ "\n		o1 o2 o3 o4 : Observation"
			+ "\n		Pete Jane : Patient"
			+ "\n		m1 m2 m3 m4 : Method"
			+ "\n		BP Wt : Type"
			+ "\n	equations"
			+ "\n	     Pete.Patient_att = xPete Jane.Patient_att = xJane"
			+ "\n	     BP.Type_att = xBloodPressure Wt.Type_att = xBodyWeight"
			+ "\n	     o1.f = Pete o2.f = Pete o3.f = Jane o4.f = Jane"
			+ "\n	     o1.g1 = m1 o2.g1 = m2 o3.g1 = m3 o4.g1 = m1"
			+ "\n	     m1.g2 = BP m2.g2 = BP m3.g2 = Wt m4.g2 = Wt"
			+ "\n} "
			+ "\n"
			+ "\ninstance I = literal : S {"
			+ "\n	generators "
			+ "\n	  	Peter: P "
			+ "\n	  	BloodPressure BodyWeight:T"
			+ "\n} "
			+ "\n"
			+ "\ntransform a1 = literal : sigma F1 I -> I1 {"
			+ "\n		generators "
			+ "\n			Peter -> Peter"
			+ "\n			BloodPressure -> BloodPressure"
			+ "\n			BodyWeight -> BodyWeight"
			+ "\n} "
			+ "\n"
			+ "\ntransform a2 = literal : sigma F2 I -> I2 {"
			+ "\n		generators"
			+ "\n			Peter -> Pete"
			+ "\n			BloodPressure -> BP "
			+ "\n			BodyWeight-> Wt"
			+ "\n} "
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\ntransform b1 = sigma G1 a1"
			+ "\ntransform b2 = sigma G2 a2"
			+ "\n"
			+ "\n//answer = pushout b1 b2"
			+ "\n";



}
