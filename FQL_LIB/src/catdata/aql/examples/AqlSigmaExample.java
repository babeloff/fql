package catdata.aql.examples;

public class AqlSigmaExample extends AqlExample {

	@Override
	public String getName() {
		return "Sigma";
	}

	@Override
	public String getText() {
		return s;
	}
	
	String s = "typeside Type = literal {"
			+ "\n	types "
			+ "\n		String"
			+ "\n	constants"
			+ "\n		gecko frog human cow horse dolphin fish : String"
			+ "\n}"
			+ "\n"
			+ "\nschema C = literal : Type {"
			+ "\n	entities "
			+ "\n		Amphibian"
			+ "\n		LandAnimal"
			+ "\n		WaterAnimal"
			+ "\n	foreign_keys"
			+ "\n		IsAL: Amphibian -> LandAnimal"
			+ "\n		IsAW: Amphibian -> WaterAnimal"
			+ "\n	attributes"
			+ "\n		attA: Amphibian -> String "
			+ "\n		attL: LandAnimal -> String "
			+ "\n		attW: WaterAnimal -> String"
			+ "\n}"
			+ "\n"
			+ "\ninstance I = literal : C {"
			+ "\n	generators "
			+ "\n		a1 a2 : Amphibian"
			+ "\n		l1 l2 l3 l4 l5 : LandAnimal"
			+ "\n		w1 w2 w3 w4 : WaterAnimal"
			+ "\n	equations"
			+ "\n		 attA(a1) = gecko attA(a2) = frog"
			+ "\n		 attL(l1) = gecko attL(l2) = frog "
			+ "\n		 attL(l3) = human attL(l4) = cow "
			+ "\n		 attL(l5) = horse attW(w1) = fish "
			+ "\n		 attW(w2) = gecko attW(w3) = frog "
			+ "\n		 attW(w4) = dolphin IsAL(a1) = l1 "
			+ "\n		 IsAL(a2) = l2 IsAW(a1) = w2 IsAW(a2) = w3"
			+ "\n} "
			+ "\n"
			+ "\nschema D = literal : Type {"
			+ "\n	entities "
			+ "\n		yAmphibian"
			+ "\n		yLandAnimal"
			+ "\n		yWaterAnimal"
			+ "\n		yAnimal"
			+ "\n	foreign_keys"
			+ "\n		yIsAL:yAmphibian->yLandAnimal"
			+ "\n		yIsAW:yAmphibian->yWaterAnimal"
			+ "\n		yIsALL:yLandAnimal->yAnimal"
			+ "\n		yIsAWW:yWaterAnimal->yAnimal"
			+ "\n	path_equations"
			+ "\n		yIsAL.yIsALL = yIsAW.yIsAWW"
			+ "\n	attributes"
			+ "\n		yattA:yAmphibian->String "
			+ "\n		yattL:yLandAnimal->String "
			+ "\n		yattW:yWaterAnimal->String"
			+ "\n} "
			+ "\n"
			+ "\nmapping F = literal : C -> D {"
			+ "\n	entities "
			+ "\n		Amphibian->yAmphibian"
			+ "\n		LandAnimal->yLandAnimal"
			+ "\n		WaterAnimal->yWaterAnimal"
			+ "\n	foreign_keys"
			+ "\n		IsAL -> yIsAL"
			+ "\n		IsAW -> yIsAW"
			+ "\n	attributes"
			+ "\n		attW -> lambda x. yattW(x)"
			+ "\n		attL -> lambda x. yattL(x)"
			+ "\n		attA -> lambda x. yattA(x)"
			+ "\n} "
			+ "\n"
			+ "\ninstance J = sigma F I"
			+ "\n"
			+ "\n"
			+ "\ninstance I1 = literal : C {"
			+ "\n	generators "
			+ "\n		xa1 : Amphibian"
			+ "\n		xl1 xl2 xl3 xl4 : LandAnimal"
			+ "\n		xw1 xw2 xw3: WaterAnimal"
			+ "\n	equations"
			+ "\n		attL(xl1) = gecko attL(xl2) = frog"
			+ "\n		attL(xl3) = human attL(xl4) = cow"
			+ "\n		attW(xw1) = fish attW(xw2) = gecko"
			+ "\n		attW(xw3) = frog IsAL(xa1) = xl1"
			+ "\n		IsAW(xa1) = xw2 attA(xa1) = gecko"
			+ "\n} "
			+ "\n"
			+ "\ntransform t = literal : I1 -> I {"
			+ "\n	generators "
			+ "\n		xa1 -> a1"
			+ "\n		xl1 -> l1"
			+ "\n		xl2 -> l2"
			+ "\n		xl3 -> l3"
			+ "\n		xl4 -> l4"
			+ "\n		xw1 -> w1"
			+ "\n		xw2 -> w2"
			+ "\n		xw3 -> w3"
			+ "\n} "
			+ "\n"
			+ "\ntransform u = sigma F t"
			+ "\n";



}
