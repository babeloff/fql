/* The following code was generated by JFlex 1.4.3 on 9/10/15 9:54 PM */

/*
 * Generated on 9/10/15 9:54 PM
 */
package fql_lib.opl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class OplTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\53\1\24"+
    "\1\54\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\56\1\55\1\24\1\16\6\5\24\1\1\25\1\10\1\25\1\57"+
    "\1\2\1\0\1\41\1\13\1\47\1\40\1\35\1\32\1\43\1\26"+
    "\1\33\1\46\1\1\1\34\1\50\1\44\1\45\1\30\1\52\1\12"+
    "\1\31\1\27\1\11\1\42\1\37\1\1\1\51\1\1\1\22\1\57"+
    "\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\12\1\1\6\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\1\1\2\4\1\14\1\15\1\16"+
    "\17\1\1\17\11\0\1\1\1\4\1\20\1\4\17\1"+
    "\11\0\1\4\10\1\1\21\4\1\2\0\1\22\2\0"+
    "\1\23\1\0\1\4\4\1\1\24\6\1\5\0\1\4"+
    "\30\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\220\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\220\0\220\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u0390"+
    "\0\u03c0\0\220\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\220"+
    "\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\220\0\220\0\220\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\220\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\220\0\u0b40"+
    "\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\300\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\300\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560"+
    "\0\u1590\0\u15c0\0\u12c0\0\u15f0\0\u1350\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980"+
    "\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\2\5\1\11\2\4\1\12\1\13\1\14\1\15\2\4"+
    "\1\15\1\5\1\16\1\17\1\20\1\21\2\5\1\22"+
    "\1\14\1\5\1\23\2\5\1\24\2\5\1\25\1\5"+
    "\1\26\2\5\1\14\1\27\1\4\1\30\1\14\7\31"+
    "\1\32\11\31\1\33\4\31\1\34\3\31\1\35\4\31"+
    "\1\36\20\31\7\37\1\40\16\37\1\41\3\37\1\42"+
    "\4\37\1\43\20\37\61\0\5\5\2\0\1\44\3\5"+
    "\12\0\10\5\1\0\14\5\5\0\3\45\2\6\1\45"+
    "\2\0\4\45\2\0\1\45\7\0\10\45\1\0\14\45"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\10\5\1\0"+
    "\5\5\1\46\6\5\5\0\7\11\1\47\1\50\3\11"+
    "\1\51\43\11\17\0\1\12\60\0\1\52\1\53\37\0"+
    "\5\5\2\0\1\44\1\5\1\54\1\5\12\0\1\55"+
    "\7\5\1\0\14\5\6\0\5\5\2\0\1\44\1\5"+
    "\1\56\1\5\12\0\10\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\5\5\1\57\2\5\1\0"+
    "\2\5\1\60\3\5\1\61\3\5\1\62\1\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\10\5\1\0\6\5"+
    "\1\63\5\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\3\5\1\64\7\5\1\65\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\7\5\1\66\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\7\5\1\67"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\2\5\1\70\11\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\10\5\1\0\2\5\1\71\3\5"+
    "\1\72\5\5\62\0\1\14\2\0\7\31\1\0\11\31"+
    "\1\0\4\31\1\0\3\31\1\0\4\31\1\0\20\31"+
    "\20\0\1\73\66\0\1\74\57\0\1\75\3\0\1\76"+
    "\63\0\1\77\20\0\7\37\1\0\16\37\1\0\3\37"+
    "\1\0\4\37\1\0\20\37\27\0\1\100\57\0\1\101"+
    "\3\0\1\102\63\0\1\103\31\0\1\104\46\0\6\45"+
    "\2\0\4\45\2\0\1\45\7\0\10\45\1\0\14\45"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\3\5\1\105"+
    "\4\5\1\0\14\5\5\0\10\47\1\106\3\47\1\107"+
    "\47\47\1\11\1\47\1\11\1\0\1\11\1\110\3\11"+
    "\12\47\1\11\2\47\1\11\11\47\1\11\13\47\1\0"+
    "\5\5\2\0\1\44\3\5\12\0\10\5\1\0\2\5"+
    "\1\111\11\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\7\5\1\112\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\7\5\1\113\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\10\5\1\0\4\5\1\114"+
    "\7\5\6\0\5\5\2\0\1\44\3\5\12\0\1\5"+
    "\1\115\6\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\1\5\1\116\1\5\12\0\10\5\1\0\14\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\10\5\1\0\11\5"+
    "\1\117\2\5\6\0\5\5\2\0\1\44\1\5\1\120"+
    "\1\5\12\0\10\5\1\0\14\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\10\5\1\0\2\5\1\121\11\5"+
    "\6\0\5\5\2\0\1\44\1\122\2\5\12\0\10\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\6\5\1\123\1\5\1\0\14\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\10\5\1\0\5\5\1\124\6\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\10\5\1\0"+
    "\3\5\1\125\10\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\2\5\1\126\5\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\10\5\1\0\1\5\1\127"+
    "\12\5\34\0\1\130\60\0\1\131\63\0\1\132\62\0"+
    "\1\133\47\0\1\134\60\0\1\135\63\0\1\136\62\0"+
    "\1\137\23\0\3\140\5\0\1\140\16\0\1\140\2\0"+
    "\1\140\2\0\2\140\5\0\1\140\11\0\5\5\2\0"+
    "\1\44\3\5\12\0\10\5\1\0\2\5\1\60\11\5"+
    "\5\0\7\47\1\0\53\47\3\141\2\47\1\106\2\47"+
    "\1\141\1\107\15\47\1\141\2\47\1\141\2\47\2\141"+
    "\5\47\1\141\10\47\1\0\5\5\2\0\1\44\3\5"+
    "\12\0\10\5\1\0\5\5\1\142\6\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\10\5\1\0\6\5\1\143"+
    "\5\5\6\0\5\5\2\0\1\44\3\5\12\0\3\5"+
    "\1\144\4\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\10\5\1\0\11\5\1\145\2\5\6\0"+
    "\5\5\2\0\1\44\1\146\2\5\12\0\10\5\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\1\5"+
    "\1\147\6\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\2\5\1\150\12\0\10\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\10\5\1\0\2\5\1\151"+
    "\11\5\6\0\5\5\2\0\1\44\3\5\12\0\6\5"+
    "\1\152\1\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\10\5\1\0\2\5\1\153\11\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\1\5\1\145\6\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\7\5\1\154\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\10\5\1\0\2\5\1\155\11\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\2\5\1\156\5\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\7\5\1\121\1\0\14\5\35\0\1\157\65\0\1\160"+
    "\56\0\1\131\45\0\1\161\64\0\1\162\65\0\1\163"+
    "\56\0\1\135\45\0\1\164\37\0\3\165\5\0\1\165"+
    "\16\0\1\165\2\0\1\165\2\0\2\165\5\0\1\165"+
    "\10\0\3\47\3\166\2\47\1\106\2\47\1\166\1\107"+
    "\15\47\1\166\2\47\1\166\2\47\2\166\5\47\1\166"+
    "\10\47\1\0\5\5\2\0\1\44\3\5\12\0\3\5"+
    "\1\167\4\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\1\5\1\170\1\5\12\0\10\5\1\0\14\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\7\5\1\171\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\10\5"+
    "\1\0\2\5\1\152\11\5\6\0\5\5\2\0\1\44"+
    "\1\5\1\172\1\5\12\0\10\5\1\0\14\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\3\5\1\173\4\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\6\5\1\174\5\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\6\5\1\175\1\5\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\1\5\1\176"+
    "\6\5\1\0\14\5\6\0\5\5\2\0\1\44\1\5"+
    "\1\177\1\5\12\0\10\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\3\5\1\200\4\5\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\5\5"+
    "\1\201\2\5\1\0\14\5\36\0\1\131\4\0\1\160"+
    "\41\0\1\202\40\0\1\161\1\203\3\161\1\203\2\0"+
    "\3\161\2\0\1\203\1\0\1\161\1\203\1\0\3\203"+
    "\10\161\1\203\14\161\2\203\1\0\1\203\32\0\1\135"+
    "\4\0\1\163\41\0\1\204\40\0\1\164\1\205\3\164"+
    "\1\205\2\0\3\164\2\0\1\205\1\0\1\164\1\205"+
    "\1\0\3\205\10\164\1\205\14\164\2\205\1\0\1\205"+
    "\4\0\3\206\5\0\1\206\16\0\1\206\2\0\1\206"+
    "\2\0\2\206\5\0\1\206\10\0\3\47\3\207\2\47"+
    "\1\106\2\47\1\207\1\107\15\47\1\207\2\47\1\207"+
    "\2\47\2\207\5\47\1\207\10\47\1\0\5\5\2\0"+
    "\1\44\3\5\12\0\2\5\1\210\1\5\1\211\3\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\12\5\1\152\1\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\10\5\1\0\5\5\1\212\6\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\10\5\1\0"+
    "\2\5\1\213\11\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\6\5\1\147\1\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\6\5\1\173\1\5\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\5\5"+
    "\1\214\2\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\10\5\1\0\2\5\1\215\11\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\10\5\1\0\10\5"+
    "\1\216\3\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\5\5\1\217\6\5\25\0\1\161\57\0"+
    "\1\164\42\0\3\5\5\0\1\5\16\0\1\5\2\0"+
    "\1\5\2\0\2\5\5\0\1\5\10\0\3\47\3\11"+
    "\2\47\1\106\2\47\1\11\1\107\15\47\1\11\2\47"+
    "\1\11\2\47\2\11\5\47\1\11\10\47\1\0\5\5"+
    "\2\0\1\44\1\5\1\220\1\5\12\0\10\5\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\10\5"+
    "\1\0\6\5\1\221\5\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\1\5\1\222\6\5\1\0\14\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\1\5\1\223\6\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\3\5\12\0"+
    "\10\5\1\0\6\5\1\224\5\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\1\5\1\225\6\5\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\1\5\1\226\1\5\12\0"+
    "\10\5\1\0\14\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\10\5\1\0\4\5\1\152\7\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\7\5\1\227\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\1\5\1\230\1\5\12\0"+
    "\10\5\1\0\14\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\10\5\1\0\2\5\1\231\11\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\7\5\1\152\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\10\5\1\0"+
    "\5\5\1\147\6\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\10\5\1\0\6\5\1\232\5\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\5\5\1\233\2\5\1\0"+
    "\14\5\6\0\5\5\2\0\1\44\3\5\12\0\3\5"+
    "\1\152\4\5\1\0\14\5\6\0\5\5\2\0\1\44"+
    "\3\5\12\0\10\5\1\0\11\5\1\152\2\5\6\0"+
    "\5\5\2\0\1\44\3\5\12\0\1\5\1\234\6\5"+
    "\1\0\14\5\6\0\5\5\2\0\1\44\1\5\1\227"+
    "\1\5\12\0\10\5\1\0\14\5\6\0\5\5\2\0"+
    "\1\44\3\5\12\0\2\5\1\235\5\5\1\0\14\5"+
    "\6\0\5\5\2\0\1\44\3\5\12\0\5\5\1\236"+
    "\2\5\1\0\14\5\6\0\5\5\2\0\1\44\3\5"+
    "\12\0\1\5\1\152\6\5\1\0\14\5\6\0\5\5"+
    "\2\0\1\44\3\5\12\0\10\5\1\0\6\5\1\237"+
    "\5\5\6\0\5\5\2\0\1\44\3\5\12\0\10\5"+
    "\1\0\5\5\1\152\6\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\4\1\2\11\14\1\1\11"+
    "\5\1\1\11\3\1\1\0\4\1\3\11\17\1\1\11"+
    "\11\0\2\1\1\11\20\1\11\0\16\1\2\0\1\1"+
    "\2\0\1\1\1\0\14\1\5\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public OplTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null; //new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OplTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OplTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 16: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 34: break;
        case 20: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 8: 
          { 
          }
        case 39: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 160: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 161: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 162: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
