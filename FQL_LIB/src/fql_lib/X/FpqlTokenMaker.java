/* The following code was generated by JFlex 1.4.3 on 11/18/14 1:27 PM */

/*
 * Generated on 11/18/14 1:27 PM
 */
package fql_lib.X;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class FpqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\24\1\24"+
    "\1\62\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\64\1\63\1\24\1\16\1\44\1\5\1\45\1\5\1\46\1\5"+
    "\2\1\1\40\4\1\1\41\4\1\1\42\1\43\6\1\1\25\1\10"+
    "\1\25\1\15\1\2\1\0\1\47\1\13\1\50\1\53\1\35\1\32"+
    "\1\55\1\26\1\33\2\1\1\34\1\54\1\12\1\51\1\30\1\61"+
    "\1\52\1\31\1\27\1\11\1\60\1\37\1\1\1\57\1\56\1\22"+
    "\1\15\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\7\1\1\7\11\1\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\2\1\2\4\1\14\1\15\1\16"+
    "\1\1\1\17\26\1\1\20\11\0\1\1\1\4\1\21"+
    "\1\4\23\1\11\0\1\1\1\4\15\1\2\0\1\22"+
    "\2\0\1\23\1\0\1\24\1\4\11\1\5\0\1\4"+
    "\24\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\237\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\237\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\237\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\237"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\237\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\237"+
    "\0\237\0\237\0\u08b2\0\324\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\237\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\237\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\324\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1942\0\u1c92"+
    "\0\u19e1\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad"+
    "\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\4\1\15"+
    "\2\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\25\1\26\1\27\6\5\1\30\1\31"+
    "\1\5\1\32\1\33\1\34\3\5\1\35\1\5\1\36"+
    "\1\4\1\25\7\37\1\40\11\37\1\41\4\37\1\42"+
    "\3\37\1\43\4\37\1\44\25\37\7\45\1\46\16\45"+
    "\1\47\3\45\1\50\4\45\1\51\25\45\66\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\23\5\3\0"+
    "\3\53\2\6\1\53\2\0\4\53\2\0\1\53\7\0"+
    "\10\53\1\0\23\53\4\0\5\5\2\0\1\52\1\5"+
    "\1\54\1\5\12\0\10\5\1\0\23\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\12\5\1\55"+
    "\10\5\3\0\7\12\1\56\1\57\3\12\1\60\50\12"+
    "\17\0\1\13\65\0\1\61\1\62\44\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\12\5\1\63\10\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\1\5\1\64"+
    "\6\5\1\0\13\5\1\65\4\5\1\66\2\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\5\5\1\64\2\5"+
    "\1\0\10\5\1\67\12\5\4\0\5\5\2\0\1\52"+
    "\1\5\1\70\1\5\12\0\5\5\1\71\1\5\1\72"+
    "\1\0\11\5\1\73\11\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\3\5\1\74\1\64\1\5\1\75\1\5"+
    "\1\0\13\5\1\76\7\5\4\0\5\5\2\0\1\52"+
    "\1\5\1\77\1\5\12\0\10\5\1\0\23\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\14\5"+
    "\1\100\5\5\1\101\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\1\102\7\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\2\5\1\103\20\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\3\5\1\64"+
    "\4\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\10\5\1\104\1\5\1\105\10\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\7\5\1\106"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\7\5\1\107\1\0\23\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\10\5\1\0\10\5\1\110\12\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\10\5"+
    "\1\111\1\5\1\112\10\5\66\0\1\25\1\0\7\37"+
    "\1\0\11\37\1\0\4\37\1\0\3\37\1\0\4\37"+
    "\1\0\25\37\20\0\1\113\73\0\1\114\64\0\1\115"+
    "\3\0\1\116\70\0\1\117\25\0\7\45\1\0\16\45"+
    "\1\0\3\45\1\0\4\45\1\0\25\45\27\0\1\120"+
    "\64\0\1\121\3\0\1\122\70\0\1\123\36\0\1\124"+
    "\53\0\6\53\2\0\4\53\2\0\1\53\7\0\10\53"+
    "\1\0\23\53\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\5\5\1\74\2\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\14\5\1\125\6\5"+
    "\3\0\10\56\1\126\3\56\1\127\54\56\1\12\1\56"+
    "\1\12\1\0\1\12\1\130\3\12\12\56\1\12\2\56"+
    "\1\12\17\56\1\12\12\56\1\0\5\5\2\0\1\52"+
    "\3\5\12\0\10\5\1\0\15\5\1\131\5\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\10\5"+
    "\1\132\12\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\2\5\1\133\5\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\5\5\1\134\2\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\10\5\1\0"+
    "\14\5\1\64\6\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\16\5\1\135\4\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\6\5\1\136\1\5\1\0"+
    "\23\5\4\0\5\5\2\0\1\52\3\5\12\0\1\137"+
    "\7\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\1\5\1\64\6\5\1\0\23\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\12\5\1\140"+
    "\10\5\4\0\5\5\2\0\1\52\3\5\12\0\10\5"+
    "\1\0\12\5\1\141\10\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\3\5\1\142\2\5\1\64\1\5\1\0"+
    "\13\5\1\64\7\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\16\5\1\125\4\5\4\0\5\5"+
    "\2\0\1\52\1\143\2\5\12\0\10\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\7\5\1\144"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\10\5\1\0\3\5\1\145\17\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\3\5\1\133\4\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\10\5\1\0"+
    "\13\5\1\146\7\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\1\5\1\147\4\5\1\150\1\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\6\5\1\151"+
    "\1\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\2\5\1\152\5\5\1\0\23\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\13\5\1\153"+
    "\7\5\4\0\5\5\2\0\1\52\3\5\12\0\5\5"+
    "\1\70\2\5\1\0\23\5\32\0\1\154\65\0\1\155"+
    "\70\0\1\156\67\0\1\157\54\0\1\160\65\0\1\161"+
    "\70\0\1\162\67\0\1\163\30\0\3\164\5\0\1\164"+
    "\16\0\1\164\2\0\1\164\6\0\5\164\2\0\1\164"+
    "\12\0\5\5\2\0\1\52\3\5\12\0\7\5\1\165"+
    "\1\0\23\5\3\0\7\56\1\0\60\56\3\166\2\56"+
    "\1\126\2\56\1\166\1\127\15\56\1\166\2\56\1\166"+
    "\6\56\5\166\2\56\1\166\11\56\1\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\12\5\1\167\10\5"+
    "\4\0\5\5\2\0\1\52\1\5\1\170\1\5\12\0"+
    "\10\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\7\5\1\64\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\13\5\1\64\7\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\10\5\1\0"+
    "\15\5\1\171\5\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\7\5\1\172\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\7\5\1\135\1\0\23\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\1\173"+
    "\22\5\4\0\5\5\2\0\1\52\3\5\12\0\10\5"+
    "\1\0\15\5\1\64\5\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\1\5\1\174\6\5\1\0\23\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\10\5"+
    "\1\175\12\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\10\5\1\0\13\5\1\133\7\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\4\5\1\176\16\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\7\5\1\177"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\1\200\2\5"+
    "\12\0\10\5\1\0\23\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\10\5\1\0\10\5\1\201\12\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\1\5\1\171\6\5"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\2\5\1\202\5\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\5\5\1\203\2\5\1\0\23\5"+
    "\33\0\1\204\72\0\1\205\63\0\1\155\52\0\1\206"+
    "\71\0\1\207\72\0\1\210\63\0\1\161\52\0\1\211"+
    "\44\0\3\212\5\0\1\212\16\0\1\212\2\0\1\212"+
    "\6\0\5\212\2\0\1\212\12\0\5\5\2\0\1\52"+
    "\3\5\12\0\3\5\1\213\4\5\1\0\23\5\3\0"+
    "\3\56\3\214\2\56\1\126\2\56\1\214\1\127\15\56"+
    "\1\214\2\56\1\214\6\56\5\214\2\56\1\214\11\56"+
    "\1\0\5\5\2\0\1\52\3\5\12\0\10\5\1\0"+
    "\15\5\1\215\5\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\3\5\1\216\4\5\1\0\23\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\10\5\1\64"+
    "\12\5\4\0\5\5\2\0\1\52\3\5\12\0\10\5"+
    "\1\0\11\5\1\74\11\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\7\5\1\134\1\0\23\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\10\5\1\217"+
    "\12\5\4\0\5\5\2\0\1\52\3\5\12\0\1\5"+
    "\1\220\6\5\1\0\23\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\10\5\1\0\5\5\1\221\15\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\1\5\1\147\6\5"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\10\5\1\0\13\5\1\222\7\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\1\5\1\223\6\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\5\5\1\224"+
    "\2\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\10\5\1\225\12\5\34\0\1\155"+
    "\4\0\1\205\46\0\1\226\45\0\1\206\1\227\3\206"+
    "\1\227\2\0\3\206\2\0\1\227\1\0\1\206\1\227"+
    "\1\0\3\227\10\206\1\227\23\206\1\227\1\0\1\227"+
    "\31\0\1\161\4\0\1\210\46\0\1\230\45\0\1\211"+
    "\1\231\3\211\1\231\2\0\3\211\2\0\1\231\1\0"+
    "\1\211\1\231\1\0\3\231\10\211\1\231\23\211\1\231"+
    "\1\0\1\231\3\0\3\232\5\0\1\232\16\0\1\232"+
    "\2\0\1\232\6\0\5\232\2\0\1\232\11\0\3\56"+
    "\3\233\2\56\1\126\2\56\1\233\1\127\15\56\1\233"+
    "\2\56\1\233\6\56\5\233\2\56\1\233\11\56\1\0"+
    "\5\5\2\0\1\52\3\5\12\0\10\5\1\0\12\5"+
    "\1\234\10\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\4\5\1\235\3\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\1\5\1\236\1\5\12\0\10\5\1\0\23\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\5\5\1\237"+
    "\2\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\2\5\1\240\20\5\4\0\5\5"+
    "\2\0\1\52\1\5\1\64\1\5\12\0\10\5\1\0"+
    "\23\5\4\0\5\5\2\0\1\52\3\5\12\0\5\5"+
    "\1\241\2\5\1\0\23\5\4\0\5\5\2\0\1\52"+
    "\1\5\1\242\1\5\12\0\10\5\1\0\23\5\4\0"+
    "\5\5\2\0\1\52\2\5\1\243\12\0\10\5\1\0"+
    "\23\5\23\0\1\206\64\0\1\211\47\0\3\5\5\0"+
    "\1\5\16\0\1\5\2\0\1\5\6\0\5\5\2\0"+
    "\1\5\11\0\3\56\3\12\2\56\1\126\2\56\1\12"+
    "\1\127\15\56\1\12\2\56\1\12\6\56\5\12\2\56"+
    "\1\12\11\56\1\0\5\5\2\0\1\52\3\5\12\0"+
    "\10\5\1\0\13\5\1\244\7\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\12\5\1\245\10\5"+
    "\4\0\5\5\2\0\1\52\3\5\12\0\10\5\1\0"+
    "\11\5\1\133\11\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\12\5\1\246\10\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\10\5\1\0\6\5\1\247"+
    "\14\5\4\0\5\5\2\0\1\52\3\5\12\0\10\5"+
    "\1\0\12\5\1\250\10\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\10\5\1\0\16\5\1\64\4\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\6\5\1\125\1\5"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\2\5\1\251\5\5\1\0\23\5\4\0\5\5\2\0"+
    "\1\52\3\5\12\0\10\5\1\0\13\5\1\141\7\5"+
    "\4\0\5\5\2\0\1\52\1\5\1\165\1\5\12\0"+
    "\10\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\7\5\1\64\13\5\4\0\5\5"+
    "\2\0\1\52\1\5\1\252\1\5\12\0\10\5\1\0"+
    "\23\5\4\0\5\5\2\0\1\52\3\5\12\0\1\253"+
    "\7\5\1\0\23\5\4\0\5\5\2\0\1\52\3\5"+
    "\12\0\10\5\1\0\10\5\1\254\12\5\4\0\5\5"+
    "\2\0\1\52\3\5\12\0\5\5\1\255\2\5\1\0"+
    "\23\5\4\0\5\5\2\0\1\52\3\5\12\0\6\5"+
    "\1\256\1\5\1\0\23\5\4\0\5\5\2\0\1\52"+
    "\3\5\12\0\3\5\1\141\4\5\1\0\23\5\4\0"+
    "\5\5\2\0\1\52\3\5\12\0\5\5\1\257\2\5"+
    "\1\0\23\5\4\0\5\5\2\0\1\52\3\5\12\0"+
    "\10\5\1\0\17\5\1\133\3\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8533];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\1\11\7\1\1\11"+
    "\12\1\1\11\5\1\1\11\3\1\1\0\5\1\3\11"+
    "\30\1\1\11\11\0\2\1\1\11\24\1\11\0\17\1"+
    "\2\0\1\1\2\0\1\1\1\0\13\1\5\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FpqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FpqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FpqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 34: break;
        case 20: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 8: 
          { 
          }
        case 39: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 176: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 177: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 178: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
