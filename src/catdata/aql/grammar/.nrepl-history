(def aql (antlr/parser "aql.g4"))
(def aql (antlr/parser "Aql.g4"))
(def aql (antlr/parser "AqlCommentTest.g4"))
aql
(slurp 
)
(doc slurp)
(slurp "AqlComment.aql")
(aql (slurp "AqlComment.aql"))
(def aql (antlr/parser "AqlCommentTest.g4"))
(aql (slurp "AqlComment.aql"))
(def hello (antlr/parser "Hello.g4"))
(hello "foo")
(hello "hello foo")
(def hello (antlr/parser "Hello.g4"))
(def he (antlr/parser "Hello.g4"))
(def hello (antlr/parser "Hello.g4"))
(def hello (antlr/parser "HelloLexer.g4"))
(def aql (antlr/parser "AqlCommentTest.g4"))
(import '(java.lang ThreadLocal) org.antlr.v4.Tool '(org.antlr.v4.tool LexerGrammar Grammar) '(org.antlr.v4.parse ANTLRParser) '(org.antlr.v4.runtime CommonTokenStream Lexer LexerInterpreter Parser ParserInterpreter) org.antlr.v4.runtime.tree.ParseTree)
(def aql (antlr/parser "AqlCommentTest.g4"))
(aql (slurp "AqlCommentTest.aql"))
(aql (slurp "AqlCommentSample.aql"))
(def aql (antlr/parser "AqlCommentTest.g4"))
(aql (slurp "AqlCommentSample.aql"))
(antlr4 :grammar "AqlCommentTest.g4")
(def antlr (antlr4 :grammar "AqlCommentTest.g4"))
(def aql (antlr4 :grammar "AqlCommentTest.g4"))
(aql (slurp "AqlCommentSample.aql"))
(def antlr (antlr4 :grammar "AqlCommentTest.g4" :show))
(def antlr (antlr4 :grammar "AqlCommentTest.g4" :show 5))
(def key1 "-atn")
(def key2 ["-atn" "-no-atn"])
(len key1)
(length key1)
(count key1)
(count key2)
(seq? key2)
(seq? key1)
key2
(sequential? key1)
(sequential? key2)
(def antlr (antlr4 :grammar "AqlCommentTest.g4" :show 5))
(def aql (antlr4 :grammar "AqlCommentTest.g4" :show 5))
aql
(def aql (antlr4 :grammar "AqlCommentTest.g4" :show 5))
(def aql (boot (antlr4 :grammar "AqlCommentTest.g4" :show 5)))
(def aql (boot (antlr4 :grammar "AqlCommentTest.g4" :show 5))
)
(boot (antlr4 :grammar "AqlCommentTest.g4" :show 5))
(boot (antlr4 :grammar "AqlCommentTest.g4" :show ))
(boot (antlr4 :grammar "AqlCommentTest.g4" :show true ))
(boot (antlr4 :show true ))
target
(def target)
(boot (antlr4 :show true ))
(boot (antlr4 :grammar "AqlCommentTest.g4" :show true ))
(def items [])
(first items)
(first items
(boot (antlr4 :grammar "AqlCommentTest.g4" :show true ))
(def key ["-listener" "-no-listener"])
(doc name)
(def option ["-listener" "-no-listener"])
(def object )
(if object (first option) (second option)
)
(def object nil)
(if object (first option) (second option))
(if nil "f" "j")
(import 'AqlLexer)
(AqlLexer.)
(AqlLexer. nil)
(def lex (AqlLexer. nil))
(def lex (AqlRulesLexer. nil))
(def lex (AqlLexerRules. nil))
