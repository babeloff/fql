package catdata.aql.examples;

public class AqlMatchExample extends AqlExample {

	@Override
	public String getName() {
		return "Match";
	}

	@Override
	public String getText() {
		return s;
	}

	String s = "//test graphs for matching"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n// (R, T) in O Paper "
			+ "\n"
			+ "\ngraph emp1_A = literal {"
			+ "\n	nodes "
			+ "\n		A Str Nat"
			+ "\n	edges"
			+ "\n		emp_last  : A -> Str"
			+ "\n       	dept_name : A -> Str"
			+ "\n        	sum       : A -> Nat"
			+ "\n}"
			+ "\n"
			+ "\ngraph emp1_B = literal {"
			+ "\n	nodes "
			+ "\n		Emp Dept QR Str Nat"
			+ "\n	edges"
			+ "\n		mgr  : Emp  -> Emp"
			+ "\n         	wrk  : Emp  -> Dept"
			+ "\n        	sec  : Dept -> Emp"
			+ "\n        	f    : QR   -> Emp"
			+ "\n        	g    : QR   -> Dept"
			+ "\n        	last : Emp  -> Str"
			+ "\n        	name : Dept -> Str"
			+ "\n        	sal  : Emp  -> Nat"
			+ "\n}"
			+ "\n"
			+ "\npragma emp1_AB_naive = match \"naive\" : emp1_A -> emp1_B   	"
			+ "\npragma emp1_BA_naive = match \"naive\" : emp1_B -> emp1_A  	"
			+ "\npragma emp1_AB_sf = match \"sf\" : emp1_A -> emp1_B   	"
			+ "\npragma emp1_BA_sf = match \"sf\" : emp1_B -> emp1_A 	"
			+ "\n"
			+ "\n/////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//- (S, L) in O Paper "
			+ "\n"
			+ "\ngraph emp2_A = literal {"
			+ "\n	nodes"
			+ "\n		Emp Dept Str Nat"
			+ "\n	edges"
			+ "\n     	mgr  : Emp  -> Emp"
			+ "\n         	wrk  : Emp  -> Dept"
			+ "\n         	sec  : Dept -> Emp"
			+ "\n         	last : Emp  -> Str"
			+ "\n         	name : Dept -> Str"
			+ "\n         	sal  : Emp  -> Nat"
			+ "\n}"
			+ "\n"
			+ "\ngraph emp2_B = literal {"
			+ "\n	nodes"
			+ "\n		Emp Dept Team Str Nat"
			+ "\n	edges"
			+ "\n         mgr  : Emp  -> Emp"
			+ "\n         wrk  : Emp  -> Dept"
			+ "\n         sec  : Dept -> Emp"
			+ "\n         on   : Emp  -> Team"
			+ "\n         bel  : Team -> Dept"
			+ "\n         last : Emp  -> Str"
			+ "\n         name : Dept -> Str"
			+ "\n         sal  : Emp  -> Nat"
			+ "\n         col  : Team -> Str"
			+ "\n}"
			+ "\n"
			+ "\npragma emp2_AB_naive = match \"naive\" : emp2_A -> emp2_B   	"
			+ "\npragma emp2_BA_naive = match \"naive\" : emp2_B -> emp2_A   	"
			+ "\npragma emp2_AB_sf = match \"sf\" : emp2_A -> emp2_B   	"
			+ "\npragma emp2_BA_sf = match \"sf\" : emp2_B -> emp2_A  	"
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//- (C, D) in + Delta "
			+ "\n"
			+ "\ngraph delta_A = literal {"
			+ "\n	nodes"
			+ "\n		T1 T2 string int"
			+ "\n	edges	"
			+ "\n		t1_ssn    : T1 -> string"
			+ "\n		t1_first  : T1 -> string"
			+ "\n		t1_last   : T1 -> string"
			+ "\n		t2_first  : T2 -> string"
			+ "\n		t2_last   : T2 -> string"
			+ "\n		t2_salary : T2 -> int"
			+ "\n}"
			+ "\n"
			+ "\ngraph delta_B = literal { "
			+ "\n	nodes"
			+ "\n		T string int"
			+ "\n	edges"
			+ "\n		ssn0    : T -> string"
			+ "\n		first0  : T -> string"
			+ "\n		last0   : T -> string"
			+ "\n		salary0 : T -> int"
			+ "\n}"
			+ "\n"
			+ "\npragma delta_AB_naive = match \"naive\" : delta_A -> delta_B   	"
			+ "\npragma delta_BA_naive = match \"naive\" : delta_B -> delta_A   	"
			+ "\npragma delta_AB_sf = match \"sf\" : delta_A -> delta_B   	"
			+ "\npragma delta_BA_sf = match \"sf\" : delta_B -> delta_A   	"
			+ "\n"
			+ "\n"
			+ "\n///////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\n//- (C, D) in + Pi "
			+ "\n"
			+ "\ngraph pi_A = literal {"
			+ "\n	nodes "
			+ "\n		c1 c2 string"
			+ "\n	edges "
			+ "\n		att1 : c1 -> string"
			+ "\n		att2 : c1 -> string"
			+ "\n		att3 : c2 -> string"
			+ "\n}"
			+ "\n"
			+ "\ngraph pi_B = literal {"
			+ "\n	nodes"
			+ "\n		d string"
			+ "\n	edges"
			+ "\n		a1 : d -> string"
			+ "\n		a2 : d -> string"
			+ "\n		a3 : d -> string"
			+ "\n}"
			+ "\n"
			+ "\npragma pi_AB_naive = match \"naive\" : pi_A -> pi_B   	"
			+ "\npragma pi_BA_naive = match \"naive\" : pi_B -> pi_A	"
			+ "\npragma pi_AB_sf = match \"sf\" : pi_A -> pi_B   	"
			+ "\npragma pi_BA_sf = match \"sf\" : pi_B -> pi_A"
			+ "\n"
			+ "\n////////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\ngraph one = literal {"
			+ "\n	nodes"
			+ "\n		A B"
			+ "\n	edges"
			+ "\n		f : A -> B	"
			+ "\n}"
			+ "\n"
			+ "\ngraph three = literal {"
			+ "\n	nodes"
			+ "\n		A X B"
			+ "\n	edges"
			+ "\n		f : A -> X"
			+ "\n		g : X -> B	"
			+ "\n}"
			+ "\n"
			+ "\npragma intoPath_naive = match \"naive\" : one -> three"
			+ "\npragma outOfPath_naive= match \"naive\" : three -> one"
			+ "\npragma intoPath_sf = match \"sf\" : one -> three"
			+ "\npragma outOfPath_sf= match \"sf\" : three -> one"
			+ "\n";




}
