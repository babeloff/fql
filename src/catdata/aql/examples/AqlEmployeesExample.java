package catdata.aql.examples;

public class AqlEmployeesExample extends AqlExample {

	@Override
	public String getName() {
		return "Employees";
	}

	@Override
	public String getText() {
		return s;
	}

	String s = "typeside Ty = literal { "
			+ "\n	types"
			+ "\n 		string "
			+ "\n 		nat"
			+ "\n	constants"
			+ "\n 		Al Akin Bob Bo Carl Cork Dan Dunn Math CS : string"
			+ "\n 		zero : nat"
			+ "\n 	functions 		"
			+ "\n	 	succ		: nat -> nat"
			+ "\n	 	plus		: nat, nat -> nat"
			+ "\n	equations  "
			+ "\n	 	forall x. plus(zero, x) = x"
			+ "\n	 	forall x, y. plus(succ(x),y) = succ(plus(x,y))"
			+ "\n	options"
			+ "\n		prover = completion"
			+ "\n}"
			+ "\n"
			+ "\nschema S = literal : Ty {"
			+ "\n	entities"
			+ "\n		Employee "
			+ "\n		Department"
			+ "\n	foreign_keys"
			+ "\n		manager   : Employee -> Employee"
			+ "\n		worksIn   : Employee -> Department"
			+ "\n		secretary : Department -> Employee"
			+ "\n	path_equations "
			+ "\n		manager.worksIn = worksIn"
			+ "\n  		secretary.worksIn = Department"
			//+ "\n  		manager.manager = manager"
			+ "\n  	attributes"
			+ "\n  		first last	: Employee -> string"
			+ "\n     	age			: Employee -> nat"
			+ "\n     	cummulative_age: Employee -> nat"
			+ "\n     	name 		: Department -> string"
			+ "\n     observation_equations"
			+ "\n     	forall e. cummulative_age(e) = plus(age(e), age(manager(e)))"
			+ "\n	options"
			+ "\n		prover = completion"
			+ "\n}"
			+ "\n"
			+ "\ninstance I = literal : S {"
			+ "\n	generators "
			+ "\n		a b c : Employee"
			+ "\n		m s : Department"
			+ "\n	equations "
			+ "\n		first(a) = Al"
			+ "\n		first(b) = Bob  last(b) = Bo"
			+ "\n		first(c) = Carl "
			+ "\n		name(m)  = Math name(s) = CS"
			+ "\n		age(a) = age(c) "
			+ "\n		manager(a) = b manager(b) = b manager(c) = c"
			+ "\n		worksIn(a) = m worksIn(b) = m worksIn(c) = s"
			+ "\n		secretary(s) = c secretary(m) = b "
			+ "\n		secretary(worksIn(a)) = manager(a)"
			+ "\n		worksIn(a) = worksIn(manager(a))"
			+ "\n		age(a) = zero.succ.succ "
			+ "\n		age(manager(a)) = zero.succ"
			+ "\n	options"
			+ "\n		prover = completion"
			+ "\n		completion_precedence = \"zero a b c m s Al Akin Bob Bo Carl Cork Dan Dunn Math CS first last name age manager worksIn secretary succ plus\""
			+ "\n} "
			+ "\n"
			+ "\n/////////////////////////////////////////////////////////////////"
			+ "\n"
			+ "\ntypeside TyJava = literal { "
			+ "\n	java_types"
			+ "\n		string = \"java.lang.String\""
			+ "\n		nat = \"java.lang.Integer\""
			+ "\n	java_constants"
			+ "\n		string = \"return input[0]\""
			+ "\n		nat = \"return java.lang.Integer.parseInt(input[0])\""
			+ "\n	java_functions"
			+ "\n		plus : nat,nat -> nat = \"return (input[0] + input[1]).intValue()\""
			+ "\n}"
			+ "\n"
			+ "\nschema SJava = literal : TyJava {"
			+ "\n	entities"
			+ "\n		Employee "
			+ "\n		Department"
			+ "\n	foreign_keys"
			+ "\n		manager   : Employee -> Employee"
			+ "\n		worksIn   : Employee -> Department"
			+ "\n		secretary : Department -> Employee"
			+ "\n	path_equations "
			+ "\n		manager.worksIn = worksIn"
			+ "\n  		secretary.worksIn = Department"
			+ "\n  		manager.manager = manager"
			+ "\n  	attributes"
			+ "\n  		first last	: Employee -> string"
			+ "\n     	age			: Employee -> nat"
			+ "\n     	cummulative_age: Employee -> nat"
			+ "\n     	name 		: Department -> string"
			+ "\n     observation_equations"
			+ "\n     	forall e. cummulative_age(e) = plus(age(e), age(manager(e)))"
			+ "\n}"
			+ "\n"
			+ "\ninstance IJava = literal : SJava {"
			+ "\n	generators "
			+ "\n		a b c : Employee"
			+ "\n		m s : Department"
			+ "\n	equations "
			+ "\n		first(a) = Al"
			+ "\n		first(b) = Bob  last(b) = Bo"
			+ "\n		first(c) = Carl "
			+ "\n		name(m)  = Math name(s) = CS"
			+ "\n		age(a) = age(c) "
			+ "\n		manager(a) = b manager(b) = b manager(c) = c"
			+ "\n		worksIn(a) = m worksIn(b) = m worksIn(c) = s"
			+ "\n		secretary(s) = c secretary(m) = b "
			+ "\n		secretary(worksIn(a)) = manager(a)"
			+ "\n		worksIn(a) = worksIn(manager(a))"
			+ "\n		age(a) = \"2\" "
			+ "\n		age(manager(a)) = \"1\""
			+ "\n}"
			+ "\n";


}
