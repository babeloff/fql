/* The following code was generated by JFlex 1.4.3 on 6/27/17 1:46 AM */

/*
 * Generated on 6/27/17 1:46 AM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\26\1\14"+
    "\1\16\1\1\1\26\1\26\1\6\1\22\1\23\1\21\1\63\1\26"+
    "\1\64\1\25\1\20\1\4\3\4\4\4\2\3\1\40\1\26\1\15"+
    "\1\66\1\65\1\26\1\16\6\5\6\1\1\60\1\1\1\62\3\1"+
    "\1\61\7\1\1\27\1\10\1\27\1\67\1\2\1\0\1\45\1\13"+
    "\1\42\1\52\1\37\1\34\1\46\1\30\1\35\1\57\1\53\1\36"+
    "\1\47\1\44\1\43\1\32\1\50\1\12\1\33\1\31\1\11\1\55"+
    "\1\41\1\56\1\51\1\54\1\24\1\67\1\24\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\2\7\23\1\1\6\1\10\1\11\4\10\1\12"+
    "\5\10\1\13\3\10\1\0\1\14\3\1\2\4\1\15"+
    "\1\16\1\17\1\20\16\1\1\21\32\1\1\22\4\0"+
    "\1\23\11\0\5\1\1\4\1\24\1\4\54\1\15\0"+
    "\1\21\4\1\1\4\1\25\50\1\1\21\2\0\1\26"+
    "\2\0\1\27\2\0\1\30\1\0\2\1\1\4\1\1"+
    "\1\21\31\1\7\0\1\1\1\4\3\1\1\25\55\1"+
    "\1\25\26\1\1\21\21\1\1\21\25\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\340"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\340\0\u02a0\0\340"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u06c8\0\u0700\0\340\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\340\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\340\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\340\0\340\0\340\0\340\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0118\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\340\0\u1420\0\u1458\0\u1490\0\u14c8\0\340\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\340\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u0118\0\u2648"+
    "\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48"+
    "\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8"+
    "\0\u3800\0\u2fb0\0\u3838\0\u3058\0\u3870\0\u3100\0\u38a8\0\u38e0"+
    "\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0"+
    "\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0"+
    "\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360"+
    "\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520"+
    "\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0"+
    "\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0"+
    "\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60"+
    "\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20"+
    "\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0"+
    "\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0"+
    "\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160"+
    "\0\u5198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\2\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\2\20\2\5\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\16\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\6\1\41\4\6\1\42"+
    "\3\6\1\16\1\43\1\5\1\44\1\16\7\45\1\46"+
    "\11\45\1\47\6\45\1\50\3\45\1\51\4\45\1\52"+
    "\35\45\1\53\11\45\1\54\6\45\1\55\3\45\1\56"+
    "\4\45\1\57\26\45\7\60\1\61\20\60\1\62\3\60"+
    "\1\63\4\60\1\64\26\60\71\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\22\6\5\0\3\66\2\7"+
    "\1\66\2\0\4\66\2\0\1\66\11\0\10\66\1\0"+
    "\22\66\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\67\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\70\1\0\4\6\1\71\15\6"+
    "\5\0\7\13\1\72\1\73\3\13\1\74\53\13\17\0"+
    "\1\14\70\0\1\75\1\76\67\0\1\77\47\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\100\6\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\1\6\1\101\1\6"+
    "\14\0\10\6\1\0\10\6\1\102\11\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\103\1\6\14\0\10\6\1\0"+
    "\4\6\1\104\15\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\105\1\6\14\0\5\6\1\106\2\6\1\0\1\6"+
    "\1\107\5\6\1\110\12\6\6\0\5\6\2\0\1\65"+
    "\1\111\1\112\1\6\14\0\10\6\1\0\2\6\1\113"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\114\2\6\1\115\2\6\1\116\10\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\117"+
    "\2\6\1\0\4\6\1\120\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\121\2\6"+
    "\1\122\1\123\1\6\1\124\2\6\1\125\1\126\4\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\127\7\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\130\7\6\1\0\2\6\1\131\17\6\6\0\5\6"+
    "\2\0\1\65\2\6\1\132\14\0\2\6\1\133\5\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\134\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\135\1\6\1\136\4\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\1\6\1\137"+
    "\1\6\14\0\7\6\1\140\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\1\141\2\6\14\0\10\6\1\0\2\6"+
    "\1\142\1\6\1\143\15\6\6\0\5\6\2\0\1\65"+
    "\1\144\2\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\145\1\6\1\146"+
    "\1\6\1\147\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\150\15\6\72\0"+
    "\1\16\2\0\7\45\1\0\11\45\1\0\6\45\1\0"+
    "\3\45\1\0\4\45\1\0\26\45\20\0\1\151\100\0"+
    "\1\152\67\0\1\153\3\0\1\154\73\0\1\155\51\0"+
    "\1\156\75\0\1\157\67\0\1\160\3\0\1\161\73\0"+
    "\1\162\26\0\7\60\1\0\20\60\1\0\3\60\1\0"+
    "\4\60\1\0\26\60\31\0\1\163\67\0\1\164\3\0"+
    "\1\165\73\0\1\166\37\0\1\167\56\0\6\66\2\0"+
    "\4\66\2\0\1\66\11\0\10\66\1\0\22\66\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\170\2\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\171\6\6\1\0\3\6\1\172\2\6\1\173"+
    "\13\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\174\16\6\5\0\10\72\1\175\3\72"+
    "\1\176\57\72\1\13\1\72\1\13\1\0\1\13\1\177"+
    "\3\13\14\72\1\13\2\72\1\13\7\72\1\13\23\72"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\200\13\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\201\15\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\202\5\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\203\15\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\204\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\116\20\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\205\14\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\206\7\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\6\6\1\116\1\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\207\16\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\210\17\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\211\1\6\14\0"+
    "\10\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\212\4\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\213\5\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\214\6\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\215\13\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\216\6\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\217\5\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\1\220\2\6\14\0\10\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\221\14\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\110\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\2\6\1\222\2\6\1\223\1\6"+
    "\1\224\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\225\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\226\1\0\4\6\1\227"+
    "\15\6\6\0\5\6\2\0\1\65\1\230\2\6\14\0"+
    "\2\6\1\231\3\6\1\232\1\233\1\0\3\6\1\234"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\235\4\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\236\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\11\6"+
    "\1\221\10\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\237\6\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\240\4\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\241\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\242\6\6\1\0\3\6\1\243\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\6\6\1\244"+
    "\1\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\11\6\1\245\10\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\246\5\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\247\1\0\2\6\1\250\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\116\6\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\251"+
    "\4\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\6\6\1\252\1\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\14\6\1\253"+
    "\5\6\36\0\1\254\70\0\1\255\73\0\1\256\72\0"+
    "\1\257\57\0\1\260\70\0\1\261\73\0\1\262\72\0"+
    "\1\263\57\0\1\264\70\0\1\265\73\0\1\266\72\0"+
    "\1\267\31\0\3\270\5\0\1\270\20\0\1\270\2\0"+
    "\1\270\2\0\1\270\2\0\1\270\4\0\1\270\16\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\271\6\6"+
    "\1\0\7\6\1\272\12\6\6\0\5\6\2\0\1\65"+
    "\1\273\2\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\274"+
    "\15\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\275\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\11\6\1\112\10\6\5\0"+
    "\7\72\1\0\63\72\3\276\2\72\1\175\2\72\1\276"+
    "\1\176\17\72\1\276\2\72\1\276\2\72\1\276\2\72"+
    "\1\276\4\72\1\276\15\72\1\0\5\6\2\0\1\65"+
    "\3\6\14\0\6\6\1\277\1\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\300\16\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\301\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\302\14\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\303\7\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\304\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\305\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\133"+
    "\20\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\116\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\306\1\0\4\6\1\307\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\310"+
    "\5\6\1\311\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\312\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\313\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\2\6\1\314\14\0"+
    "\10\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\315\2\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\316\6\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\133\15\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\317\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\320"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\321\4\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\322\20\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\323\1\6\14\0\10\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\324\20\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\323\4\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\325\16\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\326\1\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\327\2\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\7\6\1\330\4\6\1\125\5\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\331\4\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\332\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\333\2\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\334\1\6\14\0\10\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\335\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\336\5\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\17\6\1\337"+
    "\1\340\1\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\341\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\342\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\343\2\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\344\5\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\345\1\6\14\0\10\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\346"+
    "\6\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\347\6\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\304\6\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\350\15\6\37\0\1\351\75\0\1\352"+
    "\66\0\1\255\55\0\1\353\74\0\1\354\75\0\1\355"+
    "\66\0\1\261\55\0\1\356\74\0\1\357\75\0\1\360"+
    "\66\0\1\265\55\0\1\361\45\0\3\362\5\0\1\362"+
    "\20\0\1\362\2\0\1\362\2\0\1\362\2\0\1\362"+
    "\4\0\1\362\16\0\1\6\1\363\3\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\1\323\2\6\14\0\10\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\364\1\6\14\0\10\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\6\6\1\323\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\14\6\1\323\5\6"+
    "\5\0\3\72\3\365\2\72\1\175\2\72\1\365\1\176"+
    "\17\72\1\365\2\72\1\365\2\72\1\365\2\72\1\365"+
    "\4\72\1\365\15\72\1\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\366\4\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\367\4\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\370\13\6\6\0\1\6\1\371\3\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\116\15\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\6\6\1\372\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\373\2\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\6\6\1\110"+
    "\1\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\374\15\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\145\1\6\14\0\10\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\1\6\1\375\1\6"+
    "\14\0\10\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\125\1\6\14\0\10\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\11\6"+
    "\1\304\10\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\376\6\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\10\6\1\116\11\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\116"+
    "\4\6\1\0\22\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\377\1\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\317\6\6\1\0"+
    "\22\6\6\0\1\6\1\u0100\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\116\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\12\6\1\116"+
    "\7\6\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\u0101\2\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\u0102\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\u0103\13\6\6\0\5\6\2\0\1\65\1\u0104\2\6"+
    "\14\0\10\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0105\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\u0106\1\6\14\0\10\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u0107\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u0108\2\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u0109\1\6\14\0"+
    "\10\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\277\7\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u010a\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u010b\20\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\u010c\1\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\303\2\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\4\6"+
    "\1\316\3\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\u010d\2\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\10\6"+
    "\1\277\11\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u010e\2\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u010f\2\6\1\0\22\6"+
    "\6\0\1\6\1\u0110\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\22\6\40\0\1\255\4\0\1\352\47\0"+
    "\1\u0111\50\0\1\353\1\u0112\3\353\1\u0112\2\0\3\353"+
    "\2\0\1\u0112\1\0\1\353\3\u0112\1\0\3\u0112\10\353"+
    "\1\u0112\22\353\2\u0112\1\0\1\u0112\34\0\1\261\4\0"+
    "\1\355\47\0\1\u0113\50\0\1\356\1\u0114\3\356\1\u0114"+
    "\2\0\3\356\2\0\1\u0114\1\0\1\356\3\u0114\1\0"+
    "\3\u0114\10\356\1\u0114\22\356\2\u0114\1\0\1\u0114\34\0"+
    "\1\265\4\0\1\360\47\0\1\u0115\50\0\1\361\1\u0116"+
    "\3\361\1\u0116\2\0\3\361\2\0\1\u0116\1\0\1\361"+
    "\3\u0116\1\0\3\u0116\10\361\1\u0116\22\361\2\u0116\1\0"+
    "\1\u0116\4\0\3\u0117\5\0\1\u0117\20\0\1\u0117\2\0"+
    "\1\u0117\2\0\1\u0117\2\0\1\u0117\4\0\1\u0117\16\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\7\6"+
    "\1\u0118\12\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\116\16\6\5\0\3\72\3\u0119"+
    "\2\72\1\175\2\72\1\u0119\1\176\17\72\1\u0119\2\72"+
    "\1\u0119\2\72\1\u0119\2\72\1\u0119\4\72\1\u0119\15\72"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\4\6\1\u011a"+
    "\3\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u011b\2\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\277"+
    "\15\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u011c\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\u011d\15\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u011e"+
    "\14\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\u011f\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0120\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\221\2\6"+
    "\1\0\10\6\1\303\11\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0121\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\u0122\14\6\1\u0123\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\271\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\11\6"+
    "\1\u0124\10\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\145\2\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u0125\15\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u0126\1\6\14\0"+
    "\10\6\1\0\4\6\1\u0127\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\14\6\1\u0128\5\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\317\16\6\6\0\5\6\2\0\1\65\2\6"+
    "\1\u0129\14\0\10\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u012a\6\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\u012b"+
    "\5\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\u012c\7\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u012d\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\u012e\16\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\u012f\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u0130\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u0131"+
    "\2\6\1\u0132\3\6\1\0\1\6\1\u0133\20\6\25\0"+
    "\1\353\67\0\1\356\67\0\1\361\52\0\3\6\5\0"+
    "\1\6\20\0\1\6\2\0\1\6\2\0\1\6\2\0"+
    "\1\6\4\0\1\6\16\0\5\6\2\0\1\65\1\u0134"+
    "\2\6\14\0\10\6\1\0\22\6\5\0\3\72\3\13"+
    "\2\72\1\175\2\72\1\13\1\176\17\72\1\13\2\72"+
    "\1\13\2\72\1\13\2\72\1\13\4\72\1\13\15\72"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u0135\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\11\6\1\u0136\10\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\7\6\1\123"+
    "\12\6\6\0\1\6\1\u0137\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\u0138\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u0139\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u013a\20\6\6\0\1\6\1\u013b\3\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\116\4\6\1\0\22\6"+
    "\6\0\1\6\1\u013c\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\6\6\1\u013d\13\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\116\4\6\1\0"+
    "\11\6\1\u013e\10\6\6\0\5\6\2\0\1\65\1\u013f"+
    "\2\6\14\0\10\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\u0140\1\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u0141\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\321\16\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u0142"+
    "\15\6\6\0\5\6\2\0\1\65\1\u0143\2\6\14\0"+
    "\10\6\1\0\22\6\6\0\1\6\1\u0144\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\u0145\5\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\205\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0146\6\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\277"+
    "\14\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\145\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\145\20\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\10\6"+
    "\1\u0147\11\6\6\0\5\6\2\0\1\65\1\111\2\6"+
    "\14\0\10\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\u0148\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\u0149\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\1\6\1\u014a\1\6"+
    "\14\0\10\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u014b\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u014c"+
    "\20\6\6\0\5\6\2\0\1\65\3\6\14\0\4\6"+
    "\1\116\3\6\1\0\22\6\6\0\1\6\1\u014d\3\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\277\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\1\6\1\u014e\14\6\1\u014f\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0150"+
    "\14\6\1\u0151\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\11\6\1\u0152\10\6\6\0\5\6"+
    "\2\0\1\65\2\6\1\105\14\0\10\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u0153\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u0154\2\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u0155\2\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u0156\6\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\221\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\u0157\20\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u0158\2\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\u0159\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\221"+
    "\5\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\u015a\16\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\316\1\6\14\0\10\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\277\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\21\6\1\u0138\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\u015b"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\12\6\1\u015c\7\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\u015d\4\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\11\6"+
    "\1\u015e\10\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\3\6\1\u015f\4\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\11\6\1\u0160\10\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\6\6\1\u0161"+
    "\1\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0162\6\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\13\6\1\323"+
    "\6\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\u0163\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\u0164\2\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\2\6"+
    "\1\u0165\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\u0166\16\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\317\1\6\14\0\10\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\u0167"+
    "\4\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\6\6\1\u0168\1\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\u0169\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\14\6\1\116\5\6\6\0\5\6\2\0\1\65\2\6"+
    "\1\u016a\14\0\10\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\14\6\1\u016b\5\6"+
    "\6\0\5\6\2\0\1\65\2\6\1\u016c\14\0\10\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u016d\2\6\1\0\22\6\6\0\1\6\1\u016e"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u016f"+
    "\6\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\2\6\1\u0170\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\3\6\1\u0171"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\116\14\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0172\6\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u0173\2\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\10\6\1\317\11\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\u0174\20\6"+
    "\6\0\1\6\1\u0175\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\u016b\20\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\3\6\1\323"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\u0176\4\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\277\4\6\1\0\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\303\16\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\3\6\1\u0177\4\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u0127\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u0178\13\6\6\0\1\6\1\u0179\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u017a\3\6\1\u017b"+
    "\2\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\106\2\6\1\0\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u017c\2\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\u017d\2\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\307\15\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\u017e\1\6\14\0\10\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\u017f\16\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\u0180\4\6\1\0\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\277"+
    "\6\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\u0181\15\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u0182\4\6\1\0"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u010e\6\6\1\0\22\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u0183\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0184\6\6"+
    "\1\0\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\3\6\1\u0185\4\6\1\0\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u0186\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\4\6\1\u0187"+
    "\3\6\1\0\22\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\u0188\16\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\u0189"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\1\6\1\323\20\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\210\1\6\14\0\10\6\1\0\22\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20944];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\5\1\1\11\1\1\1\11"+
    "\25\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\6\1\4\11\51\1\1\11\4\0\1\11\11\0\6\1"+
    "\1\11\55\1\15\0\60\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\36\1\7\0\162\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 25: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 30: break;
        case 21: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 35: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 36: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 38: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 39: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 40: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 41: break;
        case 17: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 42: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(DOCCOMMENT);
          }
        case 44: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 45: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 46: break;
        case 8: 
          { 
          }
        case 47: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 394: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 395: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 396: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 397: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
