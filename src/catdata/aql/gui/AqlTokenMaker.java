/* The following code was generated by JFlex 1.4.3 on 2/5/17 2:11 AM */

/*
 * Generated on 2/5/17 2:11 AM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings({"unused", "static-access"})
public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\26\1\14"+
    "\1\16\1\1\1\26\1\26\1\6\1\22\1\23\1\21\1\60\1\26"+
    "\1\61\1\25\1\20\1\4\3\4\4\4\2\3\1\40\1\26\1\15"+
    "\1\63\1\62\1\26\1\16\6\5\10\1\1\57\13\1\1\27\1\10"+
    "\1\27\1\64\1\2\1\0\1\45\1\13\1\42\1\52\1\37\1\34"+
    "\1\46\1\30\1\35\1\56\1\53\1\36\1\47\1\44\1\43\1\32"+
    "\1\50\1\12\1\33\1\31\1\11\1\54\1\41\1\55\1\51\1\1"+
    "\1\24\1\64\1\24\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\2\7\23\1\1\6\1\10\1\11\4\10\1\12"+
    "\5\10\1\13\3\10\1\0\1\14\2\1\2\4\1\15"+
    "\1\16\1\17\1\20\15\1\1\21\31\1\1\22\4\0"+
    "\1\23\11\0\2\1\1\4\1\24\1\4\50\1\15\0"+
    "\1\21\1\1\1\4\1\25\41\1\1\21\2\0\1\26"+
    "\2\0\1\27\2\0\1\30\1\0\2\1\1\4\1\1"+
    "\1\21\23\1\7\0\1\1\1\4\3\1\1\25\123\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\324"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\324\0\u027c\0\324"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u066b\0\u06a0\0\324\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\324\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\324\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\324\0\324\0\324\0\324\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0109\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\324\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\324\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\324"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120"+
    "\0\u2155\0\u0109\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293"+
    "\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b"+
    "\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933"+
    "\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb"+
    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b"+
    "\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u28fe"+
    "\0\u2fd3\0\u299d\0\u3008\0\u2a3c\0\u303d\0\u3072\0\u30a7\0\u30dc"+
    "\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284"+
    "\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c"+
    "\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4"+
    "\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c"+
    "\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924"+
    "\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc"+
    "\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74"+
    "\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c"+
    "\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4"+
    "\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c"+
    "\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\2\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\2\20\2\5\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\16\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\6\1\41\3\6\1\42"+
    "\1\6\1\16\1\43\1\5\1\44\1\16\7\45\1\46"+
    "\11\45\1\47\6\45\1\50\3\45\1\51\4\45\1\52"+
    "\32\45\1\53\11\45\1\54\6\45\1\55\3\45\1\56"+
    "\4\45\1\57\23\45\7\60\1\61\20\60\1\62\3\60"+
    "\1\63\4\60\1\64\23\60\66\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\17\6\5\0\3\66\2\7"+
    "\1\66\2\0\4\66\2\0\1\66\11\0\10\66\1\0"+
    "\17\66\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\67\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\70\1\0\17\6\5\0\7\13"+
    "\1\71\1\72\3\13\1\73\50\13\17\0\1\14\65\0"+
    "\1\74\1\75\64\0\1\76\44\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\77\6\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\100\1\6\14\0\10\6"+
    "\1\0\10\6\1\101\6\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\102\1\6\14\0\10\6\1\0\4\6\1\103"+
    "\12\6\6\0\5\6\2\0\1\65\1\6\1\104\1\6"+
    "\14\0\5\6\1\105\2\6\1\0\1\6\1\106\15\6"+
    "\6\0\5\6\2\0\1\65\1\107\1\110\1\6\14\0"+
    "\10\6\1\0\2\6\1\111\14\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\112\2\6"+
    "\1\113\2\6\1\114\5\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\115\2\6\1\0\4\6\1\116"+
    "\12\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\117\2\6\1\120\1\121\1\6\1\122"+
    "\1\6\1\123\1\124\2\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\125\7\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\126\7\6\1\0\2\6"+
    "\1\127\14\6\6\0\5\6\2\0\1\65\2\6\1\130"+
    "\14\0\2\6\1\131\5\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\132"+
    "\14\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\133\1\6\1\134\4\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\135\1\6\14\0\7\6\1\136"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\1\137\2\6"+
    "\14\0\10\6\1\0\4\6\1\140\12\6\6\0\5\6"+
    "\2\0\1\65\1\141\2\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\142"+
    "\1\6\1\143\1\6\1\144\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\145"+
    "\12\6\67\0\1\16\2\0\7\45\1\0\11\45\1\0"+
    "\6\45\1\0\3\45\1\0\4\45\1\0\23\45\20\0"+
    "\1\146\75\0\1\147\64\0\1\150\3\0\1\151\70\0"+
    "\1\152\46\0\1\153\72\0\1\154\64\0\1\155\3\0"+
    "\1\156\70\0\1\157\23\0\7\60\1\0\20\60\1\0"+
    "\3\60\1\0\4\60\1\0\23\60\31\0\1\160\64\0"+
    "\1\161\3\0\1\162\70\0\1\163\34\0\1\164\53\0"+
    "\6\66\2\0\4\66\2\0\1\66\11\0\10\66\1\0"+
    "\17\66\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\165\2\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\166\6\6\1\0\17\6\5\0"+
    "\10\71\1\167\3\71\1\170\54\71\1\13\1\71\1\13"+
    "\1\0\1\13\1\171\3\13\14\71\1\13\2\71\1\13"+
    "\7\71\1\13\20\71\1\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\6\6\1\172\10\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\173"+
    "\12\6\6\0\5\6\2\0\1\65\3\6\14\0\2\6"+
    "\1\174\5\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\175\12\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\176\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\114\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\177\11\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\200\7\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\201\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\202\14\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\203\1\6\14\0"+
    "\10\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\204\4\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\205\5\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\206\6\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\207\10\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\210\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\211\5\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\1\212\2\6\14\0\10\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\213\11\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\214\12\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\2\6\1\215\2\6\1\216\1\6"+
    "\1\217\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\220\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\221\1\0\4\6\1\222"+
    "\12\6\6\0\5\6\2\0\1\65\1\11\2\6\14\0"+
    "\6\6\1\223\1\224\1\0\3\6\1\225\13\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\226\4\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\227\6\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\11\6\1\213\5\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\230"+
    "\6\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\231\4\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\232"+
    "\12\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\233\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\6\6\1\234\1\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\2\6\1\235\5\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\236\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\114\6\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\237\4\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\6\6\1\240\1\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\13\6\1\241\3\6"+
    "\36\0\1\242\65\0\1\243\70\0\1\244\67\0\1\245"+
    "\54\0\1\246\65\0\1\247\70\0\1\250\67\0\1\251"+
    "\54\0\1\252\65\0\1\253\70\0\1\254\67\0\1\255"+
    "\26\0\3\256\5\0\1\256\20\0\1\256\2\0\1\256"+
    "\2\0\1\256\2\0\1\256\4\0\1\256\13\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\257\6\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\1\260\2\6\14\0"+
    "\10\6\1\0\17\6\5\0\7\71\1\0\60\71\3\261"+
    "\2\71\1\167\2\71\1\261\1\170\17\71\1\261\2\71"+
    "\1\261\2\71\1\261\2\71\1\261\4\71\1\261\12\71"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\6\6\1\262"+
    "\1\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\263\13\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\264\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\265\11\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\266\7\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\267\10\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\270"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\131\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\114\10\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\271"+
    "\1\0\4\6\1\272\12\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\273\5\6\1\274\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\275\14\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\276\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\2\6\1\277\14\0\10\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\300\2\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\301\6\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\131\12\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\302"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\6\6\1\114\1\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\303\14\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\304"+
    "\4\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\305\15\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\306\1\6\14\0\10\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\1\6\1\307\15\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\306\4\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\310\2\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\13\6\1\123\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\311\4\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\312"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\313\2\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\314\1\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\315"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\316\5\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\317\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\320\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\321\5\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\322\1\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\323"+
    "\6\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\267\6\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\324"+
    "\12\6\37\0\1\325\72\0\1\326\63\0\1\243\52\0"+
    "\1\327\71\0\1\330\72\0\1\331\63\0\1\247\52\0"+
    "\1\332\71\0\1\333\72\0\1\334\63\0\1\253\52\0"+
    "\1\335\42\0\3\336\5\0\1\336\20\0\1\336\2\0"+
    "\1\336\2\0\1\336\2\0\1\336\4\0\1\336\13\0"+
    "\1\6\1\337\3\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\1\6\1\340"+
    "\1\6\14\0\10\6\1\0\17\6\5\0\3\71\3\341"+
    "\2\71\1\167\2\71\1\341\1\170\17\71\1\341\2\71"+
    "\1\341\2\71\1\341\2\71\1\341\4\71\1\341\12\71"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\3\6\1\342"+
    "\4\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\343\4\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\344"+
    "\10\6\6\0\1\6\1\345\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\114\12\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\346\10\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\347\2\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\214\1\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\350\12\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\142\1\6\14\0\10\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\351\1\6\14\0\10\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\1\6\1\123\1\6"+
    "\14\0\10\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\11\6\1\267\5\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\352\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\10\6\1\114\6\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\114\4\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\353\1\6\14\0"+
    "\10\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\302\6\6\1\0\17\6\6\0\1\6"+
    "\1\354\3\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\114\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\12\6\1\114\4\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\355"+
    "\10\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\356\6\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\357\1\6\14\0\10\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\2\6"+
    "\1\360\14\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\361\2\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\362\1\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\262\7\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\1\6\1\363"+
    "\1\6\14\0\10\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\266\2\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\364"+
    "\2\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\10\6\1\262\6\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\365\2\6\1\0"+
    "\17\6\6\0\1\6\1\366\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\17\6\40\0\1\243\4\0\1\326"+
    "\44\0\1\367\45\0\1\327\1\370\3\327\1\370\2\0"+
    "\3\327\2\0\1\370\1\0\1\327\3\370\1\0\3\370"+
    "\10\327\1\370\17\327\2\370\1\0\1\370\34\0\1\247"+
    "\4\0\1\331\44\0\1\371\45\0\1\332\1\372\3\332"+
    "\1\372\2\0\3\332\2\0\1\372\1\0\1\332\3\372"+
    "\1\0\3\372\10\332\1\372\17\332\2\372\1\0\1\372"+
    "\34\0\1\253\4\0\1\334\44\0\1\373\45\0\1\335"+
    "\1\374\3\335\1\374\2\0\3\335\2\0\1\374\1\0"+
    "\1\335\3\374\1\0\3\374\10\335\1\374\17\335\2\374"+
    "\1\0\1\374\4\0\3\375\5\0\1\375\20\0\1\375"+
    "\2\0\1\375\2\0\1\375\2\0\1\375\4\0\1\375"+
    "\13\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\7\6\1\376\7\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\114\13\6\5\0\3\71"+
    "\3\377\2\71\1\167\2\71\1\377\1\170\17\71\1\377"+
    "\2\71\1\377\2\71\1\377\2\71\1\377\4\71\1\377"+
    "\12\71\1\0\5\6\2\0\1\65\3\6\14\0\4\6"+
    "\1\u0100\3\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\u0101\2\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\262\12\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u0102\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\u0103\12\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\u0104\11\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\u0105\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u0106\6\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\213"+
    "\2\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0107\6\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0108"+
    "\13\6\1\u0109\1\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\142\2\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\u010a\1\6\14\0\10\6\1\0"+
    "\4\6\1\u010b\12\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\13\6\1\u010c\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\3\6\1\302"+
    "\13\6\6\0\5\6\2\0\1\65\2\6\1\u010d\14\0"+
    "\10\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u010e\6\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u010f"+
    "\12\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\u0110\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u0111\13\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0112\2\6"+
    "\1\u0113\3\6\1\0\1\6\1\u0114\15\6\25\0\1\327"+
    "\64\0\1\332\64\0\1\335\47\0\3\6\5\0\1\6"+
    "\20\0\1\6\2\0\1\6\2\0\1\6\2\0\1\6"+
    "\4\0\1\6\13\0\5\6\2\0\1\65\1\u0115\2\6"+
    "\14\0\10\6\1\0\17\6\5\0\3\71\3\13\2\71"+
    "\1\167\2\71\1\13\1\170\17\71\1\13\2\71\1\13"+
    "\2\71\1\13\2\71\1\13\4\71\1\13\12\71\1\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\2\6"+
    "\1\u0116\14\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\11\6\1\u0117\5\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\7\6\1\121\7\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\16\6\1\u0118\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\u0119\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\u011a\15\6"+
    "\6\0\1\6\1\u011b\3\6\2\0\1\65\3\6\14\0"+
    "\3\6\1\114\4\6\1\0\17\6\6\0\1\6\1\u011c"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u011d\10\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\114\4\6\1\0\11\6\1\u011e\5\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u011f\12\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\304\13\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u0120"+
    "\12\6\6\0\5\6\2\0\1\65\1\u0121\2\6\14\0"+
    "\10\6\1\0\17\6\6\0\1\6\1\u0122\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u0123\6\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\262\11\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\142\15\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\10\6"+
    "\1\u0124\6\6\6\0\5\6\2\0\1\65\1\107\2\6"+
    "\14\0\10\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\u0125\14\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\u0126\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\1\6\1\u0127\1\6"+
    "\14\0\10\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u0103\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\4\6\1\114\3\6\1\0"+
    "\17\6\6\0\1\6\1\u0128\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\262\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0129"+
    "\13\6\1\u012a\1\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\u012b\13\6\1\u012c\1\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\11\6\1\u012d\5\6\6\0\5\6\2\0\1\65\2\6"+
    "\1\104\14\0\10\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u012e\2\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u012f"+
    "\6\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\213\6\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0130"+
    "\15\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\u0131\14\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\2\6\1\213\5\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\u0132\13\6\6\0\5\6\2\0\1\65\1\6\1\301"+
    "\1\6\14\0\10\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\262\10\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\12\6\1\u0133\4\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\u0134\4\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\11\6\1\u011e"+
    "\5\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\u0135\4\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\11\6\1\u0136\5\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\6\6\1\u0137\1\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\u0138\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u0139\2\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u013a\14\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\302\1\6\14\0\10\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u013b\4\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u013c\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\13\6\1\114\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\13\6\1\u013d"+
    "\3\6\6\0\5\6\2\0\1\65\2\6\1\u013e\14\0"+
    "\10\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u013f\2\6\1\0\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u0140\6\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\u0141\14\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u0142\13\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0143\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\10\6\1\302\6\6\6\0\1\6\1\u0144"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u013d\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\306\13\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\262\4\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\266\13\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\u0145\4\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\u010b\12\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\u0146\3\6\1\u0147\2\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u0148\2\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\1\6\1\u0149"+
    "\1\6\14\0\10\6\1\0\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u014a\13\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\u014b"+
    "\4\6\1\0\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\u014c\12\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u014d\4\6\1\0"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u014e\6\6\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u014f\13\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0150\6\6"+
    "\1\0\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u0151\1\0\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\u0152\4\6\1\0\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\u0153\12\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\142\13\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\4\6\1\u0154\3\6\1\0\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\u0155\13\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\2\6\1\u0156\14\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\306"+
    "\15\6\6\0\5\6\2\0\1\65\1\6\1\202\1\6"+
    "\14\0\10\6\1\0\17\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17119];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\5\1\1\11\1\1\1\11"+
    "\25\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\5\1\4\11\47\1\1\11\4\0\1\11\11\0\3\1"+
    "\1\11\51\1\15\0\46\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\30\1\7\0\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@SuppressWarnings("static-method")
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  @SuppressWarnings("static-method")
private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 25: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 30: break;
        case 21: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 35: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 36: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 38: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 39: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 40: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 41: break;
        case 17: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 42: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(DOCCOMMENT);
          }
        case 44: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 45: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 46: break;
        case 8: 
          { 
          }
        case 47: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 343: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 344: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 345: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 346: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
